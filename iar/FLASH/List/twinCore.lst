###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       17/Aug/2018  19:18:30
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\twinCore\twinCore.c
#    Command line =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\twinCore\twinCore.c
#        -D LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -lB
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -o C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\camera\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\led\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\oled\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\task\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\uart\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\twinCore\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\mpu6050\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\nrf\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\calc\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\UI\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ledArray\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\CPU\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\driver\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\class\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List\twinCore.lst
#    Object file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj\twinCore.o
#
###############################################################################

C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\twinCore\twinCore.c
      1          #include "twinCore.h"
      2          
      3          /****Discription**********************************************/
      4          
      5          /*
      6          	0.需先调用twinCore.Init()函数再使用本驱动
      7          	1.移植于uart，因为双核通讯改为了uart连接
      8          	2.先调用twinCore.Set()将某一个通道设置为相应的数值
      9          	3.周期性调用twinCore.Send()来将数组内容发送给另外一个单片机
     10          	4.在本文件的twinCore_Debug函数接收相应的数据
     11          
     12          	@Time	2018-04-30
     13          	@Author	郭帆
     14          	@Usefor	双核通讯
     15          */
     16          
     17          /*
     18          	0--pose.flag
     19          	1--SW_Mode
     20          	2--pose.pause
     21          	3--keyValue
     22          	4--f2fMode
     23          	5--findEnd
     24              6--cnt_clear
     25          	7--calc.cnt_effect
     26          	8--loseFlag
     27          	9--gamma
     28          */
     29          
     30          /*
     31          	0--flag_out
     32          	1--pose.angleY
     33          	2--pose.angleZ
     34          	3--mpu6050.gry.y
     35          	4--calc.cnt_out
     36          	5--testTime
     37          	6--calc.reffer[0]
     38          	7--mpu6050.acc.z
     39          */
     40          
     41          /****Definitions**********************************************/
     42          
     43          /****Functions************************************************/
     44          
     45          void TWINCORE_isr(void);
     46          
     47          /****Variables************************************************/
     48          

   \                                 In section .bss, align 4
     49          uint8 twinCore_sendData[TwinCoreRxChNum * 2] = {0};
   \                     twinCore_sendData:
   \   00000000                      DS8 20
     50          

   \                                 In section .bss, align 4
     51          TwinCorePortType TwinCorePortRx;
   \                     TwinCorePortRx:
   \   00000000                      DS8 108
     52          
     53          /****Functions************************************************/
     54          

   \                                 In section .text, align 2, keep-with-next
     55          static void TwinCore_Debug(void)
     56          {
   \                     TwinCore_Debug: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     57          	static int gammaLst = 0;
     58          
     59          	mpu6050.pose.flagY = twinCore.data[0];
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5
   \   00000006   0xF9B0 0x000C      LDRSH    R0,[R0, #+12]
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000000E   0x6B09             LDR      R1,[R1, #+48]
   \   00000010   0xF360 0x0141      BFI      R1,R0,#+1,#+1
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000018   0x6301             STR      R1,[R0, #+48]
     60          	mpu6050.pose.flagZ = twinCore.data[0];
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable5
   \   0000001E   0xF9B0 0x000C      LDRSH    R0,[R0, #+12]
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000026   0x6B09             LDR      R1,[R1, #+48]
   \   00000028   0xF360 0x0182      BFI      R1,R0,#+2,#+1
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000030   0x6301             STR      R1,[R0, #+48]
     61          	if (!mpu6050.pose.flagX) mpu6050.pose.angleX = 0;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000036   0xF890 0x0030      LDRB     R0,[R0, #+48]
   \   0000003A   0x07C0             LSLS     R0,R0,#+31
   \   0000003C   0xD403             BMI.N    ??TwinCore_Debug_0
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000044   0x6248             STR      R0,[R1, #+36]
     62          	if (!mpu6050.pose.flagY) mpu6050.pose.angleY = 0;
   \                     ??TwinCore_Debug_0: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000004A   0x6B00             LDR      R0,[R0, #+48]
   \   0000004C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD103             BNE.N    ??TwinCore_Debug_1
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000005A   0x6288             STR      R0,[R1, #+40]
     63          	if (!mpu6050.pose.flagZ) mpu6050.pose.angleZ = 0;
   \                     ??TwinCore_Debug_1: (+1)
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000060   0x6B00             LDR      R0,[R0, #+48]
   \   00000062   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD103             BNE.N    ??TwinCore_Debug_2
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000070   0x62C8             STR      R0,[R1, #+44]
     64          
     65          	mpu6050.pose.pause = twinCore.data[2];
   \                     ??TwinCore_Debug_2: (+1)
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable5
   \   00000076   0xF9B0 0x0010      LDRSH    R0,[R0, #+16]
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000007E   0x6B09             LDR      R1,[R1, #+48]
   \   00000080   0xF360 0x01C3      BFI      R1,R0,#+3,#+1
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000088   0x6301             STR      R1,[R0, #+48]
     66          
     67          	if (ui.keyLst != twinCore.data[3] && twinCore.data[1] == 1110)
   \   0000008A   0x....             LDR.N    R0,??DataTable5_2
   \   0000008C   0x6940             LDR      R0,[R0, #+20]
   \   0000008E   0x....             LDR.N    R1,??DataTable5
   \   00000090   0xF9B1 0x1012      LDRSH    R1,[R1, #+18]
   \   00000094   0x4288             CMP      R0,R1
   \   00000096   0xD012             BEQ.N    ??TwinCore_Debug_3
   \   00000098   0x....             LDR.N    R0,??DataTable5
   \   0000009A   0xF9B0 0x000E      LDRSH    R0,[R0, #+14]
   \   0000009E   0xF240 0x4156      MOVW     R1,#+1110
   \   000000A2   0x4288             CMP      R0,R1
   \   000000A4   0xD10B             BNE.N    ??TwinCore_Debug_3
     68          	{
     69          		ui.keyLst = twinCore.data[3];
   \   000000A6   0x....             LDR.N    R0,??DataTable5
   \   000000A8   0xF9B0 0x0012      LDRSH    R0,[R0, #+18]
   \   000000AC   0x....             LDR.N    R1,??DataTable5_2
   \   000000AE   0x6148             STR      R0,[R1, #+20]
     70          		ui.keyNow = ui.keyLst;
   \   000000B0   0x....             LDR.N    R0,??DataTable5_2
   \   000000B2   0x6940             LDR      R0,[R0, #+20]
   \   000000B4   0x....             LDR.N    R1,??DataTable5_2
   \   000000B6   0x6108             STR      R0,[R1, #+16]
     71          		ui.ProcessKey();
   \   000000B8   0x....             LDR.N    R0,??DataTable5_2
   \   000000BA   0x68C0             LDR      R0,[R0, #+12]
   \   000000BC   0x4780             BLX      R0
     72          	}
     73          
     74          	calc.f2fMode = twinCore.data[4];
   \                     ??TwinCore_Debug_3: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable5
   \   000000C0   0xF9B0 0x0014      LDRSH    R0,[R0, #+20]
   \   000000C4   0x....             LDR.N    R1,??DataTable5_3
   \   000000C6   0xF8C1 0x0424      STR      R0,[R1, #+1060]
     75          	calc.findEnd = twinCore.data[5];
   \   000000CA   0x....             LDR.N    R0,??DataTable5
   \   000000CC   0xF9B0 0x0016      LDRSH    R0,[R0, #+22]
   \   000000D0   0x....             LDR.N    R1,??DataTable5_3
   \   000000D2   0xF8C1 0x0428      STR      R0,[R1, #+1064]
     76              calc.cnt_clear = twinCore.data[6];
   \   000000D6   0x....             LDR.N    R0,??DataTable5
   \   000000D8   0xF9B0 0x0018      LDRSH    R0,[R0, #+24]
   \   000000DC   0x....             LDR.N    R1,??DataTable5_3
   \   000000DE   0xF8C1 0x0430      STR      R0,[R1, #+1072]
     77          	calc.cnt_effect = twinCore.data[7];
   \   000000E2   0x....             LDR.N    R0,??DataTable5
   \   000000E4   0xF9B0 0x001A      LDRSH    R0,[R0, #+26]
   \   000000E8   0x....             LDR.N    R1,??DataTable5_3
   \   000000EA   0x6088             STR      R0,[R1, #+8]
     78          
     79          	if (twinCore.data[9] != gammaLst)
   \   000000EC   0x....             LDR.N    R0,??DataTable5
   \   000000EE   0xF9B0 0x001E      LDRSH    R0,[R0, #+30]
   \   000000F2   0x....             LDR.N    R1,??DataTable5_4
   \   000000F4   0x6809             LDR      R1,[R1, #+0]
   \   000000F6   0x4288             CMP      R0,R1
   \   000000F8   0xD005             BEQ.N    ??TwinCore_Debug_4
     80          		camera.ChangeGamma(twinCore.data[9]);
   \   000000FA   0x....             LDR.N    R0,??DataTable5
   \   000000FC   0xF9B0 0x001E      LDRSH    R0,[R0, #+30]
   \   00000100   0x....             LDR.N    R1,??DataTable5_5
   \   00000102   0x6849             LDR      R1,[R1, #+4]
   \   00000104   0x4788             BLX      R1
     81          	gammaLst = twinCore.data[9];
   \                     ??TwinCore_Debug_4: (+1)
   \   00000106   0x....             LDR.N    R0,??DataTable5
   \   00000108   0xF9B0 0x001E      LDRSH    R0,[R0, #+30]
   \   0000010C   0x....             LDR.N    R1,??DataTable5_4
   \   0000010E   0x6008             STR      R0,[R1, #+0]
     82          }
   \   00000110   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??gammaLst:
   \   00000000                      DS8 4
     83          

   \                                 In section .text, align 2, keep-with-next
     84          static void TwinCore_Cmd(uint8 CmdNum,uint8 Data) {
     85          	if (CmdNum == 2 && Data == 102) { // page up
     86          		;
     87          	}
     88          	if (CmdNum == 2 && Data == 103) { //page down
     89          		;
     90          	}
     91          }
   \                     TwinCore_Cmd: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     92          

   \                                 In section .text, align 2, keep-with-next
     93          static void TWINCORE_Init(void) {
   \                     TWINCORE_Init: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     94          	static UART_InitTypeDef UART_InitStructure;
     95          
     96          	UART_InitStructure.UART_Uartx = TWINCORE_UART;
   \   00000002   0x....             LDR.N    R0,??DataTable5_6  ;; 0x400ea000
   \   00000004   0x....             LDR.N    R1,??DataTable5_7
   \   00000006   0x6008             STR      R0,[R1, #+0]
     97          	UART_InitStructure.UART_BaudRate = TWINCORE_BAUDRATE;
   \   00000008   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000000C   0x....             LDR.N    R1,??DataTable5_7
   \   0000000E   0x6048             STR      R0,[R1, #+4]
     98          	UART_InitStructure.UART_RxPin = TWINCORE_RxPinx;
   \   00000010   0x2095             MOVS     R0,#+149
   \   00000012   0x....             LDR.N    R1,??DataTable5_7
   \   00000014   0x7248             STRB     R0,[R1, #+9]
     99          	UART_InitStructure.UART_TxPin = TWINCORE_TxPinx;
   \   00000016   0x2094             MOVS     R0,#+148
   \   00000018   0x....             LDR.N    R1,??DataTable5_7
   \   0000001A   0x7208             STRB     R0,[R1, #+8]
    100          	UART_InitStructure.UART_RxIntEnable = TRUE;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x....             LDR.N    R1,??DataTable5_7
   \   00000020   0x7288             STRB     R0,[R1, #+10]
    101          	UART_InitStructure.UART_RxIsr = TWINCORE_isr;
   \   00000022   0x.... 0x....      ADR.W    R0,TWINCORE_isr
   \   00000026   0x....             LDR.N    R1,??DataTable5_7
   \   00000028   0x6148             STR      R0,[R1, #+20]
    102          
    103          	LPLD_UART_Init(UART_InitStructure);
   \   0000002A   0x....             LDR.N    R1,??DataTable5_7
   \   0000002C   0xB084             SUB      SP,SP,#+16
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x221C             MOVS     R2,#+28
   \   00000032   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000036   0xBC0F             POP      {R0-R3}
   \   00000038   0x.... 0x....      BL       LPLD_UART_Init
    104          	LPLD_UART_EnableIrq(UART_InitStructure);
   \   0000003C   0x....             LDR.N    R1,??DataTable5_7
   \   0000003E   0xB084             SUB      SP,SP,#+16
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x221C             MOVS     R2,#+28
   \   00000044   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000048   0xBC0F             POP      {R0-R3}
   \   0000004A   0x.... 0x....      BL       LPLD_UART_EnableIrq
    105          }
   \   0000004E   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??UART_InitStructure:
   \   00000000                      DS8 28
    106          

   \                                 In section .text, align 2, keep-with-next
    107          static void TWINCORE_Putchar(char ch) {
   \                     TWINCORE_Putchar: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    108          	LPLD_UART_PutChar(TWINCORE_UART, ch);
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000006   0x....             LDR.N    R0,??DataTable5_6  ;; 0x400ea000
   \   00000008   0x.... 0x....      BL       LPLD_UART_PutChar
    109          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    110          

   \                                 In section .text, align 2, keep-with-next
    111          static void TWINCORE_Set(int chx, int data) {
    112          	twinCore_sendData[chx * 2] = TWINCORE_HIGHBYTE(data);
   \                     TWINCORE_Set: (+1)
   \   00000000   0x120A             ASRS     R2,R1,#+8
   \   00000002   0x....             LDR.N    R3,??DataTable5_8
   \   00000004   0xF803 0x2010      STRB     R2,[R3, R0, LSL #+1]
    113          	twinCore_sendData[chx * 2 + 1] = TWINCORE_LOWBYTE(data);
   \   00000008   0x....             LDR.N    R2,??DataTable5_8
   \   0000000A   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
    114          }
   \   00000010   0x4770             BX       LR               ;; return
    115          

   \                                 In section .text, align 2, keep-with-next
    116          static void TWINCORE_Send(void) {
   \                     TWINCORE_Send: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    117          	int i = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    118          	uint8 sum = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    119          
    120          	TWINCORE_Putchar(0xff);
   \   00000006   0x20FF             MOVS     R0,#+255
   \   00000008   0x.... 0x....      BL       TWINCORE_Putchar
    121          	TWINCORE_Putchar(0x55);
   \   0000000C   0x2055             MOVS     R0,#+85
   \   0000000E   0x.... 0x....      BL       TWINCORE_Putchar
    122          	TWINCORE_Putchar(0xaa);
   \   00000012   0x20AA             MOVS     R0,#+170
   \   00000014   0x.... 0x....      BL       TWINCORE_Putchar
    123          	TWINCORE_Putchar(0x10);
   \   00000018   0x2010             MOVS     R0,#+16
   \   0000001A   0x.... 0x....      BL       TWINCORE_Putchar
    124          
    125          	sum += (0xff + 0x55 + 0xaa + 0x10);
   \   0000001E   0x350E             ADDS     R5,R5,#+14
    126          
    127          	for (i = 0; i < TwinCoreRxChNum * 2; i++) {
   \   00000020   0x2400             MOVS     R4,#+0
   \   00000022   0xE007             B.N      ??TWINCORE_Send_0
    128          		TWINCORE_Putchar(twinCore_sendData[i]);
   \                     ??TWINCORE_Send_1: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable5_8
   \   00000026   0x5C20             LDRB     R0,[R4, R0]
   \   00000028   0x.... 0x....      BL       TWINCORE_Putchar
    129          		sum += twinCore_sendData[i];
   \   0000002C   0x....             LDR.N    R0,??DataTable5_8
   \   0000002E   0x5C20             LDRB     R0,[R4, R0]
   \   00000030   0x1945             ADDS     R5,R0,R5
    130          	}
   \   00000032   0x1C64             ADDS     R4,R4,#+1
   \                     ??TWINCORE_Send_0: (+1)
   \   00000034   0x2C14             CMP      R4,#+20
   \   00000036   0xDBF5             BLT.N    ??TWINCORE_Send_1
    131          
    132          	TWINCORE_Putchar(sum);
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       TWINCORE_Putchar
    133          }
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    134          

   \                                 In section .text, align 4, keep-with-next
    135          void TWINCORE_isr(void) {
   \                     TWINCORE_isr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    136          	int i, begin;
    137          
    138          	if ((TWINCORE_UART->S1 & UART_S1_RDRF_MASK) && (TWINCORE_UART->C2 & UART_C2_RIE_MASK)) {
   \   00000002   0x....             LDR.N    R0,??DataTable5_9  ;; 0x400ea004
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x0680             LSLS     R0,R0,#+26
   \   00000008   0xF140 0x80D3      BPL.W    ??TWINCORE_isr_0
   \   0000000C   0x....             LDR.N    R0,??DataTable5_10  ;; 0x400ea003
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x0680             LSLS     R0,R0,#+26
   \   00000012   0xF140 0x80CE      BPL.W    ??TWINCORE_isr_0
    139          		TwinCorePortRx.Data = LPLD_UART_GetChar(TWINCORE_UART);
   \   00000016   0x....             LDR.N    R0,??DataTable5_6  ;; 0x400ea000
   \   00000018   0x.... 0x....      BL       LPLD_UART_GetChar
   \   0000001C   0x....             LDR.N    R1,??DataTable5_11
   \   0000001E   0x7108             STRB     R0,[R1, #+4]
    140          		if (TwinCorePortRx.Stack < TwinCoreRxBufferLen) {
   \   00000020   0x....             LDR.N    R0,??DataTable5_11
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2864             CMP      R0,#+100
   \   00000026   0xF280 0x80C1      BGE.W    ??TWINCORE_isr_1
    141          			TwinCorePortRx.Buffer[TwinCorePortRx.Stack++] = TwinCorePortRx.Data;
   \   0000002A   0x....             LDR.N    R0,??DataTable5_11
   \   0000002C   0x7900             LDRB     R0,[R0, #+4]
   \   0000002E   0x....             LDR.N    R1,??DataTable5_11
   \   00000030   0x....             LDR.N    R2,??DataTable5_11
   \   00000032   0x6812             LDR      R2,[R2, #+0]
   \   00000034   0x1851             ADDS     R1,R2,R1
   \   00000036   0x7188             STRB     R0,[R1, #+6]
   \   00000038   0x....             LDR.N    R0,??DataTable5_11
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable5_11
   \   00000040   0x6008             STR      R0,[R1, #+0]
    142          			if (TwinCorePortRx.Stack >= TwinCoreRxDataLen
    143          				&& TwinCorePortRx.Buffer[TwinCorePortRx.Stack - TwinCoreRxDataLen]    ==0xff
    144          				&& TwinCorePortRx.Buffer[TwinCorePortRx.Stack - TwinCoreRxDataLen + 1]==0x55
    145          				&& TwinCorePortRx.Buffer[TwinCorePortRx.Stack - TwinCoreRxDataLen + 2]==0xaa
    146          				&& TwinCorePortRx.Buffer[TwinCorePortRx.Stack - TwinCoreRxDataLen + 3]==0x10) {
   \   00000042   0x....             LDR.N    R0,??DataTable5_11
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x2819             CMP      R0,#+25
   \   00000048   0xDB5D             BLT.N    ??TWINCORE_isr_2
   \   0000004A   0x....             LDR.N    R0,??DataTable5_11
   \   0000004C   0x....             LDR.N    R1,??DataTable5_11
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0x1808             ADDS     R0,R1,R0
   \   00000052   0xF810 0x0C13      LDRB     R0,[R0, #-19]
   \   00000056   0x28FF             CMP      R0,#+255
   \   00000058   0xD155             BNE.N    ??TWINCORE_isr_2
   \   0000005A   0x....             LDR.N    R0,??DataTable5_11
   \   0000005C   0x....             LDR.N    R1,??DataTable5_11
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0x1808             ADDS     R0,R1,R0
   \   00000062   0xF810 0x0C12      LDRB     R0,[R0, #-18]
   \   00000066   0x2855             CMP      R0,#+85
   \   00000068   0xD14D             BNE.N    ??TWINCORE_isr_2
   \   0000006A   0x....             LDR.N    R0,??DataTable5_11
   \   0000006C   0x....             LDR.N    R1,??DataTable5_11
   \   0000006E   0x6809             LDR      R1,[R1, #+0]
   \   00000070   0x1808             ADDS     R0,R1,R0
   \   00000072   0xF810 0x0C11      LDRB     R0,[R0, #-17]
   \   00000076   0x28AA             CMP      R0,#+170
   \   00000078   0xD145             BNE.N    ??TWINCORE_isr_2
   \   0000007A   0x....             LDR.N    R0,??DataTable5_11
   \   0000007C   0x....             LDR.N    R1,??DataTable5_11
   \   0000007E   0x6809             LDR      R1,[R1, #+0]
   \   00000080   0x1808             ADDS     R0,R1,R0
   \   00000082   0xF810 0x0C10      LDRB     R0,[R0, #-16]
   \   00000086   0x2810             CMP      R0,#+16
   \   00000088   0xD13D             BNE.N    ??TWINCORE_isr_2
    147          				TwinCorePortRx.Check = 0;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x....             LDR.N    R1,??DataTable5_11
   \   0000008E   0xF881 0x006B      STRB     R0,[R1, #+107]
    148          				begin = TwinCorePortRx.Stack - TwinCoreRxDataLen;
   \   00000092   0x....             LDR.N    R0,??DataTable5_11
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x3819             SUBS     R0,R0,#+25
    149          				for(i = begin; i < TwinCorePortRx.Stack - 1; i++) {
   \   00000098   0x0001             MOVS     R1,R0
   \   0000009A   0xE00A             B.N      ??TWINCORE_isr_3
    150          					TwinCorePortRx.Check += TwinCorePortRx.Buffer[i];
   \                     ??TWINCORE_isr_4: (+1)
   \   0000009C   0x....             LDR.N    R2,??DataTable5_11
   \   0000009E   0xF892 0x206B      LDRB     R2,[R2, #+107]
   \   000000A2   0x....             LDR.N    R3,??DataTable5_11
   \   000000A4   0x18CB             ADDS     R3,R1,R3
   \   000000A6   0x799B             LDRB     R3,[R3, #+6]
   \   000000A8   0x189A             ADDS     R2,R3,R2
   \   000000AA   0x....             LDR.N    R3,??DataTable5_11
   \   000000AC   0xF883 0x206B      STRB     R2,[R3, #+107]
    151          				}
   \   000000B0   0x1C49             ADDS     R1,R1,#+1
   \                     ??TWINCORE_isr_3: (+1)
   \   000000B2   0x....             LDR.N    R2,??DataTable5_11
   \   000000B4   0x6812             LDR      R2,[R2, #+0]
   \   000000B6   0x1E52             SUBS     R2,R2,#+1
   \   000000B8   0x4291             CMP      R1,R2
   \   000000BA   0xDBEF             BLT.N    ??TWINCORE_isr_4
    152          				if (TwinCorePortRx.Check == TwinCorePortRx.Buffer[TwinCorePortRx.Stack - 1]) {
   \   000000BC   0x....             LDR.N    R1,??DataTable5_11
   \   000000BE   0xF891 0x106B      LDRB     R1,[R1, #+107]
   \   000000C2   0x....             LDR.N    R2,??DataTable5_11
   \   000000C4   0x....             LDR.N    R3,??DataTable5_11
   \   000000C6   0x681B             LDR      R3,[R3, #+0]
   \   000000C8   0x189A             ADDS     R2,R3,R2
   \   000000CA   0x7952             LDRB     R2,[R2, #+5]
   \   000000CC   0x4291             CMP      R1,R2
   \   000000CE   0xD116             BNE.N    ??TWINCORE_isr_5
    153          					for (i = 0; i < TwinCoreRxChNum; i++)
   \   000000D0   0x2100             MOVS     R1,#+0
   \   000000D2   0xE010             B.N      ??TWINCORE_isr_6
    154          					{
    155          						twinCore.data[i] = (TwinCorePortRx.Buffer[begin + i * 2 + 4] << 8) | TwinCorePortRx.Buffer[begin + i * 2 + 5];
   \                     ??TWINCORE_isr_7: (+1)
   \   000000D4   0x....             LDR.N    R2,??DataTable5_11
   \   000000D6   0xEB10 0x0341      ADDS     R3,R0,R1, LSL #+1
   \   000000DA   0x189A             ADDS     R2,R3,R2
   \   000000DC   0x7A92             LDRB     R2,[R2, #+10]
   \   000000DE   0x....             LDR.N    R3,??DataTable5_11
   \   000000E0   0xEB10 0x0441      ADDS     R4,R0,R1, LSL #+1
   \   000000E4   0x18E3             ADDS     R3,R4,R3
   \   000000E6   0x7ADB             LDRB     R3,[R3, #+11]
   \   000000E8   0xEA53 0x2202      ORRS     R2,R3,R2, LSL #+8
   \   000000EC   0x....             LDR.N    R3,??DataTable5
   \   000000EE   0xEB13 0x0341      ADDS     R3,R3,R1, LSL #+1
   \   000000F2   0x819A             STRH     R2,[R3, #+12]
    156          					}
   \   000000F4   0x1C49             ADDS     R1,R1,#+1
   \                     ??TWINCORE_isr_6: (+1)
   \   000000F6   0x290A             CMP      R1,#+10
   \   000000F8   0xDBEC             BLT.N    ??TWINCORE_isr_7
    157          					TwinCore_Debug();
   \   000000FA   0x.... 0x....      BL       TwinCore_Debug
    158          				}
    159          				TwinCorePortRx.Stack = 0;
   \                     ??TWINCORE_isr_5: (+1)
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x....             LDR.N    R1,??DataTable5_11
   \   00000102   0x6008             STR      R0,[R1, #+0]
   \   00000104   0xE055             B.N      ??TWINCORE_isr_0
    160          			}
    161          			else if (TwinCorePortRx.Stack >= TwinCoreRxCmdLen
    162          					&& TwinCorePortRx.Buffer[TwinCorePortRx.Stack - TwinCoreRxCmdLen]    ==0xff
    163          					&& TwinCorePortRx.Buffer[TwinCorePortRx.Stack - TwinCoreRxCmdLen + 1]==0x55
    164          					&& TwinCorePortRx.Buffer[TwinCorePortRx.Stack - TwinCoreRxCmdLen + 2]==0xaa
    165          					&& TwinCorePortRx.Buffer[TwinCorePortRx.Stack - TwinCoreRxCmdLen + 3]==0x77) { // cmd
   \                     ??TWINCORE_isr_2: (+1)
   \   00000106   0x....             LDR.N    R0,??DataTable5_11
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x2807             CMP      R0,#+7
   \   0000010C   0xDB51             BLT.N    ??TWINCORE_isr_0
   \   0000010E   0x....             LDR.N    R0,??DataTable5_11
   \   00000110   0x....             LDR.N    R1,??DataTable5_11
   \   00000112   0x6809             LDR      R1,[R1, #+0]
   \   00000114   0x1808             ADDS     R0,R1,R0
   \   00000116   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000011A   0x28FF             CMP      R0,#+255
   \   0000011C   0xD149             BNE.N    ??TWINCORE_isr_0
   \   0000011E   0x....             LDR.N    R0,??DataTable5_11
   \   00000120   0x....             LDR.N    R1,??DataTable5_11
   \   00000122   0x6809             LDR      R1,[R1, #+0]
   \   00000124   0x5C08             LDRB     R0,[R1, R0]
   \   00000126   0x2855             CMP      R0,#+85
   \   00000128   0xD143             BNE.N    ??TWINCORE_isr_0
   \   0000012A   0x....             LDR.N    R0,??DataTable5_11
   \   0000012C   0x....             LDR.N    R1,??DataTable5_11
   \   0000012E   0x6809             LDR      R1,[R1, #+0]
   \   00000130   0x1808             ADDS     R0,R1,R0
   \   00000132   0x7840             LDRB     R0,[R0, #+1]
   \   00000134   0x28AA             CMP      R0,#+170
   \   00000136   0xD13C             BNE.N    ??TWINCORE_isr_0
   \   00000138   0x....             LDR.N    R0,??DataTable5_11
   \   0000013A   0x....             LDR.N    R1,??DataTable5_11
   \   0000013C   0x6809             LDR      R1,[R1, #+0]
   \   0000013E   0x1808             ADDS     R0,R1,R0
   \   00000140   0x7880             LDRB     R0,[R0, #+2]
   \   00000142   0x2877             CMP      R0,#+119
   \   00000144   0xD135             BNE.N    ??TWINCORE_isr_0
    166          				TwinCorePortRx.Check = 0;
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x....             LDR.N    R1,??DataTable5_11
   \   0000014A   0xF881 0x006B      STRB     R0,[R1, #+107]
    167          				begin = TwinCorePortRx.Stack - TwinCoreRxCmdLen;
   \   0000014E   0x....             LDR.N    R0,??DataTable5_11
   \   00000150   0x6800             LDR      R0,[R0, #+0]
   \   00000152   0x1FC0             SUBS     R0,R0,#+7
    168          				for (i = begin; i < TwinCorePortRx.Stack - 1; i++)
   \   00000154   0x0001             MOVS     R1,R0
   \   00000156   0xE00A             B.N      ??TWINCORE_isr_8
    169          					TwinCorePortRx.Check += TwinCorePortRx.Buffer[i];
   \                     ??TWINCORE_isr_9: (+1)
   \   00000158   0x....             LDR.N    R0,??DataTable5_11
   \   0000015A   0xF890 0x006B      LDRB     R0,[R0, #+107]
   \   0000015E   0x....             LDR.N    R2,??DataTable5_11
   \   00000160   0x188A             ADDS     R2,R1,R2
   \   00000162   0x7992             LDRB     R2,[R2, #+6]
   \   00000164   0x1810             ADDS     R0,R2,R0
   \   00000166   0x....             LDR.N    R2,??DataTable5_11
   \   00000168   0xF882 0x006B      STRB     R0,[R2, #+107]
   \   0000016C   0x1C49             ADDS     R1,R1,#+1
   \                     ??TWINCORE_isr_8: (+1)
   \   0000016E   0x....             LDR.N    R0,??DataTable5_11
   \   00000170   0x6800             LDR      R0,[R0, #+0]
   \   00000172   0x1E40             SUBS     R0,R0,#+1
   \   00000174   0x4281             CMP      R1,R0
   \   00000176   0xDBEF             BLT.N    ??TWINCORE_isr_9
    170          				if(TwinCorePortRx.Check == TwinCorePortRx.Buffer[TwinCorePortRx.Stack - 1])
   \   00000178   0x....             LDR.N    R0,??DataTable5_11
   \   0000017A   0xF890 0x006B      LDRB     R0,[R0, #+107]
   \   0000017E   0x....             LDR.N    R1,??DataTable5_11
   \   00000180   0x....             LDR.N    R2,??DataTable5_11
   \   00000182   0x6812             LDR      R2,[R2, #+0]
   \   00000184   0x1851             ADDS     R1,R2,R1
   \   00000186   0x7949             LDRB     R1,[R1, #+5]
   \   00000188   0x4288             CMP      R0,R1
   \   0000018A   0xD10B             BNE.N    ??TWINCORE_isr_10
    171          					TwinCore_Cmd(TwinCoreCmdNum, TwinCoreCmdData);
   \   0000018C   0x....             LDR.N    R0,??DataTable5_11
   \   0000018E   0x....             LDR.N    R1,??DataTable5_11
   \   00000190   0x6809             LDR      R1,[R1, #+0]
   \   00000192   0x1808             ADDS     R0,R1,R0
   \   00000194   0x7901             LDRB     R1,[R0, #+4]
   \   00000196   0x....             LDR.N    R0,??DataTable5_11
   \   00000198   0x....             LDR.N    R2,??DataTable5_11
   \   0000019A   0x6812             LDR      R2,[R2, #+0]
   \   0000019C   0x1810             ADDS     R0,R2,R0
   \   0000019E   0x78C0             LDRB     R0,[R0, #+3]
   \   000001A0   0x.... 0x....      BL       TwinCore_Cmd
    172          				TwinCorePortRx.Stack = 0;
   \                     ??TWINCORE_isr_10: (+1)
   \   000001A4   0x2000             MOVS     R0,#+0
   \   000001A6   0x....             LDR.N    R1,??DataTable5_11
   \   000001A8   0x6008             STR      R0,[R1, #+0]
   \   000001AA   0xE002             B.N      ??TWINCORE_isr_0
    173          			}
    174          		}
    175          		else
    176          			TwinCorePortRx.Stack = 0;
   \                     ??TWINCORE_isr_1: (+1)
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0x....             LDR.N    R1,??DataTable5_11
   \   000001B0   0x6008             STR      R0,[R1, #+0]
    177          	}
    178          }
   \                     ??TWINCORE_isr_0: (+1)
   \   000001B2   0xBD10             POP      {R4,PC}          ;; return
    179          
    180          /****Objects**************************************************/
    181          

   \                                 In section .data, align 4
    182          TWINCORE_CLASS twinCore = {
   \                     twinCore:
   \   00000000   0x........         DC32 TWINCORE_Init, TWINCORE_Set, TWINCORE_Send
   \              0x........   
   \              0x........   
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     twinCore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     mpu6050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ui

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     calc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ??gammaLst

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     camera

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ??UART_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     twinCore_sendData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x400EA004         DC32     0x400ea004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x400EA003         DC32     0x400ea003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     TwinCorePortRx
    183          	&TWINCORE_Init,
    184          	&TWINCORE_Set,
    185          	&TWINCORE_Send
    186          };

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   TWINCORE_Init
        16   -> LPLD_UART_EnableIrq
        16   -> LPLD_UART_Init
        32   -> __aeabi_memcpy4
       8   TWINCORE_Putchar
         8   -> LPLD_UART_PutChar
      16   TWINCORE_Send
        16   -> TWINCORE_Putchar
       0   TWINCORE_Set
       8   TWINCORE_isr
         8   -> LPLD_UART_GetChar
         8   -> TwinCore_Cmd
         8   -> TwinCore_Debug
       0   TwinCore_Cmd
       8   TwinCore_Debug
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      80  TWINCORE_Init
      14  TWINCORE_Putchar
      66  TWINCORE_Send
      18  TWINCORE_Set
     436  TWINCORE_isr
     108  TwinCorePortRx
       2  TwinCore_Cmd
     274  TwinCore_Debug
      28  UART_InitStructure
       4  gammaLst
      32  twinCore
      20  twinCore_sendData

 
 160 bytes in section .bss
  32 bytes in section .data
 938 bytes in section .text
 
 938 bytes of CODE memory
 192 bytes of DATA memory

Errors: none
Warnings: none
