###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       01/Aug/2018  12:09:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\lib\LPLD\HW\HW_PIT.c
#    Command line =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\lib\LPLD\HW\HW_PIT.c
#        -D LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -lB
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -o C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\camera\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\led\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\oled\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\task\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\uart\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\twinCore\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\mpu6050\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\nrf\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\calc\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\UI\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ledArray\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\CPU\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\driver\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\class\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List\HW_PIT.lst
#    Object file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj\HW_PIT.o
#
###############################################################################

C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\lib\LPLD\HW\HW_PIT.c
      1          /**
      2           * @file HW_PIT.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief PIT底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable11  ;; 0xe000e100
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable11_1  ;; 0xe000e180
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
     23          #include "HW_PIT.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          PIT_ISR_CALLBACK PIT_ISR[4];
   \                     PIT_ISR:
   \   00000000                      DS8 16
     27          
     28          /*
     29           * LPLD_PIT_Init
     30           * PIT通用初始化函数，选择PITx、配置中断周期、中断函数
     31           * 
     32           * 参数:
     33           *    pit_init_structure--PIT初始化结构体，
     34           *                        具体定义见PIT_InitTypeDef
     35           *
     36           * 输出:
     37           *    0--配置错误
     38           *    1--配置成功
     39           */

   \                                 In section .text, align 2, keep-with-next
     40          uint8 LPLD_PIT_Init(PIT_InitTypeDef pit_init_structure)
     41          { 
   \                     LPLD_PIT_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB410             PUSH     {R4}
     42            //计算定时加载值
     43            uint32 ldval = pit_init_structure.PIT_PeriodUs*(g_bus_clock/1000000)
     44                         + pit_init_structure.PIT_PeriodMs*1000*(g_bus_clock/1000000)
     45                         + pit_init_structure.PIT_PeriodS*1000000*(g_bus_clock/1000000);
   \   00000004   0x9802             LDR      R0,[SP, #+8]
   \   00000006   0x....             LDR.N    R1,??DataTable11_2
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x....             LDR.N    R2,??DataTable11_3  ;; 0xf4240
   \   0000000C   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000010   0x9A03             LDR      R2,[SP, #+12]
   \   00000012   0x....             LDR.N    R3,??DataTable11_2
   \   00000014   0x681B             LDR      R3,[R3, #+0]
   \   00000016   0x....             LDR.N    R4,??DataTable11_3  ;; 0xf4240
   \   00000018   0xFBB3 0xF3F4      UDIV     R3,R3,R4
   \   0000001C   0x435A             MULS     R2,R3,R2
   \   0000001E   0xF44F 0x737A      MOV      R3,#+1000
   \   00000022   0x435A             MULS     R2,R3,R2
   \   00000024   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000028   0x9904             LDR      R1,[SP, #+16]
   \   0000002A   0x....             LDR.N    R2,??DataTable11_2
   \   0000002C   0x6812             LDR      R2,[R2, #+0]
   \   0000002E   0x....             LDR.N    R3,??DataTable11_3  ;; 0xf4240
   \   00000030   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   00000034   0x4351             MULS     R1,R2,R1
   \   00000036   0x....             LDR.N    R2,??DataTable11_3  ;; 0xf4240
   \   00000038   0xFB02 0x0101      MLA      R1,R2,R1,R0
     46            PITx pitx = pit_init_structure.PIT_Pitx;
   \   0000003C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
     47            PIT_ISR_CALLBACK isr_func = pit_init_structure.PIT_Isr;
   \   00000040   0x9A05             LDR      R2,[SP, #+20]
     48            
     49            //参数检查
     50            ASSERT( pitx <= PIT3);        //判断模块号
     51            ASSERT( ldval > 0);           //判断时加载值                
     52            
     53            //开启定时模块时钟
     54            SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
   \   00000042   0x....             LDR.N    R3,??DataTable11_4  ;; 0x4004803c
   \   00000044   0x681B             LDR      R3,[R3, #+0]
   \   00000046   0xF453 0x0300      ORRS     R3,R3,#0x800000
   \   0000004A   0x....             LDR.N    R4,??DataTable11_4  ;; 0x4004803c
   \   0000004C   0x6023             STR      R3,[R4, #+0]
     55            
     56            // 开启 PIT
     57            PIT->MCR = 0x00;
   \   0000004E   0x2300             MOVS     R3,#+0
   \   00000050   0x....             LDR.N    R4,??DataTable11_5  ;; 0x40037000
   \   00000052   0x6023             STR      R3,[R4, #+0]
     58           
     59            if(isr_func != NULL){
   \   00000054   0x0013             MOVS     R3,R2
   \   00000056   0x2B00             CMP      R3,#+0
   \   00000058   0xD009             BEQ.N    ??LPLD_PIT_Init_0
     60              PIT_ISR[pitx] = isr_func;
   \   0000005A   0x....             LDR.N    R3,??DataTable11_6
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
     61              //使能中断
     62              PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
   \   00000062   0x2202             MOVS     R2,#+2
   \   00000064   0x....             LDR.N    R3,??DataTable11_7  ;; 0x40037100
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0xEB13 0x1300      ADDS     R3,R3,R0, LSL #+4
   \   0000006C   0x609A             STR      R2,[R3, #+8]
     63              //在NVIC中使能PIT中断
     64              //enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
     65            }
     66            
     67            //period = (period_ns/bus_period_ns)-1
     68            PIT->CHANNEL[pitx].LDVAL = ldval-1;
   \                     ??LPLD_PIT_Init_0: (+1)
   \   0000006E   0x1E49             SUBS     R1,R1,#+1
   \   00000070   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0x0103             LSLS     R3,R0,#+4
   \   00000076   0x5099             STR      R1,[R3, R2]
     69            //使能中断
     70            //PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
     71            //开始定时
     72            PIT->CHANNEL[pitx].TCTRL |= PIT_TCTRL_TEN_MASK;
   \   00000078   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000080   0x6889             LDR      R1,[R1, #+8]
   \   00000082   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000086   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0xEB12 0x1000      ADDS     R0,R2,R0, LSL #+4
   \   0000008E   0x6081             STR      R1,[R0, #+8]
     73            
     74            return 1;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0xBC10             POP      {R4}
   \   00000094   0xB004             ADD      SP,SP,#+16
   \   00000096   0x4770             BX       LR               ;; return
     75          }
     76          
     77          /*
     78           * LPLD_PIT_Deinit
     79           * PIT反初始化函数，关闭选择的PITx
     80           * 
     81           * 参数:
     82           *    pit_init_structure--PIT初始化结构体，
     83           *                        具体定义见PIT_InitTypeDef
     84           *
     85           * 输出:
     86           *    无
     87           */

   \                                 In section .text, align 2, keep-with-next
     88          void LPLD_PIT_Deinit(PIT_InitTypeDef pit_init_structure)
     89          { 
   \                     LPLD_PIT_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
     90            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
     91            
     92            //参数检查
     93            ASSERT( pitx <= PIT3);        //判断模块号              
     94          
     95            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \   00000008   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
     96          
     97            //禁用中断\停止定时
     98            PIT->CHANNEL[pitx].TCTRL = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0xEB11 0x1104      ADDS     R1,R1,R4, LSL #+4
   \   0000001C   0x6088             STR      R0,[R1, #+8]
     99          }
   \   0000001E   0xBC10             POP      {R4}
   \   00000020   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    100          
    101          /*
    102           * LPLD_PIT_EnableIrq
    103           * 使能PITx中断
    104           * 
    105           * 参数:
    106           *    pit_init_structure--PIT初始化结构体，
    107           *                        具体定义见PIT_InitTypeDef
    108           *
    109           * 输出:
    110           *    无
    111           *
    112           */

   \                                 In section .text, align 2, keep-with-next
    113          void LPLD_PIT_EnableIrq(PIT_InitTypeDef pit_init_structure)
    114          {
   \                     LPLD_PIT_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    115            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x0008      LDRB     R0,[SP, #+8]
    116            
    117            //参数检查
    118            ASSERT( pitx <= PIT3);                //判断PITx
    119          
    120            enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \   00000008   0x3044             ADDS     R0,R0,#+68
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       NVIC_EnableIRQ
    121          }
   \   00000010   0xBC01             POP      {R0}
   \   00000012   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    122          
    123          /*
    124           * LPLD_PIT_DisableIrq
    125           * 禁用PITx中断
    126           * 
    127           * 参数:
    128           *    pit_init_structure--PIT初始化结构体，
    129           *                        具体定义见PIT_InitTypeDef
    130           *
    131           * 输出:
    132           *    无
    133           *
    134           */

   \                                 In section .text, align 2, keep-with-next
    135          void LPLD_PIT_DisableIrq(PIT_InitTypeDef pit_init_structure)
    136          {
   \                     LPLD_PIT_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    137            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x0008      LDRB     R0,[SP, #+8]
    138            
    139            //参数检查
    140            ASSERT( pitx <= PIT3);                //判断PITx
    141            
    142            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx));
   \   00000008   0x3044             ADDS     R0,R0,#+68
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       NVIC_DisableIRQ
    143          }
   \   00000010   0xBC01             POP      {R0}
   \   00000012   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    144          
    145          
    146          /*
    147           * PIT0--PIT3中断处理函数
    148           * 与启动文件startup_K60.s中的中断向量表关联
    149           * 用户无需修改，程序自动进入对应通道中断函数
    150           */
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void PIT0_IRQHandler(void)
    153          {
   \                     PIT0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    154          #if (UCOS_II > 0u)
    155            OS_CPU_SR  cpu_sr = 0u;
    156            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    157            OSIntEnter();
    158            OS_EXIT_CRITICAL();
    159          #endif
    160            
    161            //调用用户自定义中断服务
    162            PIT_ISR[0]();  
   \   00000002   0x....             LDR.N    R0,??DataTable11_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    163            //清除中断标志位
    164            PIT->CHANNEL[0].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable11_8  ;; 0x4003710c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable11_8  ;; 0x4003710c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    165            
    166          #if (UCOS_II > 0u)
    167            OSIntExit();          //告知系统此时即将离开中断服务子函数
    168          #endif
    169          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    170          void PIT1_IRQHandler(void)
    171          {
   \                     PIT1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    172          #if (UCOS_II > 0u)
    173            OS_CPU_SR  cpu_sr = 0u;
    174            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    175            OSIntEnter();
    176            OS_EXIT_CRITICAL();
    177          #endif
    178            
    179            //调用用户自定义中断服务
    180            PIT_ISR[1]();  
   \   00000002   0x....             LDR.N    R0,??DataTable11_6
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
    181            //清除中断标志位
    182            PIT->CHANNEL[1].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable11_9  ;; 0x4003711c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable11_9  ;; 0x4003711c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    183            
    184          #if (UCOS_II > 0u)
    185            OSIntExit();          //告知系统此时即将离开中断服务子函数
    186          #endif
    187          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    188          void PIT2_IRQHandler(void)
    189          {
   \                     PIT2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    190          #if (UCOS_II > 0u)
    191            OS_CPU_SR  cpu_sr = 0u;
    192            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    193            OSIntEnter();
    194            OS_EXIT_CRITICAL();
    195          #endif
    196            
    197            //调用用户自定义中断服务
    198            PIT_ISR[2]();  
   \   00000002   0x....             LDR.N    R0,??DataTable11_6
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x4780             BLX      R0
    199            //清除中断标志位
    200            PIT->CHANNEL[2].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable11_10  ;; 0x4003712c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable11_10  ;; 0x4003712c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    201            
    202          #if (UCOS_II > 0u)
    203            OSIntExit();          //告知系统此时即将离开中断服务子函数
    204          #endif
    205          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    206          void PIT3_IRQHandler(void)
    207          {
   \                     PIT3_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    208          #if (UCOS_II > 0u)
    209            OS_CPU_SR  cpu_sr = 0u;
    210            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    211            OSIntEnter();
    212            OS_EXIT_CRITICAL();
    213          #endif
    214            
    215            //调用用户自定义中断服务
    216            PIT_ISR[3]();  
   \   00000002   0x....             LDR.N    R0,??DataTable11_6
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0x4780             BLX      R0
    217            //清除中断标志位
    218            PIT->CHANNEL[3].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable11_11  ;; 0x4003713c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable11_11  ;; 0x4003713c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    219            
    220          #if (UCOS_II > 0u)
    221            OSIntExit();          //告知系统此时即将离开中断服务子函数
    222          #endif
    223          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    224          /*********************************以下移植山外**********************************/
    225          /*!
    226           *  @brief      PITn延时
    227           *  @param      PITn        模块号（PIT0~PIT3）
    228           *  @param      cnt         延时时间(单位为bus时钟周期)
    229           *  @since      v5.0
    230           *  Sample usage:
    231                              pit_delay(PIT0, 1000);                         //延时 1000 个bus时钟
    232           */

   \                                 In section .text, align 2, keep-with-next
    233          void LPLD_PIT_Delay(PITx pitn, uint32 cnt)
    234          {
    235              //PIT 用的是 Bus Clock 总线频率
    236              //溢出计数 = 总线频率 * 时间
    237          
    238              ASSERT( cnt > 0 );              //用断言检测 时间必须不能为 0
    239          
    240              SIM->SCGC6       |= SIM_SCGC6_PIT_MASK;                          //使能PIT时钟
   \                     LPLD_PIT_Delay: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable11_4  ;; 0x4004803c
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0xF452 0x0200      ORRS     R2,R2,#0x800000
   \   00000008   0x....             LDR.N    R3,??DataTable11_4  ;; 0x4004803c
   \   0000000A   0x601A             STR      R2,[R3, #+0]
    241          
    242              PIT->MCR         &= ~(PIT_MCR_MDIS_MASK | PIT_MCR_FRZ_MASK );    //使能PIT定时器时钟 ，调试模式下继续运行
   \   0000000C   0x....             LDR.N    R2,??DataTable11_5  ;; 0x40037000
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0x0892             LSRS     R2,R2,#+2
   \   00000012   0x0092             LSLS     R2,R2,#+2
   \   00000014   0x....             LDR.N    R3,??DataTable11_5  ;; 0x40037000
   \   00000016   0x601A             STR      R2,[R3, #+0]
    243          
    244              PIT->CHANNEL[pitn].TCTRL &= ~( PIT_TCTRL_TEN_MASK );                     //禁用PIT ，以便设置加载值生效
   \   00000018   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000020   0x6892             LDR      R2,[R2, #+8]
   \   00000022   0x0852             LSRS     R2,R2,#+1
   \   00000024   0x0052             LSLS     R2,R2,#+1
   \   00000026   0x....             LDR.N    R3,??DataTable11_7  ;; 0x40037100
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xEB13 0x1300      ADDS     R3,R3,R0, LSL #+4
   \   0000002E   0x609A             STR      R2,[R3, #+8]
    245          
    246              PIT->CHANNEL[pitn].LDVAL  = cnt - 1;                                     //设置溢出中断时间
   \   00000030   0x1E49             SUBS     R1,R1,#+1
   \   00000032   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x0103             LSLS     R3,R0,#+4
   \   00000038   0x5099             STR      R1,[R3, R2]
    247          
    248              PIT_Flag_Clear(pitn);                                           //清中断标志位
   \   0000003A   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000042   0x68C9             LDR      R1,[R1, #+12]
   \   00000044   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000048   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000050   0x60D1             STR      R1,[R2, #+12]
    249          
    250              PIT->CHANNEL[pitn].TCTRL &= ~ PIT_TCTRL_TEN_MASK;                        //禁止PITn定时器（用于清空计数值）
   \   00000052   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   0000005A   0x6889             LDR      R1,[R1, #+8]
   \   0000005C   0x0849             LSRS     R1,R1,#+1
   \   0000005E   0x0049             LSLS     R1,R1,#+1
   \   00000060   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000068   0x6091             STR      R1,[R2, #+8]
    251              PIT->CHANNEL[pitn].TCTRL  = ( 0
    252                                   | PIT_TCTRL_TEN_MASK                        //使能 PITn定时器
    253                                   //| PIT_TCTRL_TIE_MASK                      //开PITn中断
    254                                 );
   \   0000006A   0x2101             MOVS     R1,#+1
   \   0000006C   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000074   0x6091             STR      R1,[R2, #+8]
    255          
    256              while( !(PIT->CHANNEL[pitn].TFLG& PIT_TFLG_TIF_MASK));
   \                     ??LPLD_PIT_Delay_0: (+1)
   \   00000076   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   0000007E   0x68C9             LDR      R1,[R1, #+12]
   \   00000080   0x07C9             LSLS     R1,R1,#+31
   \   00000082   0xD5F8             BPL.N    ??LPLD_PIT_Delay_0
    257          
    258              PIT_Flag_Clear(pitn);                                           //清中断标志位
   \   00000084   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   0000008C   0x68C9             LDR      R1,[R1, #+12]
   \   0000008E   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000092   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0xEB12 0x1000      ADDS     R0,R2,R0, LSL #+4
   \   0000009A   0x60C1             STR      R1,[R0, #+12]
    259          }
   \   0000009C   0x4770             BX       LR               ;; return
    260          
    261          /*!
    262           *  @brief      PITn计时开始
    263           *  @param      PITn        模块号（PIT0~PIT3）
    264           *  @since      v5.0
    265           *  Sample usage:
    266                              pit_time_start(PIT0);                          //PIT0计时开始
    267           */

   \                                 In section .text, align 2, keep-with-next
    268          void LPLD_PIT_Time_Start(PITx pitn)
    269          {
    270              //PIT 用的是 Bus Clock 总线频率
    271              //溢出计数 = 总线频率 * 时间
    272          
    273              SIM->SCGC6       |= SIM_SCGC6_PIT_MASK;                          //使能PIT时钟
   \                     LPLD_PIT_Time_Start: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_4  ;; 0x4004803c
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF451 0x0100      ORRS     R1,R1,#0x800000
   \   00000008   0x....             LDR.N    R2,??DataTable11_4  ;; 0x4004803c
   \   0000000A   0x6011             STR      R1,[R2, #+0]
    274          
    275              PIT->MCR         &= ~(PIT_MCR_MDIS_MASK | PIT_MCR_FRZ_MASK );    //使能PIT定时器时钟 ，调试模式下继续运行
   \   0000000C   0x....             LDR.N    R1,??DataTable11_5  ;; 0x40037000
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x0889             LSRS     R1,R1,#+2
   \   00000012   0x0089             LSLS     R1,R1,#+2
   \   00000014   0x....             LDR.N    R2,??DataTable11_5  ;; 0x40037000
   \   00000016   0x6011             STR      R1,[R2, #+0]
    276          
    277              PIT->CHANNEL[pitn].TCTRL &= ~( PIT_TCTRL_TEN_MASK );                     //禁用PIT ，以便设置加载值生效
   \   00000018   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000020   0x6889             LDR      R1,[R1, #+8]
   \   00000022   0x0849             LSRS     R1,R1,#+1
   \   00000024   0x0049             LSLS     R1,R1,#+1
   \   00000026   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   0000002E   0x6091             STR      R1,[R2, #+8]
    278          
    279              PIT->CHANNEL[pitn].LDVAL  = ~0;                                          //设置溢出中断时间
   \   00000030   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000034   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x0103             LSLS     R3,R0,#+4
   \   0000003A   0x5099             STR      R1,[R3, R2]
    280          
    281              PIT_Flag_Clear(pitn);                                           //清中断标志位
   \   0000003C   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000044   0x68C9             LDR      R1,[R1, #+12]
   \   00000046   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000004A   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000052   0x60D1             STR      R1,[R2, #+12]
    282          
    283               PIT->CHANNEL[pitn].TCTRL &= ~ PIT_TCTRL_TEN_MASK;                        //禁止PITn定时器（用于清空计数值）
   \   00000054   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   0000005C   0x6889             LDR      R1,[R1, #+8]
   \   0000005E   0x0849             LSRS     R1,R1,#+1
   \   00000060   0x0049             LSLS     R1,R1,#+1
   \   00000062   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   0000006A   0x6091             STR      R1,[R2, #+8]
    284               PIT->CHANNEL[pitn].TCTRL  = ( 0
    285                                   | PIT_TCTRL_TEN_MASK                        //使能 PITn定时器
    286                                   //| PIT_TCTRL_TIE_MASK                      //开PITn中断
    287                                 );
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0xEB12 0x1000      ADDS     R0,R2,R0, LSL #+4
   \   00000076   0x6081             STR      R1,[R0, #+8]
    288          }
   \   00000078   0x4770             BX       LR               ;; return
    289          
    290          /*!
    291           *  @brief      获取 PITn计时时间(超时时会关闭 定时器)
    292           *  @param      PITn        模块号（PIT0~PIT3）
    293           *  @since      v5.0
    294           *  Sample usage:
    295                                  uint32 time = pit_time_get(PIT0);                         //获取 PITn计时时间
    296                                  if(time != ~0)       //没超时
    297                                  {
    298                                      printf("\n计时时间为：%d us",time*1000/bus_clk_khz);
    299                                  }
    300           */

   \                                 In section .text, align 2, keep-with-next
    301          uint32 LPLD_PIT_Time_Get(PITx pitn)
    302          {
   \                     LPLD_PIT_Time_Get: (+1)
   \   00000000   0xB410             PUSH     {R4}
    303              uint32 val;
    304          
    305              val = (~0) - PIT->CHANNEL[pitn].CVAL;
   \   00000002   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000006   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   0000000E   0x6852             LDR      R2,[R2, #+4]
   \   00000010   0x1A89             SUBS     R1,R1,R2
    306          
    307              if(PIT->CHANNEL[pitn].TFLG& PIT_TFLG_TIF_MASK)                   //判断是否时间超时
   \   00000012   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   0000001A   0x68D2             LDR      R2,[R2, #+12]
   \   0000001C   0x07D2             LSLS     R2,R2,#+31
   \   0000001E   0xD523             BPL.N    ??LPLD_PIT_Time_Get_0
    308              {
    309                  PIT_Flag_Clear(pitn);                                       //清中断标志位
   \   00000020   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000028   0x68D2             LDR      R2,[R2, #+12]
   \   0000002A   0xF052 0x0201      ORRS     R2,R2,#0x1
   \   0000002E   0x....             LDR.N    R3,??DataTable11_7  ;; 0x40037100
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xEB13 0x1300      ADDS     R3,R3,R0, LSL #+4
   \   00000036   0x60DA             STR      R2,[R3, #+12]
    310                  PIT->CHANNEL[pitn].TCTRL &= ~ PIT_TCTRL_TEN_MASK;           //禁止PITn定时器（用于清空计数值）
   \   00000038   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000040   0x6892             LDR      R2,[R2, #+8]
   \   00000042   0x0852             LSRS     R2,R2,#+1
   \   00000044   0x0052             LSLS     R2,R2,#+1
   \   00000046   0x....             LDR.N    R3,??DataTable11_7  ;; 0x40037100
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0xEB13 0x1300      ADDS     R3,R3,R0, LSL #+4
   \   0000004E   0x609A             STR      R2,[R3, #+8]
    311                  PIT->CHANNEL[pitn].LDVAL  = ~0;
   \   00000050   0xF05F 0x32FF      MOVS     R2,#-1
   \   00000054   0x....             LDR.N    R3,??DataTable11_7  ;; 0x40037100
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x0104             LSLS     R4,R0,#+4
   \   0000005A   0x50E2             STR      R2,[R4, R3]
    312                  PIT->CHANNEL[pitn].TCTRL  = ( 0
    313                                   | PIT_TCTRL_TEN_MASK                       //使能 PITn定时器
    314                                   //| PIT_TCTRL_TIE_MASK                     //开PITn中断
    315                                 );       
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x....             LDR.N    R3,??DataTable11_7  ;; 0x40037100
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0xEB13 0x1000      ADDS     R0,R3,R0, LSL #+4
   \   00000066   0x6082             STR      R2,[R0, #+8]
    316                  //return ~0;
    317              }
    318          
    319              if(val == (~0))
   \                     ??LPLD_PIT_Time_Get_0: (+1)
   \   00000068   0xF111 0x0F01      CMN      R1,#+1
   \   0000006C   0xD100             BNE.N    ??LPLD_PIT_Time_Get_1
    320              {
    321                  val--;              //确保 不等于 ~0
   \   0000006E   0x1E49             SUBS     R1,R1,#+1
    322              }
    323              return val;
   \                     ??LPLD_PIT_Time_Get_1: (+1)
   \   00000070   0x0008             MOVS     R0,R1
   \   00000072   0xBC10             POP      {R4}
   \   00000074   0x4770             BX       LR               ;; return
    324          }
    325          
    326          /*!
    327           *  @brief      关闭 pit
    328           *  @param      PITn        模块号（PIT0~PIT3）
    329           *  @since      v5.0
    330           *  Sample usage:
    331                                  pit_close(PIT0);                         //关闭PIT
    332           */

   \                                 In section .text, align 2, keep-with-next
    333          void LPLD_PIT_Close(PITx pitn)
    334          {
    335              PIT_Flag_Clear(pitn);                                       //清中断标志位
   \                     LPLD_PIT_Close: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000008   0x68C9             LDR      R1,[R1, #+12]
   \   0000000A   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000000E   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000016   0x60D1             STR      R1,[R2, #+12]
    336               PIT->CHANNEL[pitn].TCTRL &= ~ PIT_TCTRL_TEN_MASK;                    //禁止PITn定时器（用于清空计数值）
   \   00000018   0x....             LDR.N    R1,??DataTable11_7  ;; 0x40037100
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000020   0x6889             LDR      R1,[R1, #+8]
   \   00000022   0x0849             LSRS     R1,R1,#+1
   \   00000024   0x0049             LSLS     R1,R1,#+1
   \   00000026   0x....             LDR.N    R2,??DataTable11_7  ;; 0x40037100
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xEB12 0x1000      ADDS     R0,R2,R0, LSL #+4
   \   0000002E   0x6081             STR      R1,[R0, #+8]
    337          }
   \   00000030   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x40037000         DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     PIT_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x40037100         DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x4003711C         DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x4003712C         DC32     0x4003712c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x4003713C         DC32     0x4003713c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LPLD_PIT_Close
      24   LPLD_PIT_Deinit
        24   -> NVIC_DisableIRQ
       0   LPLD_PIT_Delay
      24   LPLD_PIT_DisableIrq
        24   -> NVIC_DisableIRQ
      24   LPLD_PIT_EnableIrq
        24   -> NVIC_EnableIRQ
      20   LPLD_PIT_Init
       4   LPLD_PIT_Time_Get
       0   LPLD_PIT_Time_Start
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       8   PIT0_IRQHandler
         8   -- Indirect call
       8   PIT1_IRQHandler
         8   -- Indirect call
       8   PIT2_IRQHandler
         8   -- Indirect call
       8   PIT3_IRQHandler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      50  LPLD_PIT_Close
      36  LPLD_PIT_Deinit
     158  LPLD_PIT_Delay
      22  LPLD_PIT_DisableIrq
      22  LPLD_PIT_EnableIrq
     152  LPLD_PIT_Init
     118  LPLD_PIT_Time_Get
     122  LPLD_PIT_Time_Start
      20  NVIC_DisableIRQ
      20  NVIC_EnableIRQ
      22  PIT0_IRQHandler
      22  PIT1_IRQHandler
      22  PIT2_IRQHandler
      22  PIT3_IRQHandler
      16  PIT_ISR

 
  16 bytes in section .bss
 856 bytes in section .text
 
 856 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
