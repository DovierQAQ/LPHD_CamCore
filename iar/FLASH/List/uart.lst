###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       04/Aug/2018  19:58:28
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\uart\uart.c
#    Command line =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\uart\uart.c
#        -D LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -lB
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -o C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\camera\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\led\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\oled\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\task\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\uart\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\twinCore\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\mpu6050\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\nrf\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\calc\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\UI\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ledArray\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\CPU\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\driver\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\class\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List\uart.lst
#    Object file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj\uart.o
#
###############################################################################

C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\uart\uart.c
      1          #include "uart.h"
      2          
      3          /****Discription**********************************************/
      4          
      5          /*
      6          	0.需先调用uart.Init()函数再使用本驱动
      7          	1.与FreeCars上位机相对应的uart驱动及应用文件
      8          	2.如果使用虚拟示波器功能，则在某一个定时器里面调用uart.SendToScope();
      9          	3.如果需要改变某一个通道发送的数值，则调用uart.Set(channel, data);
     10          		第一个参数为通道编号，第二个为数据，16位整形
     11          	4.如果要使用上位机发送参数的功能，则在UART_Debug函数里面给所需的变量赋值
     12          		访问uartData[]数组的成员就行
     13          	5.如果要使用上位机热键功能，则在UART_Cmd函数的对应位置写好自己的操作就行
     14          
     15          	@Time	2018-03-30
     16          	@Author	gf
     17          	@Usefor	FreeCars
     18          */
     19          
     20          /****Definitions**********************************************/
     21          
     22          /****Functions************************************************/
     23          
     24          void UART_isr(void);
     25          
     26          /****Variables************************************************/
     27          

   \                                 In section .bss, align 8
     28          double UartData[9] = {0};
   \                     UartData:
   \   00000000                      DS8 72

   \                                 In section .bss, align 4
     29          uint8 sendData[34] = {0};
   \                     sendData:
   \   00000000                      DS8 36
     30          

   \                                 In section .bss, align 4
     31          SerialPortType SerialPortRx;
   \                     SerialPortRx:
   \   00000000                      DS8 108
     32          
     33          /****Functions************************************************/
     34          

   \                                 In section .text, align 2, keep-with-next
     35          static void UartDebug(void) {
     36          //	int temp;
     37          
     38          //	temp = (int)UartData[0];
     39          //	if (temp != 0)
     40          //		pid.leftMoto.kp = temp;
     41          
     42          //	temp = (int)UartData[1];
     43          //	if (temp != 0)
     44          //		pid.leftMoto.ki = temp;
     45          //	temp = (int)UartData[2];
     46          //	if (temp != 0)
     47          //		pid.leftMoto.kd = temp;
     48          //	temp = (int)UartData[3];
     49          //	if (temp != 0)
     50          //		pid.rightMoto.kp = temp;
     51          //	temp = (int)UartData[4];
     52          //	if (temp != 0)
     53          //		pid.rightMoto.ki = temp;
     54          //	temp = (int)UartData[5];
     55          //	if (temp != 0)
     56          //		pid.leftMoto.kd = temp;
     57          //	if (UartData[6] != 0)
     58          //		pid.turner.kp = UartData[6];
     59          //	if (UartData[7] != 0)
     60          //		pid.turner.kd = UartData[7];
     61          //	if (UartData[8] != 0)
     62          //		pid.turner.fuzzy_k = UartData[8];
     63          }
   \                     UartDebug: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          static void UartCmd(uint8 CmdNum,uint8 Data) {
     66          	if (CmdNum == 2 && Data == 102) { // page up
     67          		;
     68          	}
     69          	if (CmdNum == 2 && Data == 103) { //page down
     70          		;
     71          	}
     72          }
   \                     UartCmd: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     73          

   \                                 In section .text, align 2, keep-with-next
     74          static void UART_Init(void) {
   \                     UART_Init: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     75          	static UART_InitTypeDef UART_InitStructure;
     76          
     77          	UART_InitStructure.UART_Uartx = WHICH_UART;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x4006a000
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     78          	UART_InitStructure.UART_BaudRate = BAUDRATE;
   \   0000000C   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000014   0x6048             STR      R0,[R1, #+4]
     79          	UART_InitStructure.UART_RxPin = UART_RxPinx;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000001C   0x7248             STRB     R0,[R1, #+9]
     80          	UART_InitStructure.UART_TxPin = UART_TxPinx;
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000024   0x7208             STRB     R0,[R1, #+8]
     81          	UART_InitStructure.UART_RxIntEnable = TRUE;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000002C   0x7288             STRB     R0,[R1, #+10]
     82          	UART_InitStructure.UART_RxIsr = UART_isr;
   \   0000002E   0x.... 0x....      ADR.W    R0,UART_isr
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000036   0x6148             STR      R0,[R1, #+20]
     83          
     84          	LPLD_UART_Init(UART_InitStructure);
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000003C   0xB084             SUB      SP,SP,#+16
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x221C             MOVS     R2,#+28
   \   00000042   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000046   0xBC0F             POP      {R0-R3}
   \   00000048   0x.... 0x....      BL       LPLD_UART_Init
     85          	LPLD_UART_EnableIrq(UART_InitStructure);
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000050   0xB084             SUB      SP,SP,#+16
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x221C             MOVS     R2,#+28
   \   00000056   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000005A   0xBC0F             POP      {R0-R3}
   \   0000005C   0x.... 0x....      BL       LPLD_UART_EnableIrq
     86          }
   \   00000060   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??UART_InitStructure:
   \   00000000                      DS8 28
     87          

   \                                 In section .text, align 2, keep-with-next
     88          static void UART_Putchar(char ch) {
   \                     UART_Putchar: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     89          	LPLD_UART_PutChar(WHICH_UART, ch);
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000006   0x....             LDR.N    R0,??DataTable5  ;; 0x4006a000
   \   00000008   0x.... 0x....      BL       LPLD_UART_PutChar
     90          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     91          

   \                                 In section .text, align 2, keep-with-next
     92          static void UART_Printf(char *str) {
   \                     UART_Printf: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     93          	int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE003             B.N      ??UART_Printf_0
     94          
     95          	while (str[i] != '\0')
     96          	{
     97          		UART_Putchar(str[i]);
   \                     ??UART_Printf_1: (+1)
   \   00000008   0x5D28             LDRB     R0,[R5, R4]
   \   0000000A   0x.... 0x....      BL       UART_Putchar
     98          		i++;
   \   0000000E   0x1C6D             ADDS     R5,R5,#+1
     99          	}
   \                     ??UART_Printf_0: (+1)
   \   00000010   0x5D28             LDRB     R0,[R5, R4]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD1F8             BNE.N    ??UART_Printf_1
    100          }
   \   00000016   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    101          

   \                                 In section .text, align 2, keep-with-next
    102          static void UART_Set(int chx, int data) {
    103          	sendData[chx * 2] = HIGHBYTE(data);
   \                     UART_Set: (+1)
   \   00000000   0x120A             ASRS     R2,R1,#+8
   \   00000002   0x....             LDR.N    R3,??DataTable5_2
   \   00000004   0xF803 0x2010      STRB     R2,[R3, R0, LSL #+1]
    104          	sendData[chx * 2 + 1] = LOWBYTE(data);
   \   00000008   0x....             LDR.N    R2,??DataTable5_2
   \   0000000A   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
    105          }
   \   00000010   0x4770             BX       LR               ;; return
    106          

   \                                 In section .text, align 2, keep-with-next
    107          static void UART_SendToScope(void) {
   \                     UART_SendToScope: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    108          	int i = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    109          	uint8 sum = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    110          
    111          	UART_Putchar(251);
   \   00000006   0x20FB             MOVS     R0,#+251
   \   00000008   0x.... 0x....      BL       UART_Putchar
    112          	UART_Putchar(109);
   \   0000000C   0x206D             MOVS     R0,#+109
   \   0000000E   0x.... 0x....      BL       UART_Putchar
    113          	UART_Putchar(37);
   \   00000012   0x2025             MOVS     R0,#+37
   \   00000014   0x.... 0x....      BL       UART_Putchar
    114          
    115          	sum += (251 + 109 + 37);
   \   00000018   0x3D73             SUBS     R5,R5,#+115
    116          
    117          	for (i = 0; i < UartRxChNum * 2; i++) {
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0xE007             B.N      ??UART_SendToScope_0
    118          		UART_Putchar(sendData[i]);
   \                     ??UART_SendToScope_1: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable5_2
   \   00000020   0x5C20             LDRB     R0,[R4, R0]
   \   00000022   0x.... 0x....      BL       UART_Putchar
    119          		sum += sendData[i];
   \   00000026   0x....             LDR.N    R0,??DataTable5_2
   \   00000028   0x5C20             LDRB     R0,[R4, R0]
   \   0000002A   0x1945             ADDS     R5,R0,R5
    120          	}
   \   0000002C   0x1C64             ADDS     R4,R4,#+1
   \                     ??UART_SendToScope_0: (+1)
   \   0000002E   0x2C22             CMP      R4,#+34
   \   00000030   0xDBF5             BLT.N    ??UART_SendToScope_1
    121          
    122          	UART_Putchar(sum);
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x.... 0x....      BL       UART_Putchar
    123          }
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    124          

   \                                 In section .text, align 4, keep-with-next
    125          void UART_isr(void) {
   \                     UART_isr: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    126          	int i, begin, d1;
    127          	uint32 d;
    128          
    129          	if ((UART0->S1 & UART_S1_RDRF_MASK) && (UART0->C2 & UART_C2_RIE_MASK)) {
   \   00000002   0x....             LDR.N    R0,??DataTable5_3  ;; 0x4006a004
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x0680             LSLS     R0,R0,#+26
   \   00000008   0xF140 0x8103      BPL.W    ??UART_isr_0
   \   0000000C   0x....             LDR.N    R0,??DataTable5_4  ;; 0x4006a003
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x0680             LSLS     R0,R0,#+26
   \   00000012   0xF140 0x80FE      BPL.W    ??UART_isr_0
    130          		SerialPortRx.Data = LPLD_UART_GetChar(WHICH_UART);
   \   00000016   0x....             LDR.N    R0,??DataTable5  ;; 0x4006a000
   \   00000018   0x.... 0x....      BL       LPLD_UART_GetChar
   \   0000001C   0x....             LDR.N    R1,??DataTable5_5
   \   0000001E   0x7108             STRB     R0,[R1, #+4]
    131          		if (SerialPortRx.Stack < UartRxBufferLen) {
   \   00000020   0x....             LDR.N    R0,??DataTable5_5
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2864             CMP      R0,#+100
   \   00000026   0xF280 0x80F1      BGE.W    ??UART_isr_1
    132          			SerialPortRx.Buffer[SerialPortRx.Stack++] = SerialPortRx.Data;
   \   0000002A   0x....             LDR.N    R0,??DataTable5_5
   \   0000002C   0x7900             LDRB     R0,[R0, #+4]
   \   0000002E   0x....             LDR.N    R1,??DataTable5_5
   \   00000030   0x....             LDR.N    R2,??DataTable5_5
   \   00000032   0x6812             LDR      R2,[R2, #+0]
   \   00000034   0x1851             ADDS     R1,R2,R1
   \   00000036   0x7188             STRB     R0,[R1, #+6]
   \   00000038   0x....             LDR.N    R0,??DataTable5_5
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable5_5
   \   00000040   0x6008             STR      R0,[R1, #+0]
    133          			if (SerialPortRx.Stack >= UartRxDataLen
    134          				&& SerialPortRx.Buffer[SerialPortRx.Stack - UartRxDataLen]    ==0xff
    135          				&& SerialPortRx.Buffer[SerialPortRx.Stack - UartRxDataLen + 1]==0x55
    136          				&& SerialPortRx.Buffer[SerialPortRx.Stack - UartRxDataLen + 2]==0xaa
    137          				&& SerialPortRx.Buffer[SerialPortRx.Stack - UartRxDataLen + 3]==0x10) {
   \   00000042   0x....             LDR.N    R0,??DataTable5_5
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x2829             CMP      R0,#+41
   \   00000048   0xF2C0 0x808D      BLT.W    ??UART_isr_2
   \   0000004C   0x....             LDR.N    R0,??DataTable5_5
   \   0000004E   0x....             LDR.N    R1,??DataTable5_5
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x1808             ADDS     R0,R1,R0
   \   00000054   0xF810 0x0C23      LDRB     R0,[R0, #-35]
   \   00000058   0x28FF             CMP      R0,#+255
   \   0000005A   0xF040 0x8084      BNE.W    ??UART_isr_2
   \   0000005E   0x....             LDR.N    R0,??DataTable5_5
   \   00000060   0x....             LDR.N    R1,??DataTable5_5
   \   00000062   0x6809             LDR      R1,[R1, #+0]
   \   00000064   0x1808             ADDS     R0,R1,R0
   \   00000066   0xF810 0x0C22      LDRB     R0,[R0, #-34]
   \   0000006A   0x2855             CMP      R0,#+85
   \   0000006C   0xD17B             BNE.N    ??UART_isr_2
   \   0000006E   0x....             LDR.N    R0,??DataTable5_5
   \   00000070   0x....             LDR.N    R1,??DataTable5_5
   \   00000072   0x6809             LDR      R1,[R1, #+0]
   \   00000074   0x1808             ADDS     R0,R1,R0
   \   00000076   0xF810 0x0C21      LDRB     R0,[R0, #-33]
   \   0000007A   0x28AA             CMP      R0,#+170
   \   0000007C   0xD173             BNE.N    ??UART_isr_2
   \   0000007E   0x....             LDR.N    R0,??DataTable5_5
   \   00000080   0x....             LDR.N    R1,??DataTable5_5
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0x1808             ADDS     R0,R1,R0
   \   00000086   0xF810 0x0C20      LDRB     R0,[R0, #-32]
   \   0000008A   0x2810             CMP      R0,#+16
   \   0000008C   0xD16B             BNE.N    ??UART_isr_2
    138          				SerialPortRx.Check = 0;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x....             LDR.N    R1,??DataTable5_5
   \   00000092   0xF881 0x006B      STRB     R0,[R1, #+107]
    139          				begin = SerialPortRx.Stack - UartRxDataLen;
   \   00000096   0x....             LDR.N    R0,??DataTable5_5
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF1B0 0x0429      SUBS     R4,R0,#+41
    140          				for(i = begin; i < SerialPortRx.Stack - 1; i++) {
   \   0000009E   0x0025             MOVS     R5,R4
   \   000000A0   0xE00A             B.N      ??UART_isr_3
    141          					SerialPortRx.Check += SerialPortRx.Buffer[i];
   \                     ??UART_isr_4: (+1)
   \   000000A2   0x....             LDR.N    R0,??DataTable5_5
   \   000000A4   0xF890 0x006B      LDRB     R0,[R0, #+107]
   \   000000A8   0x....             LDR.N    R1,??DataTable5_5
   \   000000AA   0x1869             ADDS     R1,R5,R1
   \   000000AC   0x7989             LDRB     R1,[R1, #+6]
   \   000000AE   0x1808             ADDS     R0,R1,R0
   \   000000B0   0x....             LDR.N    R1,??DataTable5_5
   \   000000B2   0xF881 0x006B      STRB     R0,[R1, #+107]
    142          				}
   \   000000B6   0x1C6D             ADDS     R5,R5,#+1
   \                     ??UART_isr_3: (+1)
   \   000000B8   0x....             LDR.N    R0,??DataTable5_5
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x1E40             SUBS     R0,R0,#+1
   \   000000BE   0x4285             CMP      R5,R0
   \   000000C0   0xDBEF             BLT.N    ??UART_isr_4
    143          				if (SerialPortRx.Check == SerialPortRx.Buffer[SerialPortRx.Stack - 1]) {
   \   000000C2   0x....             LDR.N    R0,??DataTable5_5
   \   000000C4   0xF890 0x006B      LDRB     R0,[R0, #+107]
   \   000000C8   0x....             LDR.N    R1,??DataTable5_5
   \   000000CA   0x....             LDR.N    R2,??DataTable5_5
   \   000000CC   0x6812             LDR      R2,[R2, #+0]
   \   000000CE   0x1851             ADDS     R1,R2,R1
   \   000000D0   0x7949             LDRB     R1,[R1, #+5]
   \   000000D2   0x4288             CMP      R0,R1
   \   000000D4   0xD143             BNE.N    ??UART_isr_5
    144          					for (i = 0; i < 9; i++) {
   \   000000D6   0x2500             MOVS     R5,#+0
   \   000000D8   0xE015             B.N      ??UART_isr_6
    145          						d = SerialPortRx.Buffer[begin + i * 4 + 4] * 0x1000000L + SerialPortRx.Buffer[begin + i * 4 + 5] * 0x10000L +
    146          							SerialPortRx.Buffer[begin + i * 4 + 6] * 0x100L + SerialPortRx.Buffer[begin + i * 4 + 7];
    147          						if (d > 0x7FFFFFFF)
    148          							d1 = 0x7FFFFFFF - d;
    149          						else
    150          							d1 = d;
    151          						UartData[i] = d1;
   \                     ??UART_isr_7: (+1)
   \                     ??UART_isr_8: (+1)
   \   000000DA   0x.... 0x....      BL       __aeabi_i2d
   \   000000DE   0x....             LDR.N    R2,??DataTable5_6
   \   000000E0   0xEB12 0x02C5      ADDS     R2,R2,R5, LSL #+3
   \   000000E4   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
    152          						UartData[i] /= 65536.0;
   \   000000E8   0x....             LDR.N    R0,??DataTable5_6
   \   000000EA   0xEB10 0x02C5      ADDS     R2,R0,R5, LSL #+3
   \   000000EE   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \   000000F2   0x2200             MOVS     R2,#+0
   \   000000F4   0x....             LDR.N    R3,??DataTable5_7  ;; 0x40f00000
   \   000000F6   0x.... 0x....      BL       __aeabi_ddiv
   \   000000FA   0x....             LDR.N    R2,??DataTable5_6
   \   000000FC   0xEB12 0x02C5      ADDS     R2,R2,R5, LSL #+3
   \   00000100   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
   \   00000104   0x1C6D             ADDS     R5,R5,#+1
   \                     ??UART_isr_6: (+1)
   \   00000106   0x2D09             CMP      R5,#+9
   \   00000108   0xDA27             BGE.N    ??UART_isr_9
   \   0000010A   0x....             LDR.N    R0,??DataTable5_5
   \   0000010C   0xEB14 0x0185      ADDS     R1,R4,R5, LSL #+2
   \   00000110   0x1808             ADDS     R0,R1,R0
   \   00000112   0x7A80             LDRB     R0,[R0, #+10]
   \   00000114   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000118   0x....             LDR.N    R2,??DataTable5_5
   \   0000011A   0xEB14 0x0385      ADDS     R3,R4,R5, LSL #+2
   \   0000011E   0x189A             ADDS     R2,R3,R2
   \   00000120   0x7AD2             LDRB     R2,[R2, #+11]
   \   00000122   0xF45F 0x3380      MOVS     R3,#+65536
   \   00000126   0x435A             MULS     R2,R3,R2
   \   00000128   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000012C   0x....             LDR.N    R1,??DataTable5_5
   \   0000012E   0xEB14 0x0285      ADDS     R2,R4,R5, LSL #+2
   \   00000132   0x1851             ADDS     R1,R2,R1
   \   00000134   0x7B09             LDRB     R1,[R1, #+12]
   \   00000136   0xF44F 0x7280      MOV      R2,#+256
   \   0000013A   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000013E   0x....             LDR.N    R1,??DataTable5_5
   \   00000140   0xEB14 0x0285      ADDS     R2,R4,R5, LSL #+2
   \   00000144   0x1851             ADDS     R1,R2,R1
   \   00000146   0x7B49             LDRB     R1,[R1, #+13]
   \   00000148   0xFA50 0xF081      UXTAB    R0,R0,R1
   \   0000014C   0xF1B0 0x4F00      CMP      R0,#-2147483648
   \   00000150   0xD3C3             BCC.N    ??UART_isr_7
   \   00000152   0xF07F 0x4100      MVNS     R1,#-2147483648
   \   00000156   0x1A08             SUBS     R0,R1,R0
   \   00000158   0xE7BF             B.N      ??UART_isr_8
    153          					}
    154          					UartDebug();
   \                     ??UART_isr_9: (+1)
   \   0000015A   0x.... 0x....      BL       UartDebug
    155          				}
    156          				SerialPortRx.Stack = 0;
   \                     ??UART_isr_5: (+1)
   \   0000015E   0x2000             MOVS     R0,#+0
   \   00000160   0x....             LDR.N    R1,??DataTable5_5
   \   00000162   0x6008             STR      R0,[R1, #+0]
   \   00000164   0xE055             B.N      ??UART_isr_0
    157          			}
    158          			else if (SerialPortRx.Stack >= UartRxCmdLen
    159          					&& SerialPortRx.Buffer[SerialPortRx.Stack - UartRxCmdLen]    ==0xff
    160          					&& SerialPortRx.Buffer[SerialPortRx.Stack - UartRxCmdLen + 1]==0x55
    161          					&& SerialPortRx.Buffer[SerialPortRx.Stack - UartRxCmdLen + 2]==0xaa
    162          					&& SerialPortRx.Buffer[SerialPortRx.Stack - UartRxCmdLen + 3]==0x77) { // cmd
   \                     ??UART_isr_2: (+1)
   \   00000166   0x....             LDR.N    R0,??DataTable5_5
   \   00000168   0x6800             LDR      R0,[R0, #+0]
   \   0000016A   0x2807             CMP      R0,#+7
   \   0000016C   0xDB51             BLT.N    ??UART_isr_0
   \   0000016E   0x....             LDR.N    R0,??DataTable5_5
   \   00000170   0x....             LDR.N    R1,??DataTable5_5
   \   00000172   0x6809             LDR      R1,[R1, #+0]
   \   00000174   0x1808             ADDS     R0,R1,R0
   \   00000176   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000017A   0x28FF             CMP      R0,#+255
   \   0000017C   0xD149             BNE.N    ??UART_isr_0
   \   0000017E   0x....             LDR.N    R0,??DataTable5_5
   \   00000180   0x....             LDR.N    R1,??DataTable5_5
   \   00000182   0x6809             LDR      R1,[R1, #+0]
   \   00000184   0x5C08             LDRB     R0,[R1, R0]
   \   00000186   0x2855             CMP      R0,#+85
   \   00000188   0xD143             BNE.N    ??UART_isr_0
   \   0000018A   0x....             LDR.N    R0,??DataTable5_5
   \   0000018C   0x....             LDR.N    R1,??DataTable5_5
   \   0000018E   0x6809             LDR      R1,[R1, #+0]
   \   00000190   0x1808             ADDS     R0,R1,R0
   \   00000192   0x7840             LDRB     R0,[R0, #+1]
   \   00000194   0x28AA             CMP      R0,#+170
   \   00000196   0xD13C             BNE.N    ??UART_isr_0
   \   00000198   0x....             LDR.N    R0,??DataTable5_5
   \   0000019A   0x....             LDR.N    R1,??DataTable5_5
   \   0000019C   0x6809             LDR      R1,[R1, #+0]
   \   0000019E   0x1808             ADDS     R0,R1,R0
   \   000001A0   0x7880             LDRB     R0,[R0, #+2]
   \   000001A2   0x2877             CMP      R0,#+119
   \   000001A4   0xD135             BNE.N    ??UART_isr_0
    163          				SerialPortRx.Check = 0;
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x....             LDR.N    R1,??DataTable5_5
   \   000001AA   0xF881 0x006B      STRB     R0,[R1, #+107]
    164          				begin = SerialPortRx.Stack - UartRxCmdLen;
   \   000001AE   0x....             LDR.N    R0,??DataTable5_5
   \   000001B0   0x6800             LDR      R0,[R0, #+0]
   \   000001B2   0x1FC4             SUBS     R4,R0,#+7
    165          				for (i = begin; i < SerialPortRx.Stack - 1; i++)
   \   000001B4   0x0025             MOVS     R5,R4
   \   000001B6   0xE00A             B.N      ??UART_isr_10
    166          					SerialPortRx.Check += SerialPortRx.Buffer[i];
   \                     ??UART_isr_11: (+1)
   \   000001B8   0x....             LDR.N    R0,??DataTable5_5
   \   000001BA   0xF890 0x006B      LDRB     R0,[R0, #+107]
   \   000001BE   0x....             LDR.N    R1,??DataTable5_5
   \   000001C0   0x1869             ADDS     R1,R5,R1
   \   000001C2   0x7989             LDRB     R1,[R1, #+6]
   \   000001C4   0x1808             ADDS     R0,R1,R0
   \   000001C6   0x....             LDR.N    R1,??DataTable5_5
   \   000001C8   0xF881 0x006B      STRB     R0,[R1, #+107]
   \   000001CC   0x1C6D             ADDS     R5,R5,#+1
   \                     ??UART_isr_10: (+1)
   \   000001CE   0x....             LDR.N    R0,??DataTable5_5
   \   000001D0   0x6800             LDR      R0,[R0, #+0]
   \   000001D2   0x1E40             SUBS     R0,R0,#+1
   \   000001D4   0x4285             CMP      R5,R0
   \   000001D6   0xDBEF             BLT.N    ??UART_isr_11
    167          				if(SerialPortRx.Check == SerialPortRx.Buffer[SerialPortRx.Stack - 1])
   \   000001D8   0x....             LDR.N    R0,??DataTable5_5
   \   000001DA   0xF890 0x006B      LDRB     R0,[R0, #+107]
   \   000001DE   0x....             LDR.N    R1,??DataTable5_5
   \   000001E0   0x....             LDR.N    R2,??DataTable5_5
   \   000001E2   0x6812             LDR      R2,[R2, #+0]
   \   000001E4   0x1851             ADDS     R1,R2,R1
   \   000001E6   0x7949             LDRB     R1,[R1, #+5]
   \   000001E8   0x4288             CMP      R0,R1
   \   000001EA   0xD10B             BNE.N    ??UART_isr_12
    168          					UartCmd(UartCmdNum, UartCmdData);
   \   000001EC   0x....             LDR.N    R0,??DataTable5_5
   \   000001EE   0x....             LDR.N    R1,??DataTable5_5
   \   000001F0   0x6809             LDR      R1,[R1, #+0]
   \   000001F2   0x1808             ADDS     R0,R1,R0
   \   000001F4   0x7901             LDRB     R1,[R0, #+4]
   \   000001F6   0x....             LDR.N    R0,??DataTable5_5
   \   000001F8   0x....             LDR.N    R2,??DataTable5_5
   \   000001FA   0x6812             LDR      R2,[R2, #+0]
   \   000001FC   0x1810             ADDS     R0,R2,R0
   \   000001FE   0x78C0             LDRB     R0,[R0, #+3]
   \   00000200   0x.... 0x....      BL       UartCmd
    169          				SerialPortRx.Stack = 0;
   \                     ??UART_isr_12: (+1)
   \   00000204   0x2000             MOVS     R0,#+0
   \   00000206   0x....             LDR.N    R1,??DataTable5_5
   \   00000208   0x6008             STR      R0,[R1, #+0]
   \   0000020A   0xE002             B.N      ??UART_isr_0
    170          			}
    171          		}
    172          		else
    173          			SerialPortRx.Stack = 0;
   \                     ??UART_isr_1: (+1)
   \   0000020C   0x2000             MOVS     R0,#+0
   \   0000020E   0x....             LDR.N    R1,??DataTable5_5
   \   00000210   0x6008             STR      R0,[R1, #+0]
    174          	}
    175          }
   \                     ??UART_isr_0: (+1)
   \   00000212   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    176          

   \                                 In section .text, align 2, keep-with-next
    177          void Image_2_computer(void)
    178          {
   \                     Image_2_computer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    179          	int i, j, k;
    180          	uint8 temp;
    181          
    182          	uart.Putchar(0x01);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x....             LDR.N    R1,??DataTable5_8
   \   00000006   0x6849             LDR      R1,[R1, #+4]
   \   00000008   0x4788             BLX      R1
    183          	uart.Putchar(0xFE);
   \   0000000A   0x20FE             MOVS     R0,#+254
   \   0000000C   0x....             LDR.N    R1,??DataTable5_8
   \   0000000E   0x6849             LDR      R1,[R1, #+4]
   \   00000010   0x4788             BLX      R1
    184          
    185          	for (i = 0; i < ROW; i++)
   \   00000012   0x2400             MOVS     R4,#+0
   \   00000014   0xE000             B.N      ??Image_2_computer_0
   \                     ??Image_2_computer_1: (+1)
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \                     ??Image_2_computer_0: (+1)
   \   00000018   0x2C78             CMP      R4,#+120
   \   0000001A   0xDA23             BGE.N    ??Image_2_computer_2
    186          	{
    187          		for (j = 0; j < (COLUMN >> 3); j++)
   \   0000001C   0x2500             MOVS     R5,#+0
   \   0000001E   0xE006             B.N      ??Image_2_computer_3
    188          		{
    189          			temp = 0;
    190          			for (k = 0; k < 8; k++)
    191          				temp |= (camera.img[i][(j << 3) + (7 - k)] && 1) << k;
    192          			uart.Putchar(~temp);
   \                     ??Image_2_computer_4: (+1)
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x43C0             MVNS     R0,R0
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x....             LDR.N    R1,??DataTable5_8
   \   00000028   0x6849             LDR      R1,[R1, #+4]
   \   0000002A   0x4788             BLX      R1
   \   0000002C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Image_2_computer_3: (+1)
   \   0000002E   0x2D14             CMP      R5,#+20
   \   00000030   0xDAF1             BGE.N    ??Image_2_computer_1
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0xE004             B.N      ??Image_2_computer_5
   \                     ??Image_2_computer_6: (+1)
   \   00000038   0x2200             MOVS     R2,#+0
   \                     ??Image_2_computer_7: (+1)
   \   0000003A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003C   0x408A             LSLS     R2,R2,R1
   \   0000003E   0x4310             ORRS     R0,R2,R0
   \   00000040   0x1C49             ADDS     R1,R1,#+1
   \                     ??Image_2_computer_5: (+1)
   \   00000042   0x2908             CMP      R1,#+8
   \   00000044   0xDAEC             BGE.N    ??Image_2_computer_4
   \   00000046   0x....             LDR.N    R2,??DataTable5_9
   \   00000048   0x23A0             MOVS     R3,#+160
   \   0000004A   0xFB03 0x2204      MLA      R2,R3,R4,R2
   \   0000004E   0x00EB             LSLS     R3,R5,#+3
   \   00000050   0x1DDB             ADDS     R3,R3,#+7
   \   00000052   0x1A5B             SUBS     R3,R3,R1
   \   00000054   0x189A             ADDS     R2,R3,R2
   \   00000056   0xF241 0x4370      MOVW     R3,#+5232
   \   0000005A   0x5C9A             LDRB     R2,[R3, R2]
   \   0000005C   0x2A00             CMP      R2,#+0
   \   0000005E   0xD0EB             BEQ.N    ??Image_2_computer_6
   \   00000060   0x2201             MOVS     R2,#+1
   \   00000062   0xE7EA             B.N      ??Image_2_computer_7
    193          		}
    194          	}
    195          
    196          	uart.Putchar(0xFE);
   \                     ??Image_2_computer_2: (+1)
   \   00000064   0x20FE             MOVS     R0,#+254
   \   00000066   0x....             LDR.N    R1,??DataTable5_8
   \   00000068   0x6849             LDR      R1,[R1, #+4]
   \   0000006A   0x4788             BLX      R1
    197          	uart.Putchar(0x01);
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x....             LDR.N    R1,??DataTable5_8
   \   00000070   0x6849             LDR      R1,[R1, #+4]
   \   00000072   0x4788             BLX      R1
    198          } // 18-04-01 by gf
   \   00000074   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    199          
    200          //int fputc(int ch, FILE *f)
    201          //{
    202          //	uart.Putchar((unsigned char)ch);
    203          //
    204          //	//while(USART_GetFlagStatus(Usartx, USART_FLAG_TC) != SET);
    205          //
    206          //	return ch;
    207          //}
    208          
    209          /****Objects**************************************************/
    210          

   \                                 In section .data, align 4
    211          UART_CLASS uart = {
   \                     uart:
   \   00000000   0x........         DC32 UART_Init, UART_Putchar, UART_Printf, UART_Set, UART_SendToScope
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000014   0x........         DC32 Image_2_computer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ??UART_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     sendData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4006A004         DC32     0x4006a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x4006A003         DC32     0x4006a003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     SerialPortRx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     UartData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x40F00000         DC32     0x40f00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     uart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     camera
    212          	&UART_Init,
    213          	&UART_Putchar,
    214          	&UART_Printf,
    215          	&UART_Set,
    216          	&UART_SendToScope,
    217          	&Image_2_computer
    218          };

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Image_2_computer
        16   -- Indirect call
      32   UART_Init
        16   -> LPLD_UART_EnableIrq
        16   -> LPLD_UART_Init
        32   -> __aeabi_memcpy4
      16   UART_Printf
        16   -> UART_Putchar
       8   UART_Putchar
         8   -> LPLD_UART_PutChar
      16   UART_SendToScope
        16   -> UART_Putchar
       0   UART_Set
      16   UART_isr
        16   -> LPLD_UART_GetChar
        16   -> UartCmd
        16   -> UartDebug
        16   -> __aeabi_ddiv
        16   -> __aeabi_i2d
       0   UartCmd
       0   UartDebug


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
     118  Image_2_computer
     108  SerialPortRx
      98  UART_Init
      28  UART_InitStructure
      24  UART_Printf
      14  UART_Putchar
      60  UART_SendToScope
      18  UART_Set
     532  UART_isr
       2  UartCmd
      72  UartData
       2  UartDebug
      36  sendData
      24  uart

 
 244 bytes in section .bss
  24 bytes in section .data
 908 bytes in section .text
 
 908 bytes of CODE memory
 268 bytes of DATA memory

Errors: none
Warnings: none
