###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       01/Aug/2018  12:09:48
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\lib\LPLD\HW\HW_USB.c
#    Command line =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\lib\LPLD\HW\HW_USB.c
#        -D LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -lB
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -o C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\camera\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\led\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\oled\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\task\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\uart\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\twinCore\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\mpu6050\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\nrf\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\calc\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\UI\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ledArray\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\CPU\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\driver\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\class\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List\HW_USB.lst
#    Object file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj\HW_USB.o
#
###############################################################################

C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\lib\LPLD\HW\HW_USB.c
      1          /**
      2           * @file HW_USB.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief UART底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"     /* Common definitions */

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable3  ;; 0xe000e100
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
     23          #include "HW_USB.h"
     24          #include "usb_driver.h"
     25          
     26          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     27          USB_ISR_CALLBACK USB_ISR[1];
   \                     USB_ISR:
   \   00000000                      DS8 4
     28          
     29          /*
     30          * LPLD_USB_Init
     31          * K60 USB外设初始化函数
     32          * 在该函数中,初始化USB外设时钟,设置USB外设的中断服务函数,
     33          * 并且调用USB设备初始化函数
     34          */
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void LPLD_USB_Init(void)
     37          { 
   \                     LPLD_USB_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     38            MPU->CESR=0; //MPU 配置
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable3_1  ;; 0x4000d000
   \   00000006   0x6008             STR      R0,[R1, #+0]
     39          #if (defined(CPU_MK60DZ10))  
     40            SIM->SOPT2 |= SIM_SOPT2_USBSRC_MASK |   //选择PLL/FLL作为时钟源
     41                         SIM_SOPT2_PLLFLLSEL_MASK; //用PLL作为USB的时钟源，此时的PLL的频率为96Mhz 
     42          #if(CORE_CLK_MHZ == PLL_96)
     43            SIM->CLKDIV2 = 0x02;                    //设置分频系数USB时钟 = 96Mhz/2 =48Mhz
     44          #endif 
     45            SIM->SCGC4 |= SIM_SCGC4_USBOTG_MASK;  //使能USB外设时钟
     46          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     47            SIM->SOPT2 |= SIM_SOPT2_PLLFLLSEL(1)      // 选择 PLL0 作为参考   
     48                      |  SIM_SOPT2_USBFSRC(0)         // 选择 MCGPLLCLK 作为 CLKC 参考源 
     49                      |  SIM_SOPT2_USBF_CLKSEL_MASK;  // 选择 USB fractional divider 座位 USB reference clock 参考源 
     50          #if(CORE_CLK_MHZ == PLL_120)
     51          // MCGPLLCLK =  120MHz 
     52          // USB Clock = PLL0 x (FRAC +1) / (DIV+1)    
     53          // USB Clock = 120MHz x (1+1) / (4+1) = 48 MHz   
     54            SIM->CLKDIV2 = SIM_CLKDIV2_USBFSFRAC_MASK | SIM_CLKDIV2_USBFSDIV(4);
     55          #endif
     56            SIM->SCGC4 |= SIM_SCGC4_USBFS_MASK;   //使能USB外设时钟 
     57          #endif 
     58            USB0->USBTRC0 = 0x40;                   //按照文档所述，此位必须设置为1
   \   00000008   0x2040             MOVS     R0,#+64
   \   0000000A   0x....             LDR.N    R1,??DataTable3_2  ;; 0x4007210c
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
     59            SIM->SOPT1 |= SIM_SOPT1_USBREGEN_MASK;  //配置USB设备稳压源
   \   0000000E   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40047000
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000016   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40047000
   \   00000018   0x6008             STR      R0,[R1, #+0]
     60            
     61            /* NVIC模块配置 */
     62            enable_irq(USB0_IRQn);                 //使能NVIC中的USB OTG中断
   \   0000001A   0x2049             MOVS     R0,#+73
   \   0000001C   0x.... 0x....      BL       NVIC_EnableIRQ
     63            USB_ISR[0] = USB_DEVICE_ISR;           //将USB协议处理函数添加到中断处理函数数组中
   \   00000020   0x....             LDR.N    R0,??DataTable3_4
   \   00000022   0x....             LDR.N    R1,??DataTable3_5
   \   00000024   0x6008             STR      R0,[R1, #+0]
     64            
     65          #if(USB_DEVICE_CLASS == USB_DEVICE_CLASS_CDC)
     66            USB_CDC_Init();                        //初始化CDC类
   \   00000026   0x.... 0x....      BL       USB_CDC_Init
     67          #elif(USB_DEVICE_CLASS == USB_DEVICE_CLASS_HID)
     68            USB_HID_Mouse_Init();                  //初始化HID类
     69          #endif
     70            
     71            
     72          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
     73          
     74          /*
     75          * LPLD_USB_DeInit
     76          * K60 USB模块注销函数
     77          * 注销所选择的USB设备
     78          */
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void LPLD_USB_DeInit(void)
     81          { 
   \                     LPLD_USB_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     82          #if(USB_DEVICE_CLASS == USB_DEVICE_CLASS_CDC)
     83            USB_Class_CDC_DeInit(CONTROLLER_ID);                        //注销CDC类
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       USB_Class_CDC_DeInit
     84          #elif(USB_DEVICE_CLASS == USB_DEVICE_CLASS_HID)
     85            USB_Class_HID_DeInit(CONTROLLER_ID);                        //注销HID类
     86          #endif
     87          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     88          
     89          #if(USB_DEVICE_CLASS == USB_DEVICE_CLASS_CDC)
     90          /*
     91          *  LPLD_USB_VirtualCom_Rx
     92          *  将USB CDC类模式虚拟成串口模式，该函数是串口接收函数
     93          *  参数：
     94          *      *rx_buf--指向用户数据存储区，用于储存接收到的数据
     95          *  输出：接收数据的长度，以字节为单位
     96          */

   \                                 In section .text, align 2, keep-with-next
     97          uint8 LPLD_USB_VirtualCom_Rx(uint8 *rx_buf)
     98          {
   \                     LPLD_USB_VirtualCom_Rx: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     99            memcpy(rx_buf,tUSB_Rev_Data.buffer,tUSB_Rev_Data.len);
   \   00000002   0x....             LDR.N    R1,??DataTable3_6
   \   00000004   0xF891 0x2040      LDRB     R2,[R1, #+64]
   \   00000008   0x....             LDR.N    R1,??DataTable3_6
   \   0000000A   0x.... 0x....      BL       memcpy
    100            return tUSB_Rev_Data.len;
   \   0000000E   0x....             LDR.N    R0,??DataTable3_6
   \   00000010   0xF890 0x0040      LDRB     R0,[R0, #+64]
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    101          }
    102          
    103          /*
    104          *  LPLD_USB_VirtualCom_Tx
    105          *  将USB CDC类模式虚拟成串口模式，该函数是串口发送函数
    106          *  参数：
    107          *      *tx_buf -- 指向用户数据存储区，用于储存要发送的数据
    108          *      len -- 要发送的数据长度
    109          *  输出：0x00   发送成功
    110          *        非0x00 发送失败
    111          */

   \                                 In section .text, align 2, keep-with-next
    112          uint8 LPLD_USB_VirtualCom_Tx(uint8 *tx_buf,uint8 len)
    113          {
   \                     LPLD_USB_VirtualCom_Tx: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0002             MOVS     R2,R0
    114            uint8 status = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    115            status = USB_Class_CDC_Interface_DIC_Send_Data(CONTROLLER_ID,tx_buf,len);
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x000B             MOVS     R3,R1
   \   0000000A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       USB_Class_CDC_Send_Data
    116            return status;
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    117          }
    118          
    119          /*
    120          *  LPLD_USB_SetRevIsr
    121          *  添加USB 虚拟串口接收数据中断服务函数
    122          *  无
    123          *  无
    124          */

   \                                 In section .text, align 2, keep-with-next
    125          void LPLD_USB_SetRevIsr(USB_REV_ISR_CALLBACK isr)
    126          {
   \                     LPLD_USB_SetRevIsr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    127            USB_Rev_SetIsr(isr);
   \   00000002   0x.... 0x....      BL       USB_Rev_SetIsr
    128          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    129          
    130          /*
    131          *  LPLD_USB_QueueData
    132          *  从USB的内存中恢复接收到的数据到用户内存中
    133          *  接收成功后调用此函数
    134          *  无
    135          *  无
    136          */

   \                                 In section .text, align 2, keep-with-next
    137          void LPLD_USB_QueueData(void)
    138          {
   \                     LPLD_USB_QueueData: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    139            (void)USB_Class_CDC_Interface_DIC_Recv_Data(CONTROLLER_ID, NULL, 0);
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       _usb_device_recv_data
    140          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    141          #endif
    142          
    143          #if(USB_DEVICE_CLASS == USB_DEVICE_CLASS_HID)
    144          /*
    145          *  LPLD_USB_HID_MouseControl
    146          *  HID鼠标控制函数
    147          *  参数
    148          *    uint8 *buf -- 数组包含4个字节控制命令
    149          *      第一个字节控制鼠标左右键
    150          *        取值：MOUSE_LEFT_CLICK  左键
    151          *              MOUSE_RIGHT_CLICK 右键
    152          *      第二个字节控制X轴移动
    153          *        取值：MOUSE_LEFT_MOVE   左移
    154          *              MOUSE_RIGHT_MOVE  右移
    155          *      第三个字节控制Y轴移动
    156          *        取值：MOUSE_UP_MOVE    上移
    157          *              MOUSE_DOWN_MOVE  下移
    158          *  输出：
    159          *    无
    160          */
    161          void LPLD_USB_HID_MouseControl(uint8 *buf)
    162          {
    163            USB_HID_MouseControl(buf);
    164          }
    165          
    166          /*
    167          *  LPLD_USB_HID_LoopTask
    168          *  在main loop中循环调度鼠标检测
    169          *  参数
    170          *    uint8 *buf -- 数组包含4个字节控制命令
    171          *      第一个字节控制鼠标左右键
    172          *        取值：MOUSE_LEFT_CLICK  左键
    173          *              MOUSE_RIGHT_CLICK 右键
    174          *      第二个字节控制X轴移动
    175          *        取值：MOUSE_LEFT_MOVE   左移
    176          *              MOUSE_RIGHT_MOVE  右移
    177          *      第三个字节控制Y轴移动
    178          *        取值：MOUSE_UP_MOVE    上移
    179          *              MOUSE_DOWN_MOVE  下移
    180          *  输出：
    181          *    无
    182          */
    183          void LPLD_USB_HID_LoopTask(uint8 *buf)
    184          {
    185            if(USB_HID_Mouse_Task())
    186            {
    187              LPLD_USB_HID_MouseControl(buf);
    188            }
    189          }
    190          #endif
    191          /*
    192          *  LPLD_USB_Isr
    193          *  USB中断处理函数
    194          */

   \                                 In section .text, align 2, keep-with-next
    195          void USB_OTG_IRQHandler(void)
    196          {
   \                     USB_OTG_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    197            //调用用户自定义中断服务
    198            USB_ISR[0]();  
   \   00000002   0x....             LDR.N    R0,??DataTable3_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    199          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x4000D000         DC32     0x4000d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4007210C         DC32     0x4007210c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40047000         DC32     0x40047000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     USB_DEVICE_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     USB_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     tUSB_Rev_Data

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LPLD_USB_DeInit
         8   -> USB_Class_CDC_DeInit
       8   LPLD_USB_Init
         8   -> NVIC_EnableIRQ
         8   -> USB_CDC_Init
       8   LPLD_USB_QueueData
         8   -> _usb_device_recv_data
       8   LPLD_USB_SetRevIsr
         8   -> USB_Rev_SetIsr
       8   LPLD_USB_VirtualCom_Rx
         8   -> memcpy
       8   LPLD_USB_VirtualCom_Tx
         8   -> USB_Class_CDC_Send_Data
       0   NVIC_EnableIRQ
       8   USB_OTG_IRQHandler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
      10  LPLD_USB_DeInit
      44  LPLD_USB_Init
      16  LPLD_USB_QueueData
       8  LPLD_USB_SetRevIsr
      22  LPLD_USB_VirtualCom_Rx
      24  LPLD_USB_VirtualCom_Tx
      20  NVIC_EnableIRQ
       4  USB_ISR
      10  USB_OTG_IRQHandler

 
   4 bytes in section .bss
 182 bytes in section .text
 
 182 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: 1
