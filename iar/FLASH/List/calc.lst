###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       19/Aug/2018  11:36:28
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\calc\calc.c
#    Command line =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\calc\calc.c
#        -D LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -lB
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -o C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\camera\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\led\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\oled\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\task\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\uart\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\twinCore\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\mpu6050\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\nrf\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\calc\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\UI\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ledArray\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\CPU\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\driver\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\class\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List\calc.lst
#    Object file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj\calc.o
#
###############################################################################

C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\calc\calc.c
      1          #include "calc.h"
      2          
      3          /****Discription**********************************************/
      4          
      5          /*
      6          	0.calc.Calc()
      7          
      8          	@Time	2018-04-28
      9          	@Author	¹ù·«
     10          	@Usefor	calc
     11          */
     12          
     13          /****Definitions**********************************************/
     14          
     15          /****Functions************************************************/
     16          
     17          void CALC_Calc(void);
     18          void CALC_My3d(void);
     19          
     20          /****Variables************************************************/
     21          
     22          /****Objects**************************************************/
     23          

   \                                 In section .data, align 4
     24          CALC_CLASS calc =
   \                     calc:
   \   00000000   0x........         DC32 CALC_Calc, CALC_My3d, 4
   \              0x........   
   \              0x00000004   
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000001C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000006C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000007C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000008C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000009C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000010C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000011C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000012C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000013C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000014C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000015C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000016C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000017C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000018C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000019C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000020C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000021C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000022C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000023C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000024C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000025C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000026C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000027C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000028C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000029C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000030C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000031C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000032C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000033C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000034C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000035C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000036C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000037C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000038C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000039C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000040C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000041C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000042C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     25          {
     26          	&CALC_Calc,
     27          	&CALC_My3d,
     28          
     29          	.cnt_effect = 4
     30          };
     31          
     32          /****Functions************************************************/
     33          

   \                                 In section .text, align 2, keep-with-next
     34          static int limitX(int num)
     35          {
     36          	if (num > 158) return 158;
   \                     limitX: (+1)
   \   00000000   0x289F             CMP      R0,#+159
   \   00000002   0xDB01             BLT.N    ??limitX_0
   \   00000004   0x209E             MOVS     R0,#+158
   \   00000006   0xE003             B.N      ??limitX_1
     37          	if (num < 1) return 1;
   \                     ??limitX_0: (+1)
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xDA01             BGE.N    ??limitX_2
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE7FF             B.N      ??limitX_1
     38          	return num;
   \                     ??limitX_2: (+1)
   \                     ??limitX_1: (+1)
   \   00000010   0x4770             BX       LR               ;; return
     39          }
     40          
     41          //static int calc_LinearRegression(int y[], int xMin, int num, float *a, float *b)
     42          //{
     43          //	int i;
     44          //	float xiyiSum = 0;
     45          //	float xAve = 0, yAve = 0;
     46          //	float xi2Sum = 0;
     47          //	float temp;
     48          //
     49          //	*a = 0;
     50          //	*b = 0;
     51          //
     52          //	for (i = xMin; i < xMin + num; i++)
     53          //	{
     54          //		xiyiSum += (y[i] * i);
     55          //		xAve += i;
     56          //		yAve += y[i];
     57          //		xi2Sum += (i * i);
     58          //	}
     59          //
     60          //	xAve /= num;
     61          //	yAve /= num;
     62          //
     63          //	temp = xi2Sum - num * xAve * xAve;
     64          //
     65          //	if (temp)
     66          //	{
     67          //		*a = (xiyiSum - num * xAve * yAve) / temp;
     68          //		*b = yAve - *a * xAve;
     69          //
     70          //		return 0;
     71          //	}
     72          //	else
     73          //		return -1;
     74          //}
     75          
     76          //#define STARTROW	60
     77          //static void CALC_testforStart(void)
     78          //{
     79          //	int i, j;
     80          //	int curJump = 0, cntOk = 0;
     81          //	static int cntJump = 0;
     82          //
     83          //	calc.flag_start = 0;
     84          //
     85          //	for (i = 0; i < 3; i++)
     86          //	{
     87          //		cntJump = 0;
     88          //		for (j = 0; j < 159; j++)
     89          //		{
     90          //			if (camera.img[i + STARTROW][j] == camera.white && camera.img[i + STARTROW][j + 1] == camera.black && !curJump)
     91          //			{
     92          //				curJump = 1;
     93          //				cntJump++;
     94          //			}
     95          //			else if (camera.img[i + STARTROW][j] == camera.black && camera.img[i + STARTROW][j + 1] == camera.white && curJump)
     96          //			{
     97          //				curJump = 0;
     98          //				cntJump++;
     99          //			}
    100          //		}
    101          //		if (cntJump > 10)
    102          //			cntOk++;
    103          //	}
    104          //
    105          //	if (cntOk)
    106          //		calc.flag_start = 1;
    107          //}
    108          
    109          #define CNTMAX		20  			// ÀûÓÃ¶àÉÙÖ¡À´Í³¼ÆÂË²¨
    110          //#define CNTEFF		4

   \                                 In section .bss, align 4
    111          static int lineR[120], lineL[120];	// ×ó±ßÏßÓÒ±ßÏß
   \                     lineR:
   \   00000000                      DS8 480

   \                                 In section .bss, align 4
   \                     lineL:
   \   00000000                      DS8 480
    112          static int lineMid[120];

   \                                 In section .bss, align 4
    113          int state_out[CNTMAX + 1] = {0};	// ½á¹ûÊý×é
   \                     state_out:
   \   00000000                      DS8 84

   \                                 In section .bss, align 4
    114          int flag_stopL = 0, flag_stopR = 0;	// ½ØÖÁ±ê¼Ç
   \                     flag_stopL:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     flag_stopR:
   \   00000000                      DS8 4
    115          #define ROADEND		50
    116          #define FIRSTJUMP	60
    117          #define STOPLINE	50
    118          #define ZEBRALINE	95
    119          #define ZEBRALINE2	110
    120          #define ZEBRANUM	5
    121          #define JMPDELTAX	20 // ÓÐSÍä»á³µ¸ÄÎª30
    122          

   \                                 In section .text, align 4, keep-with-next
    123          void CALC_Calc(void)
    124          {
   \                     CALC_Calc: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    125          	int i, j;
    126          	int flag_startL = 0, flag_startR = 0;
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x2600             MOVS     R6,#+0
    127          	static int curJumpR = 0, curJumpL = 0;
    128          	static int cntJumpR = 0, cntJumpL = 0;
    129          	static int posJumpR[10] = {0}, posJumpL[10] = {0};
    130          
    131          	curJumpR = 0, curJumpL = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8DF 0x1B8C      LDR.W    R1,??CALC_Calc_0
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF8DF 0x1B88      LDR.W    R1,??CALC_Calc_0+0x4
   \   00000014   0x6008             STR      R0,[R1, #+0]
    132          	cntJumpR = 0, cntJumpL = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8DF 0x1B84      LDR.W    R1,??CALC_Calc_0+0x8
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF8DF 0x1B80      LDR.W    R1,??CALC_Calc_0+0xC
   \   00000024   0x6008             STR      R0,[R1, #+0]
    133          	flag_stopL = 0, flag_stopR = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8DF 0x1B7C      LDR.W    R1,??CALC_Calc_0+0x10
   \   0000002C   0x6008             STR      R0,[R1, #+0]
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF8DF 0x1B78      LDR.W    R1,??CALC_Calc_0+0x14
   \   00000034   0x6008             STR      R0,[R1, #+0]
    134          	calc.cnt_out = 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF8DF 0x1DB0      LDR.W    R1,??CALC_Calc_1
   \   0000003C   0xF8C1 0x042C      STR      R0,[R1, #+1068]
    135          
    136              if (calc.cnt_clear)
   \   00000040   0xF8DF 0x0DA8      LDR.W    R0,??CALC_Calc_1
   \   00000044   0xF8D0 0x0430      LDR      R0,[R0, #+1072]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD009             BEQ.N    ??CALC_Calc_2
    137                  for (i = 0; i < CNTMAX; i++)
   \   0000004C   0x2400             MOVS     R4,#+0
   \   0000004E   0xE005             B.N      ??CALC_Calc_3
    138                      state_out[i] = 0;
   \                     ??CALC_Calc_4: (+1)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xF8DF 0x1D9C      LDR.W    R1,??CALC_Calc_1+0x4
   \   00000056   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   0000005A   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_Calc_3: (+1)
   \   0000005C   0x2C14             CMP      R4,#+20
   \   0000005E   0xDBF7             BLT.N    ??CALC_Calc_4
    139          
    140          	for (int k = 2; k > 0; k--)
   \                     ??CALC_Calc_2: (+1)
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0xE00C             B.N      ??CALC_Calc_5
    141          		calc.reffer[k] = calc.reffer[k - 1];
   \                     ??CALC_Calc_6: (+1)
   \   00000064   0xF8DF 0x1D84      LDR.W    R1,??CALC_Calc_1
   \   00000068   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000006C   0xF8D1 0x1430      LDR      R1,[R1, #+1072]
   \   00000070   0xF8DF 0x2D78      LDR.W    R2,??CALC_Calc_1
   \   00000074   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000078   0xF8C2 0x1434      STR      R1,[R2, #+1076]
   \   0000007C   0x1E40             SUBS     R0,R0,#+1
   \                     ??CALC_Calc_5: (+1)
   \   0000007E   0x2801             CMP      R0,#+1
   \   00000080   0xDAF0             BGE.N    ??CALC_Calc_6
    142          	calc.reffer[0] = 0;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF8DF 0x1D64      LDR.W    R1,??CALC_Calc_1
   \   00000088   0xF8C1 0x0434      STR      R0,[R1, #+1076]
    143          
    144          	//CALC_testforStart();
    145          
    146          	camera.img[119][0] = camera.white; // ÓÃÀ´·ÀÖ¹ÉãÏñÍ·Éì³öÈ¥
   \   0000008C   0xF8DF 0x0D64      LDR.W    R0,??CALC_Calc_1+0x8
   \   00000090   0x6940             LDR      R0,[R0, #+20]
   \   00000092   0xF8DF 0x1D64      LDR.W    R1,??CALC_Calc_1+0xC
   \   00000096   0x7008             STRB     R0,[R1, #+0]
    147          	camera.img[119][159] = camera.white;
   \   00000098   0xF8DF 0x0D58      LDR.W    R0,??CALC_Calc_1+0x8
   \   0000009C   0x6940             LDR      R0,[R0, #+20]
   \   0000009E   0xF8DF 0x1D5C      LDR.W    R1,??CALC_Calc_1+0x10
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
    148          
    149          	/*---------------------------------------------------------------------------------------------------------*/
    150          	//°ßÂíÏß
    151          
    152          	calc.flag_zebra = 0;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0xF8DF 0x1D44      LDR.W    R1,??CALC_Calc_1
   \   000000AA   0x6148             STR      R0,[R1, #+20]
    153          //	int cnt_zebra = 0;
    154          //	int curJumpZebra = 0;
    155          //	for (i = 0; i < 159; i++)
    156          //	{
    157          //		if (camera.img[ZEBRALINE][i] == camera.black && camera.img[ZEBRALINE][i + 1] == camera.white && !curJumpZebra)
    158          //		{
    159          //			curJumpZebra = 1;
    160          //			cnt_zebra++;
    161          //		}
    162          //		else if (camera.img[ZEBRALINE][i] == camera.white && camera.img[ZEBRALINE][i + 1] == camera.black && curJumpZebra)
    163          //		{
    164          //			curJumpZebra = 0;
    165          //			cnt_zebra++;
    166          //		}
    167          //	}
    168          //	if (cnt_zebra > ZEBRANUM)
    169          //		calc.flag_zebra = 1;
    170          //
    171          //	cnt_zebra = 0;
    172          //	curJumpZebra = 0;
    173          //	for (i = 0; i < 159; i++)
    174          //	{
    175          //		if (camera.img[ZEBRALINE2][i] == camera.black && camera.img[ZEBRALINE2][i + 1] == camera.white && !curJumpZebra)
    176          //		{
    177          //			curJumpZebra = 1;
    178          //			cnt_zebra++;
    179          //		}
    180          //		else if (camera.img[ZEBRALINE2][i] == camera.white && camera.img[ZEBRALINE2][i + 1] == camera.black && curJumpZebra)
    181          //		{
    182          //			curJumpZebra = 0;
    183          //			cnt_zebra++;
    184          //		}
    185          //	}
    186          //	if (cnt_zebra > ZEBRANUM)
    187          //		calc.flag_zebra = 1;
    188          //
    189          //	for (i = 0; i < 159; i++)
    190          //	{
    191          //		camera.img[ZEBRALINE][i] = camera.black;
    192          //		camera.img[ZEBRALINE + 1][i] = camera.black;
    193          //	}
    194          
    195          	/*---------------------------------------------------------------------------------------------------------*/
    196          
    197          	// ÓÒ±ßÏßµÚÒ»¸öµã
    198          	for (i = 0; i < 159; i++)
   \   000000AC   0x2400             MOVS     R4,#+0
   \   000000AE   0xE000             B.N      ??CALC_Calc_7
   \                     ??CALC_Calc_8: (+1)
   \   000000B0   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_Calc_7: (+1)
   \   000000B2   0x2C9F             CMP      R4,#+159
   \   000000B4   0xDA19             BGE.N    ??CALC_Calc_9
    199          		if (camera.img[119][i] == camera.white && camera.img[119][i + 1] == camera.black)
   \   000000B6   0xF8DF 0x0D3C      LDR.W    R0,??CALC_Calc_1+0x8
   \   000000BA   0x1820             ADDS     R0,R4,R0
   \   000000BC   0xF645 0x61D0      MOVW     R1,#+24272
   \   000000C0   0x5C08             LDRB     R0,[R1, R0]
   \   000000C2   0xF8DF 0x1D30      LDR.W    R1,??CALC_Calc_1+0x8
   \   000000C6   0x6949             LDR      R1,[R1, #+20]
   \   000000C8   0x4288             CMP      R0,R1
   \   000000CA   0xD1F1             BNE.N    ??CALC_Calc_8
   \   000000CC   0xF8DF 0x0D24      LDR.W    R0,??CALC_Calc_1+0x8
   \   000000D0   0x1820             ADDS     R0,R4,R0
   \   000000D2   0xF645 0x61D1      MOVW     R1,#+24273
   \   000000D6   0x5C08             LDRB     R0,[R1, R0]
   \   000000D8   0xF8DF 0x1D18      LDR.W    R1,??CALC_Calc_1+0x8
   \   000000DC   0x6989             LDR      R1,[R1, #+24]
   \   000000DE   0x4288             CMP      R0,R1
   \   000000E0   0xD1E6             BNE.N    ??CALC_Calc_8
    200          		{
    201          			lineR[119] = i;
   \   000000E2   0xF8DF 0x0D1C      LDR.W    R0,??CALC_Calc_1+0x14
   \   000000E6   0xF8C0 0x41DC      STR      R4,[R0, #+476]
    202          			break;
    203          		}
    204          	if (i == 159)
   \                     ??CALC_Calc_9: (+1)
   \   000000EA   0x2C9F             CMP      R4,#+159
   \   000000EC   0xD104             BNE.N    ??CALC_Calc_10
    205          		lineR[119] = 159;
   \   000000EE   0x209F             MOVS     R0,#+159
   \   000000F0   0xF8DF 0x1D0C      LDR.W    R1,??CALC_Calc_1+0x14
   \   000000F4   0xF8C1 0x01DC      STR      R0,[R1, #+476]
    206          
    207          	// ×ó±ßÏßµÚÒ»¸öµã
    208          	for (i = 159; i > 0; i--)
   \                     ??CALC_Calc_10: (+1)
   \   000000F8   0x249F             MOVS     R4,#+159
   \   000000FA   0xE000             B.N      ??CALC_Calc_11
   \                     ??CALC_Calc_12: (+1)
   \   000000FC   0x1E64             SUBS     R4,R4,#+1
   \                     ??CALC_Calc_11: (+1)
   \   000000FE   0x2C01             CMP      R4,#+1
   \   00000100   0xDB19             BLT.N    ??CALC_Calc_13
    209          		if (camera.img[119][i] == camera.white && camera.img[119][i - 1] == camera.black)
   \   00000102   0xF8DF 0x0CF0      LDR.W    R0,??CALC_Calc_1+0x8
   \   00000106   0x1820             ADDS     R0,R4,R0
   \   00000108   0xF645 0x61D0      MOVW     R1,#+24272
   \   0000010C   0x5C08             LDRB     R0,[R1, R0]
   \   0000010E   0xF8DF 0x1CE4      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000112   0x6949             LDR      R1,[R1, #+20]
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xD1F1             BNE.N    ??CALC_Calc_12
   \   00000118   0xF8DF 0x0CD8      LDR.W    R0,??CALC_Calc_1+0x8
   \   0000011C   0x1820             ADDS     R0,R4,R0
   \   0000011E   0xF645 0x61CF      MOVW     R1,#+24271
   \   00000122   0x5C08             LDRB     R0,[R1, R0]
   \   00000124   0xF8DF 0x1CCC      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000128   0x6989             LDR      R1,[R1, #+24]
   \   0000012A   0x4288             CMP      R0,R1
   \   0000012C   0xD1E6             BNE.N    ??CALC_Calc_12
    210          		{
    211          			lineL[119] = i;
   \   0000012E   0xF8DF 0x0CD4      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000132   0xF8C0 0x41DC      STR      R4,[R0, #+476]
    212          			break;
    213          		}
    214          	if (i == 0)
   \                     ??CALC_Calc_13: (+1)
   \   00000136   0x2C00             CMP      R4,#+0
   \   00000138   0xD104             BNE.N    ??CALC_Calc_14
    215          		lineL[119] = 0;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0xF8DF 0x1CC4      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000140   0xF8C1 0x01DC      STR      R0,[R1, #+476]
    216          
    217          	if (lineL[119] > lineR[119]) // ÓÃÀ´·ÀÖ¹´ó¹ÕÍäÉãÏñÍ·¿´³öÈ¥µÄÇé¿ö
   \                     ??CALC_Calc_14: (+1)
   \   00000144   0xF8DF 0x0CB8      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000148   0xF8D0 0x01DC      LDR      R0,[R0, #+476]
   \   0000014C   0xF8DF 0x1CB4      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000150   0xF8D1 0x11DC      LDR      R1,[R1, #+476]
   \   00000154   0x4288             CMP      R0,R1
   \   00000156   0xDA24             BGE.N    ??CALC_Calc_15
    218          	{
    219          		if ((lineL[119] + lineR[119]) / 2 > 80)
   \   00000158   0xF8DF 0x0CA8      LDR.W    R0,??CALC_Calc_1+0x18
   \   0000015C   0xF8D0 0x01DC      LDR      R0,[R0, #+476]
   \   00000160   0xF8DF 0x1C9C      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000164   0xF8D1 0x11DC      LDR      R1,[R1, #+476]
   \   00000168   0x1808             ADDS     R0,R1,R0
   \   0000016A   0x2102             MOVS     R1,#+2
   \   0000016C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000170   0x2851             CMP      R0,#+81
   \   00000172   0xDB04             BLT.N    ??CALC_Calc_16
    220          			flag_stopR = 1;
   \   00000174   0x2001             MOVS     R0,#+1
   \   00000176   0xF8DF 0x1A34      LDR.W    R1,??CALC_Calc_0+0x14
   \   0000017A   0x6008             STR      R0,[R1, #+0]
   \   0000017C   0xE011             B.N      ??CALC_Calc_15
    221          		else if ((lineL[119] + lineR[119]) / 2 < 80)
   \                     ??CALC_Calc_16: (+1)
   \   0000017E   0xF8DF 0x0C84      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000182   0xF8D0 0x01DC      LDR      R0,[R0, #+476]
   \   00000186   0xF8DF 0x1C78      LDR.W    R1,??CALC_Calc_1+0x14
   \   0000018A   0xF8D1 0x11DC      LDR      R1,[R1, #+476]
   \   0000018E   0x1808             ADDS     R0,R1,R0
   \   00000190   0x2102             MOVS     R1,#+2
   \   00000192   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000196   0x2850             CMP      R0,#+80
   \   00000198   0xDA03             BGE.N    ??CALC_Calc_15
    222          			flag_stopL = 1;
   \   0000019A   0x2001             MOVS     R0,#+1
   \   0000019C   0xF8DF 0x1A08      LDR.W    R1,??CALC_Calc_0+0x10
   \   000001A0   0x6008             STR      R0,[R1, #+0]
    223          	}
    224          
    225          	/*---------------------------------------------------------------------------------------------------------*/
    226          
    227          	for (i = 118; i > 30; i--)
   \                     ??CALC_Calc_15: (+1)
   \   000001A2   0x2476             MOVS     R4,#+118
   \   000001A4   0xE000             B.N      ??CALC_Calc_17
   \                     ??CALC_Calc_18: (+1)
   \   000001A6   0x1E64             SUBS     R4,R4,#+1
   \                     ??CALC_Calc_17: (+1)
   \   000001A8   0x2C1F             CMP      R4,#+31
   \   000001AA   0xF2C0 0x86E8      BLT.W    ??CALC_Calc_19
    228          	{
    229          		// ÓÒ±ßÏßÏÂÒ»¸öµã
    230          		if (!flag_stopR)
   \   000001AE   0xF8DF 0x09FC      LDR.W    R0,??CALC_Calc_0+0x14
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0x2800             CMP      R0,#+0
   \   000001B6   0xF040 0x8121      BNE.W    ??CALC_Calc_20
    231          		{
    232          			lineR[i] = 0;
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0xF8DF 0x1C40      LDR.W    R1,??CALC_Calc_1+0x14
   \   000001C0   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    233          			for (j = 0; j < 40; j++) // ×óÉ¨
   \   000001C4   0x2700             MOVS     R7,#+0
   \   000001C6   0xE000             B.N      ??CALC_Calc_21
   \                     ??CALC_Calc_22: (+1)
   \   000001C8   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CALC_Calc_21: (+1)
   \   000001CA   0x2F28             CMP      R7,#+40
   \   000001CC   0xDA45             BGE.N    ??CALC_Calc_23
    234          			{
    235          				if (camera.img[i][limitX(lineR[i + 1] - j)] == camera.white && camera.img[i][limitX(lineR[i + 1] - j + 1)] == camera.black)
   \   000001CE   0xF8DF 0x0C30      LDR.W    R0,??CALC_Calc_1+0x14
   \   000001D2   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000001D6   0x6840             LDR      R0,[R0, #+4]
   \   000001D8   0x1BC0             SUBS     R0,R0,R7
   \   000001DA   0x.... 0x....      BL       limitX
   \   000001DE   0xF8DF 0x1C14      LDR.W    R1,??CALC_Calc_1+0x8
   \   000001E2   0x22A0             MOVS     R2,#+160
   \   000001E4   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   000001E8   0x1840             ADDS     R0,R0,R1
   \   000001EA   0xF241 0x4170      MOVW     R1,#+5232
   \   000001EE   0x5C08             LDRB     R0,[R1, R0]
   \   000001F0   0xF8DF 0x1C00      LDR.W    R1,??CALC_Calc_1+0x8
   \   000001F4   0x6949             LDR      R1,[R1, #+20]
   \   000001F6   0x4288             CMP      R0,R1
   \   000001F8   0xD123             BNE.N    ??CALC_Calc_24
   \   000001FA   0xF8DF 0x0C04      LDR.W    R0,??CALC_Calc_1+0x14
   \   000001FE   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000202   0x6840             LDR      R0,[R0, #+4]
   \   00000204   0x1BC0             SUBS     R0,R0,R7
   \   00000206   0x1C40             ADDS     R0,R0,#+1
   \   00000208   0x.... 0x....      BL       limitX
   \   0000020C   0xF8DF 0x1BE4      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000210   0x22A0             MOVS     R2,#+160
   \   00000212   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000216   0x1840             ADDS     R0,R0,R1
   \   00000218   0xF241 0x4170      MOVW     R1,#+5232
   \   0000021C   0x5C08             LDRB     R0,[R1, R0]
   \   0000021E   0xF8DF 0x1BD4      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000222   0x6989             LDR      R1,[R1, #+24]
   \   00000224   0x4288             CMP      R0,R1
   \   00000226   0xD10C             BNE.N    ??CALC_Calc_24
    236          				{
    237          					lineR[i] = limitX(lineR[i + 1] - j);
   \   00000228   0xF8DF 0x0BD4      LDR.W    R0,??CALC_Calc_1+0x14
   \   0000022C   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000230   0x6840             LDR      R0,[R0, #+4]
   \   00000232   0x1BC0             SUBS     R0,R0,R7
   \   00000234   0x.... 0x....      BL       limitX
   \   00000238   0xF8DF 0x1BC4      LDR.W    R1,??CALC_Calc_1+0x14
   \   0000023C   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    238          					break;
   \   00000240   0xE00B             B.N      ??CALC_Calc_23
    239          				}
    240          
    241          				if (lineR[i + 1] - j < 0) // ·ÀÖ¹ÉãÏñÍ·Éì³öÈ¥
   \                     ??CALC_Calc_24: (+1)
   \   00000242   0xF8DF 0x0BBC      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000246   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000024A   0x6840             LDR      R0,[R0, #+4]
   \   0000024C   0x1BC0             SUBS     R0,R0,R7
   \   0000024E   0x2800             CMP      R0,#+0
   \   00000250   0xD5BA             BPL.N    ??CALC_Calc_22
    242          				{
    243          					flag_stopR = 1;
   \   00000252   0x2001             MOVS     R0,#+1
   \   00000254   0xF8DF 0x1954      LDR.W    R1,??CALC_Calc_0+0x14
   \   00000258   0x6008             STR      R0,[R1, #+0]
    244          					break;
    245          				}
    246          			}
    247          			if (!lineR[i]) // ×óÉ¨²»µ½£¬ÓÒÉ¨
   \                     ??CALC_Calc_23: (+1)
   \   0000025A   0xF8DF 0x0BA4      LDR.W    R0,??CALC_Calc_1+0x14
   \   0000025E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000262   0x2800             CMP      R0,#+0
   \   00000264   0xD14B             BNE.N    ??CALC_Calc_25
    248          			{
    249          				for (j = 0; j < 40; j++)
   \   00000266   0x2700             MOVS     R7,#+0
   \   00000268   0xE000             B.N      ??CALC_Calc_26
   \                     ??CALC_Calc_27: (+1)
   \   0000026A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CALC_Calc_26: (+1)
   \   0000026C   0x2F28             CMP      R7,#+40
   \   0000026E   0xDA38             BGE.N    ??CALC_Calc_28
    250          				{
    251          					if (camera.img[i][limitX(lineR[i + 1] + j)] == camera.white && camera.img[i][limitX(lineR[i + 1] + j + 1)] == camera.black)
   \   00000270   0xF8DF 0x0B8C      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000274   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000278   0x6840             LDR      R0,[R0, #+4]
   \   0000027A   0x1838             ADDS     R0,R7,R0
   \   0000027C   0x.... 0x....      BL       limitX
   \   00000280   0xF8DF 0x1B70      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000284   0x22A0             MOVS     R2,#+160
   \   00000286   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   0000028A   0x1840             ADDS     R0,R0,R1
   \   0000028C   0xF241 0x4170      MOVW     R1,#+5232
   \   00000290   0x5C08             LDRB     R0,[R1, R0]
   \   00000292   0xF8DF 0x1B60      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000296   0x6949             LDR      R1,[R1, #+20]
   \   00000298   0x4288             CMP      R0,R1
   \   0000029A   0xD1E6             BNE.N    ??CALC_Calc_27
   \   0000029C   0xF8DF 0x0B60      LDR.W    R0,??CALC_Calc_1+0x14
   \   000002A0   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000002A4   0x6840             LDR      R0,[R0, #+4]
   \   000002A6   0x1838             ADDS     R0,R7,R0
   \   000002A8   0x1C40             ADDS     R0,R0,#+1
   \   000002AA   0x.... 0x....      BL       limitX
   \   000002AE   0xF8DF 0x1B44      LDR.W    R1,??CALC_Calc_1+0x8
   \   000002B2   0x22A0             MOVS     R2,#+160
   \   000002B4   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   000002B8   0x1840             ADDS     R0,R0,R1
   \   000002BA   0xF241 0x4170      MOVW     R1,#+5232
   \   000002BE   0x5C08             LDRB     R0,[R1, R0]
   \   000002C0   0xF8DF 0x1B30      LDR.W    R1,??CALC_Calc_1+0x8
   \   000002C4   0x6989             LDR      R1,[R1, #+24]
   \   000002C6   0x4288             CMP      R0,R1
   \   000002C8   0xD1CF             BNE.N    ??CALC_Calc_27
    252          					{
    253          						lineR[i] = limitX(lineR[i + 1] + j);
   \   000002CA   0xF8DF 0x0B34      LDR.W    R0,??CALC_Calc_1+0x14
   \   000002CE   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000002D2   0x6840             LDR      R0,[R0, #+4]
   \   000002D4   0x1838             ADDS     R0,R7,R0
   \   000002D6   0x.... 0x....      BL       limitX
   \   000002DA   0xF8DF 0x1B24      LDR.W    R1,??CALC_Calc_1+0x14
   \   000002DE   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    254          						break;
    255          					}
    256          				}
    257          				if (j == 40)
   \                     ??CALC_Calc_28: (+1)
   \   000002E2   0x2F28             CMP      R7,#+40
   \   000002E4   0xD10B             BNE.N    ??CALC_Calc_25
    258          					lineR[i] = limitX(lineR[i + 1] + j);
   \   000002E6   0xF8DF 0x0B18      LDR.W    R0,??CALC_Calc_1+0x14
   \   000002EA   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000002EE   0x6840             LDR      R0,[R0, #+4]
   \   000002F0   0x1838             ADDS     R0,R7,R0
   \   000002F2   0x.... 0x....      BL       limitX
   \   000002F6   0xF8DF 0x1B08      LDR.W    R1,??CALC_Calc_1+0x14
   \   000002FA   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    259          			}
    260          
    261          			// Òì³£ÍË³öÑ°Ïß
    262          			if (i < STOPLINE || // ÆÁ±ÎÇ½±Ú
    263          				(lineR[i] == 158 && i < 65 && (flag_startR || abs(lineR[i] - lineR[i + 1]) > 20)) || // Ê®×Ö
    264          				(i < 117 && lineR[i] - lineR[i + 1] > 10 && lineR[i + 1] - lineR[i + 2] > 10) || // q³öÏÖµÄÏÖÏóÒÔ¼°ÉãÏñÍ·Éì³öÈ¥
    265          				lineL[i + 1] > 130 // ±ßÏß²»´æÔÚµ«ÊÇ»¹ÔÚ¼ÌÐøÑ°
    266          				)
   \                     ??CALC_Calc_25: (+1)
   \   000002FE   0x2C32             CMP      R4,#+50
   \   00000300   0xDB39             BLT.N    ??CALC_Calc_29
   \   00000302   0xF8DF 0x0AFC      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000306   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000030A   0x289E             CMP      R0,#+158
   \   0000030C   0xD111             BNE.N    ??CALC_Calc_30
   \   0000030E   0x2C41             CMP      R4,#+65
   \   00000310   0xDA0F             BGE.N    ??CALC_Calc_30
   \   00000312   0x2E00             CMP      R6,#+0
   \   00000314   0xD12F             BNE.N    ??CALC_Calc_29
   \   00000316   0xF8DF 0x0AE8      LDR.W    R0,??CALC_Calc_1+0x14
   \   0000031A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000031E   0xF8DF 0x1AE0      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000322   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000326   0x6849             LDR      R1,[R1, #+4]
   \   00000328   0x1A40             SUBS     R0,R0,R1
   \   0000032A   0x.... 0x....      BL       abs
   \   0000032E   0x2815             CMP      R0,#+21
   \   00000330   0xDA21             BGE.N    ??CALC_Calc_29
   \                     ??CALC_Calc_30: (+1)
   \   00000332   0x2C75             CMP      R4,#+117
   \   00000334   0xDA18             BGE.N    ??CALC_Calc_31
   \   00000336   0xF8DF 0x0AC8      LDR.W    R0,??CALC_Calc_1+0x14
   \   0000033A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000033E   0xF8DF 0x1AC0      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000342   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000346   0x6849             LDR      R1,[R1, #+4]
   \   00000348   0x1A40             SUBS     R0,R0,R1
   \   0000034A   0x280B             CMP      R0,#+11
   \   0000034C   0xDB0C             BLT.N    ??CALC_Calc_31
   \   0000034E   0xF8DF 0x0AB0      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000352   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000356   0x6840             LDR      R0,[R0, #+4]
   \   00000358   0xF8DF 0x1AA4      LDR.W    R1,??CALC_Calc_1+0x14
   \   0000035C   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000360   0x6889             LDR      R1,[R1, #+8]
   \   00000362   0x1A40             SUBS     R0,R0,R1
   \   00000364   0x280B             CMP      R0,#+11
   \   00000366   0xDA06             BGE.N    ??CALC_Calc_29
   \                     ??CALC_Calc_31: (+1)
   \   00000368   0xF8DF 0x0A98      LDR.W    R0,??CALC_Calc_1+0x18
   \   0000036C   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000370   0x6840             LDR      R0,[R0, #+4]
   \   00000372   0x2883             CMP      R0,#+131
   \   00000374   0xDB09             BLT.N    ??CALC_Calc_32
    267          			{
    268          				flag_stopR = 1;
   \                     ??CALC_Calc_29: (+1)
   \   00000376   0x2001             MOVS     R0,#+1
   \   00000378   0xF8DF 0x1830      LDR.W    R1,??CALC_Calc_0+0x14
   \   0000037C   0x6008             STR      R0,[R1, #+0]
    269          				lineR[i] = -1;
   \   0000037E   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000382   0xF8DF 0x1A7C      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000386   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    270          				//break;
    271          			}
    272          
    273          			if (lineR[i] != 158 && !flag_startR)
   \                     ??CALC_Calc_32: (+1)
   \   0000038A   0xF8DF 0x0A74      LDR.W    R0,??CALC_Calc_1+0x14
   \   0000038E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000392   0x289E             CMP      R0,#+158
   \   00000394   0xD002             BEQ.N    ??CALC_Calc_33
   \   00000396   0x2E00             CMP      R6,#+0
   \   00000398   0xD100             BNE.N    ??CALC_Calc_33
    274          				flag_startR = i;
   \   0000039A   0x0026             MOVS     R6,R4
    275          
    276          			// µ÷ÊÔÓÃ£¬½«±ß½çÏß»­ÎªÐéÏß
    277          			if (twinCore.data[1] == 1100 || twinCore.data[1] == 1101)
   \                     ??CALC_Calc_33: (+1)
   \   0000039C   0x.... 0x....      LDR.W    R0,??DataTable0
   \   000003A0   0xF9B0 0x000E      LDRSH    R0,[R0, #+14]
   \   000003A4   0xF240 0x414C      MOVW     R1,#+1100
   \   000003A8   0x4288             CMP      R0,R1
   \   000003AA   0xD007             BEQ.N    ??CALC_Calc_34
   \   000003AC   0x.... 0x....      LDR.W    R0,??DataTable0
   \   000003B0   0xF9B0 0x000E      LDRSH    R0,[R0, #+14]
   \   000003B4   0xF240 0x414D      MOVW     R1,#+1101
   \   000003B8   0x4288             CMP      R0,R1
   \   000003BA   0xD11F             BNE.N    ??CALC_Calc_20
    278          			{
    279          				camera.img[i][lineR[i]] = camera.white;
   \                     ??CALC_Calc_34: (+1)
   \   000003BC   0xF8DF 0x0A34      LDR.W    R0,??CALC_Calc_1+0x8
   \   000003C0   0x21A0             MOVS     R1,#+160
   \   000003C2   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000003C6   0xF8DF 0x1A38      LDR.W    R1,??CALC_Calc_1+0x14
   \   000003CA   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000003CE   0x1808             ADDS     R0,R1,R0
   \   000003D0   0xF241 0x4170      MOVW     R1,#+5232
   \   000003D4   0xF8DF 0x2A1C      LDR.W    R2,??CALC_Calc_1+0x8
   \   000003D8   0x6952             LDR      R2,[R2, #+20]
   \   000003DA   0x540A             STRB     R2,[R1, R0]
    280          				camera.img[i][lineR[i] - 1] = camera.black;
   \   000003DC   0xF8DF 0x0A14      LDR.W    R0,??CALC_Calc_1+0x8
   \   000003E0   0x21A0             MOVS     R1,#+160
   \   000003E2   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000003E6   0xF8DF 0x1A18      LDR.W    R1,??CALC_Calc_1+0x14
   \   000003EA   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000003EE   0x1808             ADDS     R0,R1,R0
   \   000003F0   0xF241 0x416F      MOVW     R1,#+5231
   \   000003F4   0xF8DF 0x29FC      LDR.W    R2,??CALC_Calc_1+0x8
   \   000003F8   0x6992             LDR      R2,[R2, #+24]
   \   000003FA   0x540A             STRB     R2,[R1, R0]
    281          			}
    282          		}
    283          
    284          		/*---------------------------------------------------------------------------------------------------------*/
    285          
    286          		// ×ó±ßÏßÏÂÒ»¸öµã
    287          		if (!flag_stopL)
   \                     ??CALC_Calc_20: (+1)
   \   000003FC   0xF8DF 0x07A8      LDR.W    R0,??CALC_Calc_0+0x10
   \   00000400   0x6800             LDR      R0,[R0, #+0]
   \   00000402   0x2800             CMP      R0,#+0
   \   00000404   0xF040 0x8129      BNE.W    ??CALC_Calc_35
    288          		{
    289          			lineL[i] = 0;
   \   00000408   0x2000             MOVS     R0,#+0
   \   0000040A   0xF8DF 0x19F8      LDR.W    R1,??CALC_Calc_1+0x18
   \   0000040E   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    290          			for (j = 0; j < 40; j++) // ÓÒÉ¨
   \   00000412   0x2700             MOVS     R7,#+0
   \   00000414   0xE000             B.N      ??CALC_Calc_36
   \                     ??CALC_Calc_37: (+1)
   \   00000416   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CALC_Calc_36: (+1)
   \   00000418   0x2F28             CMP      R7,#+40
   \   0000041A   0xDA45             BGE.N    ??CALC_Calc_38
    291          			{
    292          				if (camera.img[i][limitX(lineL[i + 1] + j)] == camera.white && camera.img[i][limitX(lineL[i + 1] + j - 1)] == camera.black)
   \   0000041C   0xF8DF 0x09E4      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000420   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000424   0x6840             LDR      R0,[R0, #+4]
   \   00000426   0x1838             ADDS     R0,R7,R0
   \   00000428   0x.... 0x....      BL       limitX
   \   0000042C   0xF8DF 0x19C4      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000430   0x22A0             MOVS     R2,#+160
   \   00000432   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000436   0x1840             ADDS     R0,R0,R1
   \   00000438   0xF241 0x4170      MOVW     R1,#+5232
   \   0000043C   0x5C08             LDRB     R0,[R1, R0]
   \   0000043E   0xF8DF 0x19B4      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000442   0x6949             LDR      R1,[R1, #+20]
   \   00000444   0x4288             CMP      R0,R1
   \   00000446   0xD123             BNE.N    ??CALC_Calc_39
   \   00000448   0xF8DF 0x09B8      LDR.W    R0,??CALC_Calc_1+0x18
   \   0000044C   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000450   0x6840             LDR      R0,[R0, #+4]
   \   00000452   0x1838             ADDS     R0,R7,R0
   \   00000454   0x1E40             SUBS     R0,R0,#+1
   \   00000456   0x.... 0x....      BL       limitX
   \   0000045A   0xF8DF 0x1998      LDR.W    R1,??CALC_Calc_1+0x8
   \   0000045E   0x22A0             MOVS     R2,#+160
   \   00000460   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000464   0x1840             ADDS     R0,R0,R1
   \   00000466   0xF241 0x4170      MOVW     R1,#+5232
   \   0000046A   0x5C08             LDRB     R0,[R1, R0]
   \   0000046C   0xF8DF 0x1984      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000470   0x6989             LDR      R1,[R1, #+24]
   \   00000472   0x4288             CMP      R0,R1
   \   00000474   0xD10C             BNE.N    ??CALC_Calc_39
    293          				{
    294          					lineL[i] = limitX(lineL[i + 1] + j);
   \   00000476   0xF8DF 0x098C      LDR.W    R0,??CALC_Calc_1+0x18
   \   0000047A   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000047E   0x6840             LDR      R0,[R0, #+4]
   \   00000480   0x1838             ADDS     R0,R7,R0
   \   00000482   0x.... 0x....      BL       limitX
   \   00000486   0xF8DF 0x197C      LDR.W    R1,??CALC_Calc_1+0x18
   \   0000048A   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    295          					break;
   \   0000048E   0xE00B             B.N      ??CALC_Calc_38
    296          				}
    297          
    298          				if (lineL[i + 1] + j > 159)
   \                     ??CALC_Calc_39: (+1)
   \   00000490   0xF8DF 0x0970      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000494   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000498   0x6840             LDR      R0,[R0, #+4]
   \   0000049A   0x1838             ADDS     R0,R7,R0
   \   0000049C   0x28A0             CMP      R0,#+160
   \   0000049E   0xDBBA             BLT.N    ??CALC_Calc_37
    299          				{
    300          					flag_stopL = 1;
   \   000004A0   0x2001             MOVS     R0,#+1
   \   000004A2   0xF8DF 0x1704      LDR.W    R1,??CALC_Calc_0+0x10
   \   000004A6   0x6008             STR      R0,[R1, #+0]
    301          					break;
    302          				}
    303          			}
    304          			if (!lineL[i]) // ÓÒÉ¨²»µ½
   \                     ??CALC_Calc_38: (+1)
   \   000004A8   0xF8DF 0x0958      LDR.W    R0,??CALC_Calc_1+0x18
   \   000004AC   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000004B0   0x2800             CMP      R0,#+0
   \   000004B2   0xD14B             BNE.N    ??CALC_Calc_40
    305          			{
    306          				for (j = 0; j < 40; j++)
   \   000004B4   0x2700             MOVS     R7,#+0
   \   000004B6   0xE000             B.N      ??CALC_Calc_41
   \                     ??CALC_Calc_42: (+1)
   \   000004B8   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CALC_Calc_41: (+1)
   \   000004BA   0x2F28             CMP      R7,#+40
   \   000004BC   0xDA38             BGE.N    ??CALC_Calc_43
    307          				{
    308          					if (camera.img[i][limitX(lineL[i + 1] - j)] == camera.white && camera.img[i][limitX(lineL[i + 1] - j - 1)] == camera.black)
   \   000004BE   0xF8DF 0x0944      LDR.W    R0,??CALC_Calc_1+0x18
   \   000004C2   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000004C6   0x6840             LDR      R0,[R0, #+4]
   \   000004C8   0x1BC0             SUBS     R0,R0,R7
   \   000004CA   0x.... 0x....      BL       limitX
   \   000004CE   0xF8DF 0x1924      LDR.W    R1,??CALC_Calc_1+0x8
   \   000004D2   0x22A0             MOVS     R2,#+160
   \   000004D4   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   000004D8   0x1840             ADDS     R0,R0,R1
   \   000004DA   0xF241 0x4170      MOVW     R1,#+5232
   \   000004DE   0x5C08             LDRB     R0,[R1, R0]
   \   000004E0   0xF8DF 0x1910      LDR.W    R1,??CALC_Calc_1+0x8
   \   000004E4   0x6949             LDR      R1,[R1, #+20]
   \   000004E6   0x4288             CMP      R0,R1
   \   000004E8   0xD1E6             BNE.N    ??CALC_Calc_42
   \   000004EA   0xF8DF 0x0918      LDR.W    R0,??CALC_Calc_1+0x18
   \   000004EE   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000004F2   0x6840             LDR      R0,[R0, #+4]
   \   000004F4   0x1BC0             SUBS     R0,R0,R7
   \   000004F6   0x1E40             SUBS     R0,R0,#+1
   \   000004F8   0x.... 0x....      BL       limitX
   \   000004FC   0xF8DF 0x18F4      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000500   0x22A0             MOVS     R2,#+160
   \   00000502   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000506   0x1840             ADDS     R0,R0,R1
   \   00000508   0xF241 0x4170      MOVW     R1,#+5232
   \   0000050C   0x5C08             LDRB     R0,[R1, R0]
   \   0000050E   0xF8DF 0x18E4      LDR.W    R1,??CALC_Calc_1+0x8
   \   00000512   0x6989             LDR      R1,[R1, #+24]
   \   00000514   0x4288             CMP      R0,R1
   \   00000516   0xD1CF             BNE.N    ??CALC_Calc_42
    309          					{
    310          						lineL[i] = limitX(lineL[i + 1] - j);
   \   00000518   0xF8DF 0x08E8      LDR.W    R0,??CALC_Calc_1+0x18
   \   0000051C   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000520   0x6840             LDR      R0,[R0, #+4]
   \   00000522   0x1BC0             SUBS     R0,R0,R7
   \   00000524   0x.... 0x....      BL       limitX
   \   00000528   0xF8DF 0x18D8      LDR.W    R1,??CALC_Calc_1+0x18
   \   0000052C   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    311          						break;
    312          					}
    313          				}
    314          				if (j == 40)
   \                     ??CALC_Calc_43: (+1)
   \   00000530   0x2F28             CMP      R7,#+40
   \   00000532   0xD10B             BNE.N    ??CALC_Calc_40
    315          					lineL[i] = limitX(lineL[i + 1] - j);
   \   00000534   0xF8DF 0x08CC      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000538   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000053C   0x6840             LDR      R0,[R0, #+4]
   \   0000053E   0x1BC0             SUBS     R0,R0,R7
   \   00000540   0x.... 0x....      BL       limitX
   \   00000544   0xF8DF 0x18BC      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000548   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    316          			}
    317          
    318          			// Òì³£
    319          			if (i < STOPLINE ||
    320          				(lineL[i] == 1 && i < 65 && (flag_startL || abs(lineL[i] - lineL[i + 1]) > 20)) ||
    321          				(i < 117 && lineL[i + 1] - lineL[i] > 10 && lineL[i + 2] - lineL[i + 1] > 10) ||
    322          				(lineR[i + 1] < 30 && lineR[i + 1] != -1))
   \                     ??CALC_Calc_40: (+1)
   \   0000054C   0x2C32             CMP      R4,#+50
   \   0000054E   0xDB41             BLT.N    ??CALC_Calc_44
   \   00000550   0xF8DF 0x08B0      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000554   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000558   0x2801             CMP      R0,#+1
   \   0000055A   0xD111             BNE.N    ??CALC_Calc_45
   \   0000055C   0x2C41             CMP      R4,#+65
   \   0000055E   0xDA0F             BGE.N    ??CALC_Calc_45
   \   00000560   0x2D00             CMP      R5,#+0
   \   00000562   0xD137             BNE.N    ??CALC_Calc_44
   \   00000564   0xF8DF 0x089C      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000568   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000056C   0xF8DF 0x1894      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000570   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000574   0x6849             LDR      R1,[R1, #+4]
   \   00000576   0x1A40             SUBS     R0,R0,R1
   \   00000578   0x.... 0x....      BL       abs
   \   0000057C   0x2815             CMP      R0,#+21
   \   0000057E   0xDA29             BGE.N    ??CALC_Calc_44
   \                     ??CALC_Calc_45: (+1)
   \   00000580   0x2C75             CMP      R4,#+117
   \   00000582   0xDA18             BGE.N    ??CALC_Calc_46
   \   00000584   0xF8DF 0x087C      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000588   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000058C   0x6840             LDR      R0,[R0, #+4]
   \   0000058E   0xF8DF 0x1874      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000592   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000596   0x1A40             SUBS     R0,R0,R1
   \   00000598   0x280B             CMP      R0,#+11
   \   0000059A   0xDB0C             BLT.N    ??CALC_Calc_46
   \   0000059C   0xF8DF 0x0864      LDR.W    R0,??CALC_Calc_1+0x18
   \   000005A0   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000005A4   0x6880             LDR      R0,[R0, #+8]
   \   000005A6   0xF8DF 0x185C      LDR.W    R1,??CALC_Calc_1+0x18
   \   000005AA   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000005AE   0x6849             LDR      R1,[R1, #+4]
   \   000005B0   0x1A40             SUBS     R0,R0,R1
   \   000005B2   0x280B             CMP      R0,#+11
   \   000005B4   0xDA0E             BGE.N    ??CALC_Calc_44
   \                     ??CALC_Calc_46: (+1)
   \   000005B6   0xF8DF 0x0848      LDR.W    R0,??CALC_Calc_1+0x14
   \   000005BA   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000005BE   0x6840             LDR      R0,[R0, #+4]
   \   000005C0   0x281E             CMP      R0,#+30
   \   000005C2   0xDA11             BGE.N    ??CALC_Calc_47
   \   000005C4   0xF8DF 0x0838      LDR.W    R0,??CALC_Calc_1+0x14
   \   000005C8   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000005CC   0x6840             LDR      R0,[R0, #+4]
   \   000005CE   0xF110 0x0F01      CMN      R0,#+1
   \   000005D2   0xD009             BEQ.N    ??CALC_Calc_47
    323          			{
    324          				flag_stopL = 1;
   \                     ??CALC_Calc_44: (+1)
   \   000005D4   0x2001             MOVS     R0,#+1
   \   000005D6   0xF8DF 0x15D0      LDR.W    R1,??CALC_Calc_0+0x10
   \   000005DA   0x6008             STR      R0,[R1, #+0]
    325          				lineL[i] = -1;
   \   000005DC   0xF05F 0x30FF      MOVS     R0,#-1
   \   000005E0   0xF8DF 0x1820      LDR.W    R1,??CALC_Calc_1+0x18
   \   000005E4   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    326          				//break;
    327          			}
    328          
    329          			if (lineL[i] != 1 && !flag_startL)
   \                     ??CALC_Calc_47: (+1)
   \   000005E8   0xF8DF 0x0818      LDR.W    R0,??CALC_Calc_1+0x18
   \   000005EC   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000005F0   0x2801             CMP      R0,#+1
   \   000005F2   0xD002             BEQ.N    ??CALC_Calc_48
   \   000005F4   0x2D00             CMP      R5,#+0
   \   000005F6   0xD100             BNE.N    ??CALC_Calc_48
    330          				flag_startL = i;
   \   000005F8   0x0025             MOVS     R5,R4
    331          
    332          			// µ÷ÊÔ
    333          			if (twinCore.data[1] == 1100 || twinCore.data[1] == 1101)
   \                     ??CALC_Calc_48: (+1)
   \   000005FA   0x.... 0x....      LDR.W    R0,??DataTable0
   \   000005FE   0xF9B0 0x000E      LDRSH    R0,[R0, #+14]
   \   00000602   0xF240 0x414C      MOVW     R1,#+1100
   \   00000606   0x4288             CMP      R0,R1
   \   00000608   0xD007             BEQ.N    ??CALC_Calc_49
   \   0000060A   0x.... 0x....      LDR.W    R0,??DataTable0
   \   0000060E   0xF9B0 0x000E      LDRSH    R0,[R0, #+14]
   \   00000612   0xF240 0x414D      MOVW     R1,#+1101
   \   00000616   0x4288             CMP      R0,R1
   \   00000618   0xD11F             BNE.N    ??CALC_Calc_35
    334          			{
    335          				camera.img[i][lineL[i] - 1] = camera.white;
   \                     ??CALC_Calc_49: (+1)
   \   0000061A   0xF8DF 0x07D8      LDR.W    R0,??CALC_Calc_1+0x8
   \   0000061E   0x21A0             MOVS     R1,#+160
   \   00000620   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000624   0xF8DF 0x17DC      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000628   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000062C   0x1808             ADDS     R0,R1,R0
   \   0000062E   0xF241 0x416F      MOVW     R1,#+5231
   \   00000632   0xF8DF 0x27C0      LDR.W    R2,??CALC_Calc_1+0x8
   \   00000636   0x6952             LDR      R2,[R2, #+20]
   \   00000638   0x540A             STRB     R2,[R1, R0]
    336          				camera.img[i][lineL[i]] = camera.black;
   \   0000063A   0xF8DF 0x07B8      LDR.W    R0,??CALC_Calc_1+0x8
   \   0000063E   0x21A0             MOVS     R1,#+160
   \   00000640   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000644   0xF8DF 0x17BC      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000648   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000064C   0x1808             ADDS     R0,R1,R0
   \   0000064E   0xF241 0x4170      MOVW     R1,#+5232
   \   00000652   0xF8DF 0x27A0      LDR.W    R2,??CALC_Calc_1+0x8
   \   00000656   0x6992             LDR      R2,[R2, #+24]
   \   00000658   0x540A             STRB     R2,[R1, R0]
    337          			}
    338          		}
    339          
    340          		/*---------------------------------------------------------------------------------------------------------*/
    341          
    342          		// ÕÒÌø±äµã
    343          		if (i < 117)
   \                     ??CALC_Calc_35: (+1)
   \   0000065A   0x2C75             CMP      R4,#+117
   \   0000065C   0xF280 0x82D9      BGE.W    ??CALC_Calc_50
    344          		{
    345          			if (!flag_stopR)
   \   00000660   0xF8DF 0x0548      LDR.W    R0,??CALC_Calc_0+0x14
   \   00000664   0x6800             LDR      R0,[R0, #+0]
   \   00000666   0x2800             CMP      R0,#+0
   \   00000668   0xF040 0x816E      BNE.W    ??CALC_Calc_51
    346          			{
    347          				// ÓÒ±ßÏß×óÌøÓÒ
    348          				if (i < 100 && lineR[i] <= lineR[i + 1] && lineR[i + 1] > lineR[i + 2] && (curJumpR == 2 || !curJumpR))
   \   0000066C   0x2C64             CMP      R4,#+100
   \   0000066E   0xF280 0x8091      BGE.W    ??CALC_Calc_52
   \   00000672   0xF8DF 0x078C      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000676   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000067A   0x6840             LDR      R0,[R0, #+4]
   \   0000067C   0xF8DF 0x1780      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000680   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000684   0x4288             CMP      R0,R1
   \   00000686   0xF2C0 0x8085      BLT.W    ??CALC_Calc_52
   \   0000068A   0xF8DF 0x0774      LDR.W    R0,??CALC_Calc_1+0x14
   \   0000068E   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000692   0x6880             LDR      R0,[R0, #+8]
   \   00000694   0xF8DF 0x1768      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000698   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000069C   0x6849             LDR      R1,[R1, #+4]
   \   0000069E   0x4288             CMP      R0,R1
   \   000006A0   0xDA78             BGE.N    ??CALC_Calc_52
   \   000006A2   0xF8DF 0x04F4      LDR.W    R0,??CALC_Calc_0
   \   000006A6   0x6800             LDR      R0,[R0, #+0]
   \   000006A8   0x2802             CMP      R0,#+2
   \   000006AA   0xD004             BEQ.N    ??CALC_Calc_53
   \   000006AC   0xF8DF 0x04E8      LDR.W    R0,??CALC_Calc_0
   \   000006B0   0x6800             LDR      R0,[R0, #+0]
   \   000006B2   0x2800             CMP      R0,#+0
   \   000006B4   0xD16E             BNE.N    ??CALC_Calc_52
    349          				{
    350          					// ÇãÐ±Çé¿ö
    351          					for (j = i; j < i + 20; j++)
   \                     ??CALC_Calc_53: (+1)
   \   000006B6   0x0027             MOVS     R7,R4
   \   000006B8   0xE01E             B.N      ??CALC_Calc_54
    352          					{
    353          						if (lineR[j] > lineR[j + 1] && lineR[j + 1] <= lineR[j + 2] && abs(lineR[i] - lineR[j]) > 5)
    354          						{
    355          							if (!curJumpR)
    356          							{
    357          								if (i < FIRSTJUMP)
    358          								{
    359          									flag_stopR = 1;
    360          									lineR[i] = -1;
    361          									break;
    362          								}
    363          
    364          								curJumpR = 1;
    365          								cntJumpR++;
    366          								posJumpR[cntJumpR] = i;
    367          							}
    368          							else if (abs(i - posJumpR[cntJumpR]) > 10)
   \                     ??CALC_Calc_55: (+1)
   \   000006BA   0x.... 0x....      LDR.W    R0,??DataTable2
   \   000006BE   0xF8DF 0x14E0      LDR.W    R1,??CALC_Calc_0+0x8
   \   000006C2   0x6809             LDR      R1,[R1, #+0]
   \   000006C4   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000006C8   0x1A20             SUBS     R0,R4,R0
   \   000006CA   0x.... 0x....      BL       abs
   \   000006CE   0x280B             CMP      R0,#+11
   \   000006D0   0xDB11             BLT.N    ??CALC_Calc_56
    369          							{
    370          								curJumpR = 1;
   \   000006D2   0x2001             MOVS     R0,#+1
   \   000006D4   0xF8DF 0x14C0      LDR.W    R1,??CALC_Calc_0
   \   000006D8   0x6008             STR      R0,[R1, #+0]
    371          								cntJumpR++;
   \   000006DA   0xF8DF 0x04C4      LDR.W    R0,??CALC_Calc_0+0x8
   \   000006DE   0x6800             LDR      R0,[R0, #+0]
   \   000006E0   0x1C40             ADDS     R0,R0,#+1
   \   000006E2   0xF8DF 0x14BC      LDR.W    R1,??CALC_Calc_0+0x8
   \   000006E6   0x6008             STR      R0,[R1, #+0]
    372          								posJumpR[cntJumpR] = i;
   \   000006E8   0x.... 0x....      LDR.W    R0,??DataTable2
   \   000006EC   0xF8DF 0x14B0      LDR.W    R1,??CALC_Calc_0+0x8
   \   000006F0   0x6809             LDR      R1,[R1, #+0]
   \   000006F2   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
    373          							}
   \                     ??CALC_Calc_56: (+1)
   \   000006F6   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CALC_Calc_54: (+1)
   \   000006F8   0xF114 0x0014      ADDS     R0,R4,#+20
   \   000006FC   0x4287             CMP      R7,R0
   \   000006FE   0xF280 0x80B9      BGE.W    ??CALC_Calc_57
   \   00000702   0xF8DF 0x06FC      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000706   0xEB10 0x0087      ADDS     R0,R0,R7, LSL #+2
   \   0000070A   0x6840             LDR      R0,[R0, #+4]
   \   0000070C   0xF8DF 0x16F0      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000710   0xF851 0x1027      LDR      R1,[R1, R7, LSL #+2]
   \   00000714   0x4288             CMP      R0,R1
   \   00000716   0xDAEE             BGE.N    ??CALC_Calc_56
   \   00000718   0xF8DF 0x06E4      LDR.W    R0,??CALC_Calc_1+0x14
   \   0000071C   0xEB10 0x0087      ADDS     R0,R0,R7, LSL #+2
   \   00000720   0x6880             LDR      R0,[R0, #+8]
   \   00000722   0xF8DF 0x16DC      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000726   0xEB11 0x0187      ADDS     R1,R1,R7, LSL #+2
   \   0000072A   0x6849             LDR      R1,[R1, #+4]
   \   0000072C   0x4288             CMP      R0,R1
   \   0000072E   0xDBE2             BLT.N    ??CALC_Calc_56
   \   00000730   0xF8DF 0x06CC      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000734   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000738   0xF8DF 0x16C4      LDR.W    R1,??CALC_Calc_1+0x14
   \   0000073C   0xF851 0x1027      LDR      R1,[R1, R7, LSL #+2]
   \   00000740   0x1A40             SUBS     R0,R0,R1
   \   00000742   0x.... 0x....      BL       abs
   \   00000746   0x2806             CMP      R0,#+6
   \   00000748   0xDBD5             BLT.N    ??CALC_Calc_56
   \   0000074A   0xF8DF 0x044C      LDR.W    R0,??CALC_Calc_0
   \   0000074E   0x6800             LDR      R0,[R0, #+0]
   \   00000750   0x2800             CMP      R0,#+0
   \   00000752   0xD1B2             BNE.N    ??CALC_Calc_55
   \   00000754   0x2C3C             CMP      R4,#+60
   \   00000756   0xDA0A             BGE.N    ??CALC_Calc_58
   \   00000758   0x2001             MOVS     R0,#+1
   \   0000075A   0xF8DF 0x1450      LDR.W    R1,??CALC_Calc_0+0x14
   \   0000075E   0x6008             STR      R0,[R1, #+0]
   \   00000760   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000764   0xF8DF 0x1698      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000768   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   0000076C   0xE082             B.N      ??CALC_Calc_57
   \                     ??CALC_Calc_58: (+1)
   \   0000076E   0x2001             MOVS     R0,#+1
   \   00000770   0xF8DF 0x1424      LDR.W    R1,??CALC_Calc_0
   \   00000774   0x6008             STR      R0,[R1, #+0]
   \   00000776   0xF8DF 0x0428      LDR.W    R0,??CALC_Calc_0+0x8
   \   0000077A   0x6800             LDR      R0,[R0, #+0]
   \   0000077C   0x1C40             ADDS     R0,R0,#+1
   \   0000077E   0xF8DF 0x1420      LDR.W    R1,??CALC_Calc_0+0x8
   \   00000782   0x6008             STR      R0,[R1, #+0]
   \   00000784   0x.... 0x....      LDR.W    R0,??DataTable2
   \   00000788   0xF8DF 0x1414      LDR.W    R1,??CALC_Calc_0+0x8
   \   0000078C   0x6809             LDR      R1,[R1, #+0]
   \   0000078E   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
   \   00000792   0xE7B0             B.N      ??CALC_Calc_56
    374          						}
    375          					}
    376          				}
    377          				else if (lineR[i] - lineR[i + 1] > lineR[i + 2] - lineR[i + 1] + 3 && lineR[i] > lineR[i + 1] && (curJumpR == 2 || !curJumpR))
   \                     ??CALC_Calc_52: (+1)
   \   00000794   0xF8DF 0x0668      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000798   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000079C   0x6880             LDR      R0,[R0, #+8]
   \   0000079E   0xF8DF 0x1660      LDR.W    R1,??CALC_Calc_1+0x14
   \   000007A2   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000007A6   0x6849             LDR      R1,[R1, #+4]
   \   000007A8   0x1A40             SUBS     R0,R0,R1
   \   000007AA   0x1CC0             ADDS     R0,R0,#+3
   \   000007AC   0xF8DF 0x1650      LDR.W    R1,??CALC_Calc_1+0x14
   \   000007B0   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000007B4   0xF8DF 0x2648      LDR.W    R2,??CALC_Calc_1+0x14
   \   000007B8   0xEB12 0x0284      ADDS     R2,R2,R4, LSL #+2
   \   000007BC   0x6852             LDR      R2,[R2, #+4]
   \   000007BE   0x1A89             SUBS     R1,R1,R2
   \   000007C0   0x4288             CMP      R0,R1
   \   000007C2   0xDA57             BGE.N    ??CALC_Calc_57
   \   000007C4   0xF8DF 0x0638      LDR.W    R0,??CALC_Calc_1+0x14
   \   000007C8   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000007CC   0x6840             LDR      R0,[R0, #+4]
   \   000007CE   0xF8DF 0x1630      LDR.W    R1,??CALC_Calc_1+0x14
   \   000007D2   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000007D6   0x4288             CMP      R0,R1
   \   000007D8   0xDA4C             BGE.N    ??CALC_Calc_57
   \   000007DA   0xF8DF 0x03BC      LDR.W    R0,??CALC_Calc_0
   \   000007DE   0x6800             LDR      R0,[R0, #+0]
   \   000007E0   0x2802             CMP      R0,#+2
   \   000007E2   0xD004             BEQ.N    ??CALC_Calc_59
   \   000007E4   0xF8DF 0x03B0      LDR.W    R0,??CALC_Calc_0
   \   000007E8   0x6800             LDR      R0,[R0, #+0]
   \   000007EA   0x2800             CMP      R0,#+0
   \   000007EC   0xD142             BNE.N    ??CALC_Calc_57
    378          				{
    379          					// Õý³£Çé¿ö
    380          					if (!curJumpR)
   \                     ??CALC_Calc_59: (+1)
   \   000007EE   0xF8DF 0x03A8      LDR.W    R0,??CALC_Calc_0
   \   000007F2   0x6800             LDR      R0,[R0, #+0]
   \   000007F4   0x2800             CMP      R0,#+0
   \   000007F6   0xD11F             BNE.N    ??CALC_Calc_60
    381          					{
    382          						if (i < FIRSTJUMP)
   \   000007F8   0x2C3C             CMP      R4,#+60
   \   000007FA   0xDA0A             BGE.N    ??CALC_Calc_61
    383          						{
    384          							flag_stopR = 1;
   \   000007FC   0x2001             MOVS     R0,#+1
   \   000007FE   0xF8DF 0x13AC      LDR.W    R1,??CALC_Calc_0+0x14
   \   00000802   0x6008             STR      R0,[R1, #+0]
    385          							lineR[i] = -1;
   \   00000804   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000808   0xF8DF 0x15F4      LDR.W    R1,??CALC_Calc_1+0x14
   \   0000080C   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000810   0xE030             B.N      ??CALC_Calc_57
    386          						}
    387          						else
    388          						{
    389          							curJumpR = 1;
   \                     ??CALC_Calc_61: (+1)
   \   00000812   0x2001             MOVS     R0,#+1
   \   00000814   0xF8DF 0x1380      LDR.W    R1,??CALC_Calc_0
   \   00000818   0x6008             STR      R0,[R1, #+0]
    390          							cntJumpR++;
   \   0000081A   0xF8DF 0x0384      LDR.W    R0,??CALC_Calc_0+0x8
   \   0000081E   0x6800             LDR      R0,[R0, #+0]
   \   00000820   0x1C40             ADDS     R0,R0,#+1
   \   00000822   0xF8DF 0x137C      LDR.W    R1,??CALC_Calc_0+0x8
   \   00000826   0x6008             STR      R0,[R1, #+0]
    391          							posJumpR[cntJumpR] = i;
   \   00000828   0x.... 0x....      LDR.W    R0,??DataTable2
   \   0000082C   0xF8DF 0x1370      LDR.W    R1,??CALC_Calc_0+0x8
   \   00000830   0x6809             LDR      R1,[R1, #+0]
   \   00000832   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
   \   00000836   0xE01D             B.N      ??CALC_Calc_57
    392          						}
    393          					}
    394          					else if (abs(i - posJumpR[cntJumpR]) > 10)
   \                     ??CALC_Calc_60: (+1)
   \   00000838   0x.... 0x....      LDR.W    R0,??DataTable2
   \   0000083C   0xF8DF 0x1360      LDR.W    R1,??CALC_Calc_0+0x8
   \   00000840   0x6809             LDR      R1,[R1, #+0]
   \   00000842   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000846   0x1A20             SUBS     R0,R4,R0
   \   00000848   0x.... 0x....      BL       abs
   \   0000084C   0x280B             CMP      R0,#+11
   \   0000084E   0xDB11             BLT.N    ??CALC_Calc_57
    395          					{
    396          						curJumpR = 1;
   \   00000850   0x2001             MOVS     R0,#+1
   \   00000852   0xF8DF 0x1344      LDR.W    R1,??CALC_Calc_0
   \   00000856   0x6008             STR      R0,[R1, #+0]
    397          						cntJumpR++;
   \   00000858   0xF8DF 0x0344      LDR.W    R0,??CALC_Calc_0+0x8
   \   0000085C   0x6800             LDR      R0,[R0, #+0]
   \   0000085E   0x1C40             ADDS     R0,R0,#+1
   \   00000860   0xF8DF 0x133C      LDR.W    R1,??CALC_Calc_0+0x8
   \   00000864   0x6008             STR      R0,[R1, #+0]
    398          						posJumpR[cntJumpR] = i;
   \   00000866   0x.... 0x....      LDR.W    R0,??DataTable2
   \   0000086A   0xF8DF 0x1334      LDR.W    R1,??CALC_Calc_0+0x8
   \   0000086E   0x6809             LDR      R1,[R1, #+0]
   \   00000870   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
    399          					}
    400          				}
    401          
    402          				// ÓÒ±ßÏßÓÒÌø×ó
    403          				if (lineR[i + 1] != 158 && lineR[i + 1] - lineR[i] > lineR[i + 2] - lineR[i + 1] + 3 && lineR[i + 1] > lineR[i] && (curJumpR == 1 || !curJumpR))
   \                     ??CALC_Calc_57: (+1)
   \   00000874   0xF8DF 0x0588      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000878   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000087C   0x6840             LDR      R0,[R0, #+4]
   \   0000087E   0x289E             CMP      R0,#+158
   \   00000880   0xD062             BEQ.N    ??CALC_Calc_51
   \   00000882   0xF8DF 0x057C      LDR.W    R0,??CALC_Calc_1+0x14
   \   00000886   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000088A   0x6880             LDR      R0,[R0, #+8]
   \   0000088C   0xF8DF 0x1570      LDR.W    R1,??CALC_Calc_1+0x14
   \   00000890   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000894   0x6849             LDR      R1,[R1, #+4]
   \   00000896   0x1A40             SUBS     R0,R0,R1
   \   00000898   0x1CC0             ADDS     R0,R0,#+3
   \   0000089A   0xF8DF 0x1564      LDR.W    R1,??CALC_Calc_1+0x14
   \   0000089E   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000008A2   0x6849             LDR      R1,[R1, #+4]
   \   000008A4   0xF8DF 0x2558      LDR.W    R2,??CALC_Calc_1+0x14
   \   000008A8   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   000008AC   0x1A89             SUBS     R1,R1,R2
   \   000008AE   0x4288             CMP      R0,R1
   \   000008B0   0xDA4A             BGE.N    ??CALC_Calc_51
   \   000008B2   0xF8DF 0x054C      LDR.W    R0,??CALC_Calc_1+0x14
   \   000008B6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000008BA   0xF8DF 0x1544      LDR.W    R1,??CALC_Calc_1+0x14
   \   000008BE   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000008C2   0x6849             LDR      R1,[R1, #+4]
   \   000008C4   0x4288             CMP      R0,R1
   \   000008C6   0xDA3F             BGE.N    ??CALC_Calc_51
   \   000008C8   0x48B3             LDR.N    R0,??CALC_Calc_0
   \   000008CA   0x6800             LDR      R0,[R0, #+0]
   \   000008CC   0x2801             CMP      R0,#+1
   \   000008CE   0xD003             BEQ.N    ??CALC_Calc_62
   \   000008D0   0x48B1             LDR.N    R0,??CALC_Calc_0
   \   000008D2   0x6800             LDR      R0,[R0, #+0]
   \   000008D4   0x2800             CMP      R0,#+0
   \   000008D6   0xD137             BNE.N    ??CALC_Calc_51
    404          				{
    405          					// Ö»¿¼ÂÇÕý³£Çé¿ö
    406          					if (!curJumpR)
   \                     ??CALC_Calc_62: (+1)
   \   000008D8   0x48AF             LDR.N    R0,??CALC_Calc_0
   \   000008DA   0x6800             LDR      R0,[R0, #+0]
   \   000008DC   0x2800             CMP      R0,#+0
   \   000008DE   0xD11A             BNE.N    ??CALC_Calc_63
    407          					{
    408          						if (i < FIRSTJUMP)
   \   000008E0   0x2C3C             CMP      R4,#+60
   \   000008E2   0xDA09             BGE.N    ??CALC_Calc_64
    409          						{
    410          							flag_stopR = 1;
   \   000008E4   0x2001             MOVS     R0,#+1
   \   000008E6   0x49B1             LDR.N    R1,??CALC_Calc_0+0x14
   \   000008E8   0x6008             STR      R0,[R1, #+0]
    411          							lineR[i] = -1;
   \   000008EA   0xF05F 0x30FF      MOVS     R0,#-1
   \   000008EE   0xF8DF 0x1510      LDR.W    R1,??CALC_Calc_1+0x14
   \   000008F2   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   000008F6   0xE027             B.N      ??CALC_Calc_51
    412          						}
    413          						else
    414          						{
    415          							curJumpR = 2;
   \                     ??CALC_Calc_64: (+1)
   \   000008F8   0x2002             MOVS     R0,#+2
   \   000008FA   0x49A7             LDR.N    R1,??CALC_Calc_0
   \   000008FC   0x6008             STR      R0,[R1, #+0]
    416          							cntJumpR++;
   \   000008FE   0x48A8             LDR.N    R0,??CALC_Calc_0+0x8
   \   00000900   0x6800             LDR      R0,[R0, #+0]
   \   00000902   0x1C40             ADDS     R0,R0,#+1
   \   00000904   0x49A6             LDR.N    R1,??CALC_Calc_0+0x8
   \   00000906   0x6008             STR      R0,[R1, #+0]
    417          							posJumpR[cntJumpR] = i;
   \   00000908   0x.... 0x....      LDR.W    R0,??DataTable2
   \   0000090C   0x49A4             LDR.N    R1,??CALC_Calc_0+0x8
   \   0000090E   0x6809             LDR      R1,[R1, #+0]
   \   00000910   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
   \   00000914   0xE018             B.N      ??CALC_Calc_51
    418          						}
    419          					}
    420          					else if (abs(i - posJumpR[cntJumpR]) > 10)
   \                     ??CALC_Calc_63: (+1)
   \   00000916   0x.... 0x....      LDR.W    R0,??DataTable2
   \   0000091A   0x49A1             LDR.N    R1,??CALC_Calc_0+0x8
   \   0000091C   0x6809             LDR      R1,[R1, #+0]
   \   0000091E   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000922   0x1A20             SUBS     R0,R4,R0
   \   00000924   0x.... 0x....      BL       abs
   \   00000928   0x280B             CMP      R0,#+11
   \   0000092A   0xDB0D             BLT.N    ??CALC_Calc_51
    421          					{
    422          						curJumpR = 2;
   \   0000092C   0x2002             MOVS     R0,#+2
   \   0000092E   0x499A             LDR.N    R1,??CALC_Calc_0
   \   00000930   0x6008             STR      R0,[R1, #+0]
    423          						cntJumpR++;
   \   00000932   0x489B             LDR.N    R0,??CALC_Calc_0+0x8
   \   00000934   0x6800             LDR      R0,[R0, #+0]
   \   00000936   0x1C40             ADDS     R0,R0,#+1
   \   00000938   0x4999             LDR.N    R1,??CALC_Calc_0+0x8
   \   0000093A   0x6008             STR      R0,[R1, #+0]
    424          						posJumpR[cntJumpR] = i;
   \   0000093C   0x.... 0x....      LDR.W    R0,??DataTable2
   \   00000940   0x4997             LDR.N    R1,??CALC_Calc_0+0x8
   \   00000942   0x6809             LDR      R1,[R1, #+0]
   \   00000944   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
    425          					}
    426          				}
    427          			}
    428          
    429          			/*---------------------------------------------------------------------------------------------------------*/
    430          
    431          			if (!flag_stopL)
   \                     ??CALC_Calc_51: (+1)
   \   00000948   0x4897             LDR.N    R0,??CALC_Calc_0+0x10
   \   0000094A   0x6800             LDR      R0,[R0, #+0]
   \   0000094C   0x2800             CMP      R0,#+0
   \   0000094E   0xF040 0x8160      BNE.W    ??CALC_Calc_50
    432          			{
    433          				// ×ó±ßÏßÓÒÌø×ó
    434          				if (i < 100 && lineL[i] >= lineL[i + 1] && lineL[i + 1] < lineL[i + 2] && (curJumpL == 2 || !curJumpL))
   \   00000952   0x2C64             CMP      R4,#+100
   \   00000954   0xF280 0x8083      BGE.W    ??CALC_Calc_65
   \   00000958   0xF8DF 0x04A8      LDR.W    R0,??CALC_Calc_1+0x18
   \   0000095C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000960   0xF8DF 0x14A0      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000964   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000968   0x6849             LDR      R1,[R1, #+4]
   \   0000096A   0x4288             CMP      R0,R1
   \   0000096C   0xDB77             BLT.N    ??CALC_Calc_65
   \   0000096E   0xF8DF 0x0494      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000972   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000976   0x6840             LDR      R0,[R0, #+4]
   \   00000978   0xF8DF 0x1488      LDR.W    R1,??CALC_Calc_1+0x18
   \   0000097C   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000980   0x6889             LDR      R1,[R1, #+8]
   \   00000982   0x4288             CMP      R0,R1
   \   00000984   0xDA6B             BGE.N    ??CALC_Calc_65
   \   00000986   0x4885             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000988   0x6800             LDR      R0,[R0, #+0]
   \   0000098A   0x2802             CMP      R0,#+2
   \   0000098C   0xD003             BEQ.N    ??CALC_Calc_66
   \   0000098E   0x4883             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000990   0x6800             LDR      R0,[R0, #+0]
   \   00000992   0x2800             CMP      R0,#+0
   \   00000994   0xD163             BNE.N    ??CALC_Calc_65
    435          				{
    436          					// ÇãÐ±
    437          					for (j = i; j < i + 20; j++)
   \                     ??CALC_Calc_66: (+1)
   \   00000996   0x0027             MOVS     R7,R4
   \   00000998   0xE019             B.N      ??CALC_Calc_67
    438          					{
    439          						if (lineL[j] < lineL[j + 1] && lineL[j + 1] >= lineL[j + 2] && abs(lineL[i] - lineL[j]) > 5)
    440          						{
    441          							if (!curJumpL)
    442          							{
    443          								if (i < FIRSTJUMP)
    444          								{
    445          									flag_stopL = 1;
    446          									lineL[i] = -1;
    447          									break;
    448          								}
    449          
    450          								curJumpL = 1;
    451          								cntJumpL++;
    452          								posJumpL[cntJumpL] = i;
    453          							}
    454          							else if (abs(i - posJumpL[cntJumpL]) > 10)
   \                     ??CALC_Calc_68: (+1)
   \   0000099A   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   0000099E   0x4981             LDR.N    R1,??CALC_Calc_0+0xC
   \   000009A0   0x6809             LDR      R1,[R1, #+0]
   \   000009A2   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000009A6   0x1A20             SUBS     R0,R4,R0
   \   000009A8   0x.... 0x....      BL       abs
   \   000009AC   0x280B             CMP      R0,#+11
   \   000009AE   0xDB0D             BLT.N    ??CALC_Calc_69
    455          							{
    456          								curJumpL = 1;
   \   000009B0   0x2001             MOVS     R0,#+1
   \   000009B2   0x497A             LDR.N    R1,??CALC_Calc_0+0x4
   \   000009B4   0x6008             STR      R0,[R1, #+0]
    457          								cntJumpL++;
   \   000009B6   0x487B             LDR.N    R0,??CALC_Calc_0+0xC
   \   000009B8   0x6800             LDR      R0,[R0, #+0]
   \   000009BA   0x1C40             ADDS     R0,R0,#+1
   \   000009BC   0x4979             LDR.N    R1,??CALC_Calc_0+0xC
   \   000009BE   0x6008             STR      R0,[R1, #+0]
    458          								posJumpL[cntJumpL] = i;
   \   000009C0   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   000009C4   0x4977             LDR.N    R1,??CALC_Calc_0+0xC
   \   000009C6   0x6809             LDR      R1,[R1, #+0]
   \   000009C8   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
    459          							}
   \                     ??CALC_Calc_69: (+1)
   \   000009CC   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CALC_Calc_67: (+1)
   \   000009CE   0xF114 0x0014      ADDS     R0,R4,#+20
   \   000009D2   0x4287             CMP      R7,R0
   \   000009D4   0xF280 0x80A5      BGE.W    ??CALC_Calc_70
   \   000009D8   0xF8DF 0x0428      LDR.W    R0,??CALC_Calc_1+0x18
   \   000009DC   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \   000009E0   0xF8DF 0x1420      LDR.W    R1,??CALC_Calc_1+0x18
   \   000009E4   0xEB11 0x0187      ADDS     R1,R1,R7, LSL #+2
   \   000009E8   0x6849             LDR      R1,[R1, #+4]
   \   000009EA   0x4288             CMP      R0,R1
   \   000009EC   0xDAEE             BGE.N    ??CALC_Calc_69
   \   000009EE   0xF8DF 0x0414      LDR.W    R0,??CALC_Calc_1+0x18
   \   000009F2   0xEB10 0x0087      ADDS     R0,R0,R7, LSL #+2
   \   000009F6   0x6840             LDR      R0,[R0, #+4]
   \   000009F8   0xF8DF 0x1408      LDR.W    R1,??CALC_Calc_1+0x18
   \   000009FC   0xEB11 0x0187      ADDS     R1,R1,R7, LSL #+2
   \   00000A00   0x6889             LDR      R1,[R1, #+8]
   \   00000A02   0x4288             CMP      R0,R1
   \   00000A04   0xDBE2             BLT.N    ??CALC_Calc_69
   \   00000A06   0xF8DF 0x03FC      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000A0A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000A0E   0xF8DF 0x13F4      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000A12   0xF851 0x1027      LDR      R1,[R1, R7, LSL #+2]
   \   00000A16   0x1A40             SUBS     R0,R0,R1
   \   00000A18   0x.... 0x....      BL       abs
   \   00000A1C   0x2806             CMP      R0,#+6
   \   00000A1E   0xDBD5             BLT.N    ??CALC_Calc_69
   \   00000A20   0x485E             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000A22   0x6800             LDR      R0,[R0, #+0]
   \   00000A24   0x2800             CMP      R0,#+0
   \   00000A26   0xD1B8             BNE.N    ??CALC_Calc_68
   \   00000A28   0x2C3C             CMP      R4,#+60
   \   00000A2A   0xDA09             BGE.N    ??CALC_Calc_71
   \   00000A2C   0x2001             MOVS     R0,#+1
   \   00000A2E   0x495E             LDR.N    R1,??CALC_Calc_0+0x10
   \   00000A30   0x6008             STR      R0,[R1, #+0]
   \   00000A32   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000A36   0xF8DF 0x13CC      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000A3A   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000A3E   0xE070             B.N      ??CALC_Calc_70
   \                     ??CALC_Calc_71: (+1)
   \   00000A40   0x2001             MOVS     R0,#+1
   \   00000A42   0x4956             LDR.N    R1,??CALC_Calc_0+0x4
   \   00000A44   0x6008             STR      R0,[R1, #+0]
   \   00000A46   0x4857             LDR.N    R0,??CALC_Calc_0+0xC
   \   00000A48   0x6800             LDR      R0,[R0, #+0]
   \   00000A4A   0x1C40             ADDS     R0,R0,#+1
   \   00000A4C   0x4955             LDR.N    R1,??CALC_Calc_0+0xC
   \   00000A4E   0x6008             STR      R0,[R1, #+0]
   \   00000A50   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   00000A54   0x4953             LDR.N    R1,??CALC_Calc_0+0xC
   \   00000A56   0x6809             LDR      R1,[R1, #+0]
   \   00000A58   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
   \   00000A5C   0xE7B6             B.N      ??CALC_Calc_69
    460          						}
    461          					}
    462          				}
    463          				else if (lineL[i + 1] - lineL[i] > lineL[i + 1] - lineL[i + 2] + 3 && lineL[i] < lineL[i + 1] && (curJumpL == 2 || !curJumpL))
   \                     ??CALC_Calc_65: (+1)
   \   00000A5E   0xF8DF 0x03A4      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000A62   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000A66   0x6840             LDR      R0,[R0, #+4]
   \   00000A68   0xF8DF 0x1398      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000A6C   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000A70   0x6889             LDR      R1,[R1, #+8]
   \   00000A72   0x1A40             SUBS     R0,R0,R1
   \   00000A74   0x1CC0             ADDS     R0,R0,#+3
   \   00000A76   0xF8DF 0x138C      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000A7A   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000A7E   0x6849             LDR      R1,[R1, #+4]
   \   00000A80   0xF8DF 0x2380      LDR.W    R2,??CALC_Calc_1+0x18
   \   00000A84   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   00000A88   0x1A89             SUBS     R1,R1,R2
   \   00000A8A   0x4288             CMP      R0,R1
   \   00000A8C   0xDA49             BGE.N    ??CALC_Calc_70
   \   00000A8E   0xF8DF 0x0374      LDR.W    R0,??CALC_Calc_1+0x18
   \   00000A92   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000A96   0xF8DF 0x136C      LDR.W    R1,??CALC_Calc_1+0x18
   \   00000A9A   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000A9E   0x6849             LDR      R1,[R1, #+4]
   \   00000AA0   0x4288             CMP      R0,R1
   \   00000AA2   0xDA3E             BGE.N    ??CALC_Calc_70
   \   00000AA4   0x483D             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000AA6   0x6800             LDR      R0,[R0, #+0]
   \   00000AA8   0x2802             CMP      R0,#+2
   \   00000AAA   0xD003             BEQ.N    ??CALC_Calc_72
   \   00000AAC   0x483B             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000AAE   0x6800             LDR      R0,[R0, #+0]
   \   00000AB0   0x2800             CMP      R0,#+0
   \   00000AB2   0xD136             BNE.N    ??CALC_Calc_70
    464          				{
    465          					// Õý³£
    466          					if (!curJumpL)
   \                     ??CALC_Calc_72: (+1)
   \   00000AB4   0x4839             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000AB6   0x6800             LDR      R0,[R0, #+0]
   \   00000AB8   0x2800             CMP      R0,#+0
   \   00000ABA   0xD119             BNE.N    ??CALC_Calc_73
    467          					{
    468          						if (i < FIRSTJUMP)
   \   00000ABC   0x2C3C             CMP      R4,#+60
   \   00000ABE   0xDA08             BGE.N    ??CALC_Calc_74
    469          						{
    470          							flag_stopL = 1;
   \   00000AC0   0x2001             MOVS     R0,#+1
   \   00000AC2   0x4939             LDR.N    R1,??CALC_Calc_0+0x10
   \   00000AC4   0x6008             STR      R0,[R1, #+0]
    471          							lineL[i] = -1;
   \   00000AC6   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000ACA   0x49CE             LDR.N    R1,??CALC_Calc_1+0x18
   \   00000ACC   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000AD0   0xE027             B.N      ??CALC_Calc_70
    472          						}
    473          						else
    474          						{
    475          							curJumpL = 1;
   \                     ??CALC_Calc_74: (+1)
   \   00000AD2   0x2001             MOVS     R0,#+1
   \   00000AD4   0x4931             LDR.N    R1,??CALC_Calc_0+0x4
   \   00000AD6   0x6008             STR      R0,[R1, #+0]
    476          							cntJumpL++;
   \   00000AD8   0x4832             LDR.N    R0,??CALC_Calc_0+0xC
   \   00000ADA   0x6800             LDR      R0,[R0, #+0]
   \   00000ADC   0x1C40             ADDS     R0,R0,#+1
   \   00000ADE   0x4931             LDR.N    R1,??CALC_Calc_0+0xC
   \   00000AE0   0x6008             STR      R0,[R1, #+0]
    477          							posJumpL[cntJumpL] = i;
   \   00000AE2   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   00000AE6   0x492F             LDR.N    R1,??CALC_Calc_0+0xC
   \   00000AE8   0x6809             LDR      R1,[R1, #+0]
   \   00000AEA   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
   \   00000AEE   0xE018             B.N      ??CALC_Calc_70
    478          						}
    479          					}
    480          					else if (abs(i - posJumpL[cntJumpL]) > 10)
   \                     ??CALC_Calc_73: (+1)
   \   00000AF0   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   00000AF4   0x492B             LDR.N    R1,??CALC_Calc_0+0xC
   \   00000AF6   0x6809             LDR      R1,[R1, #+0]
   \   00000AF8   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000AFC   0x1A20             SUBS     R0,R4,R0
   \   00000AFE   0x.... 0x....      BL       abs
   \   00000B02   0x280B             CMP      R0,#+11
   \   00000B04   0xDB0D             BLT.N    ??CALC_Calc_70
    481          					{
    482          						curJumpL = 1;
   \   00000B06   0x2001             MOVS     R0,#+1
   \   00000B08   0x4924             LDR.N    R1,??CALC_Calc_0+0x4
   \   00000B0A   0x6008             STR      R0,[R1, #+0]
    483          						cntJumpL++;
   \   00000B0C   0x4825             LDR.N    R0,??CALC_Calc_0+0xC
   \   00000B0E   0x6800             LDR      R0,[R0, #+0]
   \   00000B10   0x1C40             ADDS     R0,R0,#+1
   \   00000B12   0x4924             LDR.N    R1,??CALC_Calc_0+0xC
   \   00000B14   0x6008             STR      R0,[R1, #+0]
    484          						posJumpL[cntJumpL] = i;
   \   00000B16   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   00000B1A   0x4922             LDR.N    R1,??CALC_Calc_0+0xC
   \   00000B1C   0x6809             LDR      R1,[R1, #+0]
   \   00000B1E   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
    485          					}
    486          				}
    487          
    488          				// ×ó±ßÏß×óÌøÓÒ
    489          				if (lineL[i + 1] != 1 && lineL[i] - lineL[i + 1] > lineL[i + 1] - lineL[i + 2] + 3 && lineL[i + 1] < lineL[i] && (curJumpL == 1 || !curJumpL))
   \                     ??CALC_Calc_70: (+1)
   \   00000B22   0x48B8             LDR.N    R0,??CALC_Calc_1+0x18
   \   00000B24   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000B28   0x6840             LDR      R0,[R0, #+4]
   \   00000B2A   0x2801             CMP      R0,#+1
   \   00000B2C   0xD071             BEQ.N    ??CALC_Calc_50
   \   00000B2E   0x48B5             LDR.N    R0,??CALC_Calc_1+0x18
   \   00000B30   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000B34   0x6840             LDR      R0,[R0, #+4]
   \   00000B36   0x49B3             LDR.N    R1,??CALC_Calc_1+0x18
   \   00000B38   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000B3C   0x6889             LDR      R1,[R1, #+8]
   \   00000B3E   0x1A40             SUBS     R0,R0,R1
   \   00000B40   0x1CC0             ADDS     R0,R0,#+3
   \   00000B42   0x49B0             LDR.N    R1,??CALC_Calc_1+0x18
   \   00000B44   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000B48   0x4AAE             LDR.N    R2,??CALC_Calc_1+0x18
   \   00000B4A   0xEB12 0x0284      ADDS     R2,R2,R4, LSL #+2
   \   00000B4E   0x6852             LDR      R2,[R2, #+4]
   \   00000B50   0x1A89             SUBS     R1,R1,R2
   \   00000B52   0x4288             CMP      R0,R1
   \   00000B54   0xDA5D             BGE.N    ??CALC_Calc_50
   \   00000B56   0x48AB             LDR.N    R0,??CALC_Calc_1+0x18
   \   00000B58   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000B5C   0x6840             LDR      R0,[R0, #+4]
   \   00000B5E   0x49A9             LDR.N    R1,??CALC_Calc_1+0x18
   \   00000B60   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000B64   0x4288             CMP      R0,R1
   \   00000B66   0xDA54             BGE.N    ??CALC_Calc_50
   \   00000B68   0x480C             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000B6A   0x6800             LDR      R0,[R0, #+0]
   \   00000B6C   0x2801             CMP      R0,#+1
   \   00000B6E   0xD003             BEQ.N    ??CALC_Calc_75
   \   00000B70   0x480A             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000B72   0x6800             LDR      R0,[R0, #+0]
   \   00000B74   0x2800             CMP      R0,#+0
   \   00000B76   0xD14C             BNE.N    ??CALC_Calc_50
    490          				{
    491          					// Õý³£
    492          					if (!curJumpL)
   \                     ??CALC_Calc_75: (+1)
   \   00000B78   0x4808             LDR.N    R0,??CALC_Calc_0+0x4
   \   00000B7A   0x6800             LDR      R0,[R0, #+0]
   \   00000B7C   0x2800             CMP      R0,#+0
   \   00000B7E   0xD12A             BNE.N    ??CALC_Calc_76
    493          					{
    494          						if (i < FIRSTJUMP)
   \   00000B80   0x2C3C             CMP      R4,#+60
   \   00000B82   0xDA15             BGE.N    ??CALC_Calc_77
    495          						{
    496          							flag_stopL = 1;
   \   00000B84   0x2001             MOVS     R0,#+1
   \   00000B86   0x4908             LDR.N    R1,??CALC_Calc_0+0x10
   \   00000B88   0x6008             STR      R0,[R1, #+0]
    497          							lineL[i] = -1;
   \   00000B8A   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000B8E   0x499D             LDR.N    R1,??CALC_Calc_1+0x18
   \   00000B90   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000B94   0xE03D             B.N      ??CALC_Calc_50
   \   00000B96   0xBF00             Nop      
   \                     ??CALC_Calc_0:
   \   00000B98   0x........         DC32     ??curJumpR
   \   00000B9C   0x........         DC32     ??curJumpL
   \   00000BA0   0x........         DC32     ??cntJumpR
   \   00000BA4   0x........         DC32     ??cntJumpL
   \   00000BA8   0x........         DC32     flag_stopL
   \   00000BAC   0x........         DC32     flag_stopR
    498          						}
    499          						else
    500          						{
    501          							curJumpL = 2;
   \                     ??CALC_Calc_77: (+1)
   \   00000BB0   0x2002             MOVS     R0,#+2
   \   00000BB2   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \   00000BB6   0x6008             STR      R0,[R1, #+0]
    502          							cntJumpL++;
   \   00000BB8   0x.... 0x....      LDR.W    R0,??DataTable2_3
   \   00000BBC   0x6800             LDR      R0,[R0, #+0]
   \   00000BBE   0x1C40             ADDS     R0,R0,#+1
   \   00000BC0   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \   00000BC4   0x6008             STR      R0,[R1, #+0]
    503          							posJumpL[cntJumpL] = i;
   \   00000BC6   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   00000BCA   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \   00000BCE   0x6809             LDR      R1,[R1, #+0]
   \   00000BD0   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
   \   00000BD4   0xE01D             B.N      ??CALC_Calc_50
    504          						}
    505          					}
    506          					else if (abs(i - posJumpL[cntJumpL]) > 10)
   \                     ??CALC_Calc_76: (+1)
   \   00000BD6   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   00000BDA   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \   00000BDE   0x6809             LDR      R1,[R1, #+0]
   \   00000BE0   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000BE4   0x1A20             SUBS     R0,R4,R0
   \   00000BE6   0x.... 0x....      BL       abs
   \   00000BEA   0x280B             CMP      R0,#+11
   \   00000BEC   0xDB11             BLT.N    ??CALC_Calc_50
    507          					{
    508          						curJumpL = 2;
   \   00000BEE   0x2002             MOVS     R0,#+2
   \   00000BF0   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \   00000BF4   0x6008             STR      R0,[R1, #+0]
    509          						cntJumpL++;
   \   00000BF6   0x.... 0x....      LDR.W    R0,??DataTable2_3
   \   00000BFA   0x6800             LDR      R0,[R0, #+0]
   \   00000BFC   0x1C40             ADDS     R0,R0,#+1
   \   00000BFE   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \   00000C02   0x6008             STR      R0,[R1, #+0]
    510          						posJumpL[cntJumpL] = i;
   \   00000C04   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   00000C08   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \   00000C0C   0x6809             LDR      R1,[R1, #+0]
   \   00000C0E   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
    511          					}
    512          				}
    513          			}
    514          		}
    515          
    516          		/*---------------------------------------------------------------------------------------------------------*/
    517          		// ÖÐÏß
    518          
    519          //		lineMid[i] = (lineL[i] + lineR[i]) / 2;
    520          //		if ((lineL[i] == -1 || lineR[i] == -1) && !calc.reffer[0])
    521          //		{
    522          //			if (i > 50)
    523          //				calc.reffer[0] = lineMid[i + 2];
    524          //			else
    525          //				calc.reffer[0] = lineMid[50];
    526          //
    527          //			calc.reffer[0] = (calc.reffer[0] + calc.reffer[1] + calc.reffer[2]) / 3;
    528          //		}
    529          //
    530          //		int cnt_black = 0;
    531          //		if (i > 60 && camera.img[i][lineMid[i]] == camera.black && calc.findEnd == 0 && (twinCore.data[8] == 0 || twinCore.data[8] == 1)) // 20180724µßô¤ÒõÓ°
    532          //		{
    533          //			for (j = 0; j < 10; j++)
    534          //			{
    535          //				if (camera.img[i][limitX(lineMid[i] + j)] == camera.black)
    536          //					cnt_black++;
    537          //				if (camera.img[i][limitX(lineMid[i] - j)] == camera.black)
    538          //					cnt_black++;
    539          //			}
    540          //			if (cnt_black > 15)
    541          //			{
    542          //				flag_stopL = 1;
    543          //				flag_stopR = 1;
    544          //			}
    545          //
    546          ////			flag_stopL = 1;
    547          ////			flag_stopR = 1;
    548          //		}
    549          //
    550          //		if (twinCore.data[1] == 1100)
    551          //			camera.img[i][lineMid[i]] = camera.black;
    552          
    553          		/*---------------------------------------------------------------------------------------------------------*/
    554          
    555          		// ´ïµ½Ê¶±ðÌõ¼þ
    556          		if
    557          		(
    558          			(/*(calc.f2fMode == 0 || calc.f2fMode == 1 || calc.f2fMode == 2 || calc.f2fMode == 4 || calc.f2fMode == 6) &&*/
    559          			cntJumpR >= 3 &&
    560          			abs(abs(lineR[posJumpR[cntJumpR]] - lineR[posJumpR[cntJumpR - 1]]) -
    561          			abs(lineR[posJumpR[cntJumpR - 1]] - lineR[posJumpR[cntJumpR - 2]])) < JMPDELTAX /*&&
    562          			abs(lineR[posJumpR[cntJumpR]] - lineR[posJumpR[cntJumpR - 1]]) <
    563          			abs(lineR[posJumpR[cntJumpR - 1]] - lineR[posJumpR[cntJumpR - 2]])*/)
    564          
    565          		 || (/*(calc.f2fMode == 0 || calc.f2fMode == 1 || calc.f2fMode == 3 || calc.f2fMode == 4 || calc.f2fMode == 7) &&*/
    566          			cntJumpL >= 3 &&
    567          			abs(abs(lineL[posJumpL[cntJumpL]] - lineL[posJumpL[cntJumpL - 1]]) -
    568          			abs(lineL[posJumpL[cntJumpL - 1]] - lineL[posJumpL[cntJumpL - 2]])) < JMPDELTAX /*&&
    569          			abs(lineL[posJumpL[cntJumpL]] - lineL[posJumpL[cntJumpL - 1]]) <
    570          			abs(lineL[posJumpL[cntJumpL - 1]] - lineL[posJumpL[cntJumpL - 2]])*/) // ±ßÏßÈý¸öµã
    571          
    572          		 ||	(/*(calc.f2fMode == 0 || calc.f2fMode == 1) &&
    573          			calc.findEnd != 0 &&*/
    574          			cntJumpL + cntJumpR >= 5) // ×ÜºÍ5¸öµã
    575          
    576          		 || (/*(calc.f2fMode == 2 || calc.f2fMode == 6) &&*/
    577          			/*calc.findEnd == 0 &&*/
    578          			!flag_stopR && cntJumpR >= 2 && lineR[i] < 30 && lineR[i + 1] < 30 &&
    579          			flag_startL < flag_startR)
    580          
    581          		 || (/*(calc.f2fMode == 3 || calc.f2fMode == 7) &&*/
    582          			/*calc.findEnd == 0 &&*/
    583          			!flag_stopL && cntJumpL >= 2 && lineL[i] > 130 && lineL[i + 1] > 130 &&
    584          			flag_startL > flag_startR) // ÍäµÀÌØÊâÑ°
    585          		)
   \                     ??CALC_Calc_50: (+1)
   \   00000C12   0x.... 0x....      LDR.W    R0,??DataTable3
   \   00000C16   0x6800             LDR      R0,[R0, #+0]
   \   00000C18   0x2803             CMP      R0,#+3
   \   00000C1A   0xDB39             BLT.N    ??CALC_Calc_78
   \   00000C1C   0x4878             LDR.N    R0,??CALC_Calc_1+0x14
   \   00000C1E   0x.... 0x....      LDR.W    R1,??DataTable2
   \   00000C22   0x.... 0x....      LDR.W    R2,??DataTable3
   \   00000C26   0x6812             LDR      R2,[R2, #+0]
   \   00000C28   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000C2C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000C30   0x4973             LDR.N    R1,??CALC_Calc_1+0x14
   \   00000C32   0x.... 0x....      LDR.W    R2,??DataTable2
   \   00000C36   0x.... 0x....      LDR.W    R3,??DataTable3
   \   00000C3A   0x681B             LDR      R3,[R3, #+0]
   \   00000C3C   0xEB12 0x0283      ADDS     R2,R2,R3, LSL #+2
   \   00000C40   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000C44   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000C48   0x1A40             SUBS     R0,R0,R1
   \   00000C4A   0x.... 0x....      BL       abs
   \   00000C4E   0x0007             MOVS     R7,R0
   \   00000C50   0x486B             LDR.N    R0,??CALC_Calc_1+0x14
   \   00000C52   0x.... 0x....      LDR.W    R1,??DataTable2
   \   00000C56   0x.... 0x....      LDR.W    R2,??DataTable3
   \   00000C5A   0x6812             LDR      R2,[R2, #+0]
   \   00000C5C   0xEB11 0x0182      ADDS     R1,R1,R2, LSL #+2
   \   00000C60   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000C64   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000C68   0x4965             LDR.N    R1,??CALC_Calc_1+0x14
   \   00000C6A   0x.... 0x....      LDR.W    R2,??DataTable2
   \   00000C6E   0x.... 0x....      LDR.W    R3,??DataTable3
   \   00000C72   0x681B             LDR      R3,[R3, #+0]
   \   00000C74   0xEB12 0x0283      ADDS     R2,R2,R3, LSL #+2
   \   00000C78   0xF852 0x2C08      LDR      R2,[R2, #-8]
   \   00000C7C   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000C80   0x1A40             SUBS     R0,R0,R1
   \   00000C82   0x.... 0x....      BL       abs
   \   00000C86   0x1A38             SUBS     R0,R7,R0
   \   00000C88   0x.... 0x....      BL       abs
   \   00000C8C   0x2814             CMP      R0,#+20
   \   00000C8E   0xDB7A             BLT.N    ??CALC_Calc_79
   \                     ??CALC_Calc_78: (+1)
   \   00000C90   0x.... 0x....      LDR.W    R0,??DataTable2_3
   \   00000C94   0x6800             LDR      R0,[R0, #+0]
   \   00000C96   0x2803             CMP      R0,#+3
   \   00000C98   0xDB39             BLT.N    ??CALC_Calc_80
   \   00000C9A   0x485A             LDR.N    R0,??CALC_Calc_1+0x18
   \   00000C9C   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \   00000CA0   0x.... 0x....      LDR.W    R2,??DataTable2_3
   \   00000CA4   0x6812             LDR      R2,[R2, #+0]
   \   00000CA6   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000CAA   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000CAE   0x4955             LDR.N    R1,??CALC_Calc_1+0x18
   \   00000CB0   0x.... 0x....      LDR.W    R2,??DataTable2_1
   \   00000CB4   0x.... 0x....      LDR.W    R3,??DataTable2_3
   \   00000CB8   0x681B             LDR      R3,[R3, #+0]
   \   00000CBA   0xEB12 0x0283      ADDS     R2,R2,R3, LSL #+2
   \   00000CBE   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   00000CC2   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000CC6   0x1A40             SUBS     R0,R0,R1
   \   00000CC8   0x.... 0x....      BL       abs
   \   00000CCC   0x0007             MOVS     R7,R0
   \   00000CCE   0x484D             LDR.N    R0,??CALC_Calc_1+0x18
   \   00000CD0   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \   00000CD4   0x.... 0x....      LDR.W    R2,??DataTable2_3
   \   00000CD8   0x6812             LDR      R2,[R2, #+0]
   \   00000CDA   0xEB11 0x0182      ADDS     R1,R1,R2, LSL #+2
   \   00000CDE   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000CE2   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000CE6   0x4947             LDR.N    R1,??CALC_Calc_1+0x18
   \   00000CE8   0x.... 0x....      LDR.W    R2,??DataTable2_1
   \   00000CEC   0x.... 0x....      LDR.W    R3,??DataTable2_3
   \   00000CF0   0x681B             LDR      R3,[R3, #+0]
   \   00000CF2   0xEB12 0x0283      ADDS     R2,R2,R3, LSL #+2
   \   00000CF6   0xF852 0x2C08      LDR      R2,[R2, #-8]
   \   00000CFA   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000CFE   0x1A40             SUBS     R0,R0,R1
   \   00000D00   0x.... 0x....      BL       abs
   \   00000D04   0x1A38             SUBS     R0,R7,R0
   \   00000D06   0x.... 0x....      BL       abs
   \   00000D0A   0x2814             CMP      R0,#+20
   \   00000D0C   0xDB3B             BLT.N    ??CALC_Calc_79
   \                     ??CALC_Calc_80: (+1)
   \   00000D0E   0x.... 0x....      LDR.W    R0,??DataTable2_3
   \   00000D12   0x6800             LDR      R0,[R0, #+0]
   \   00000D14   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000D18   0x6809             LDR      R1,[R1, #+0]
   \   00000D1A   0x1808             ADDS     R0,R1,R0
   \   00000D1C   0x2805             CMP      R0,#+5
   \   00000D1E   0xDA32             BGE.N    ??CALC_Calc_79
   \   00000D20   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000D24   0x6800             LDR      R0,[R0, #+0]
   \   00000D26   0x2800             CMP      R0,#+0
   \   00000D28   0xD111             BNE.N    ??CALC_Calc_81
   \   00000D2A   0x.... 0x....      LDR.W    R0,??DataTable3
   \   00000D2E   0x6800             LDR      R0,[R0, #+0]
   \   00000D30   0x2802             CMP      R0,#+2
   \   00000D32   0xDB0C             BLT.N    ??CALC_Calc_81
   \   00000D34   0x4832             LDR.N    R0,??CALC_Calc_1+0x14
   \   00000D36   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000D3A   0x281E             CMP      R0,#+30
   \   00000D3C   0xDA07             BGE.N    ??CALC_Calc_81
   \   00000D3E   0x4830             LDR.N    R0,??CALC_Calc_1+0x14
   \   00000D40   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000D44   0x6840             LDR      R0,[R0, #+4]
   \   00000D46   0x281E             CMP      R0,#+30
   \   00000D48   0xDA01             BGE.N    ??CALC_Calc_81
   \   00000D4A   0x42B5             CMP      R5,R6
   \   00000D4C   0xDB1B             BLT.N    ??CALC_Calc_79
   \                     ??CALC_Calc_81: (+1)
   \   00000D4E   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000D52   0x6800             LDR      R0,[R0, #+0]
   \   00000D54   0x2800             CMP      R0,#+0
   \   00000D56   0xF040 0x8105      BNE.W    ??CALC_Calc_82
   \   00000D5A   0x.... 0x....      LDR.W    R0,??DataTable2_3
   \   00000D5E   0x6800             LDR      R0,[R0, #+0]
   \   00000D60   0x2802             CMP      R0,#+2
   \   00000D62   0xF2C0 0x80FF      BLT.W    ??CALC_Calc_82
   \   00000D66   0x4827             LDR.N    R0,??CALC_Calc_1+0x18
   \   00000D68   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000D6C   0x2883             CMP      R0,#+131
   \   00000D6E   0xF2C0 0x80F9      BLT.W    ??CALC_Calc_82
   \   00000D72   0x4824             LDR.N    R0,??CALC_Calc_1+0x18
   \   00000D74   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000D78   0x6840             LDR      R0,[R0, #+4]
   \   00000D7A   0x2883             CMP      R0,#+131
   \   00000D7C   0xF2C0 0x80F2      BLT.W    ??CALC_Calc_82
   \   00000D80   0x42AE             CMP      R6,R5
   \   00000D82   0xF280 0x80EF      BGE.W    ??CALC_Calc_82
    586          		{
    587          			// µ÷ÊÔÓÃ£¬»­³öÌø±äµãµÄÎ»ÖÃ
    588          			if (twinCore.data[1] == 1100 /*|| twinCore.data[1] == 1101*/)
   \                     ??CALC_Calc_79: (+1)
   \   00000D86   0x.... 0x....      LDR.W    R0,??DataTable0
   \   00000D8A   0xF9B0 0x000E      LDRSH    R0,[R0, #+14]
   \   00000D8E   0xF240 0x414C      MOVW     R1,#+1100
   \   00000D92   0x4288             CMP      R0,R1
   \   00000D94   0xF040 0x809A      BNE.W    ??CALC_Calc_83
    589          			{
    590          				for (int k = 1; k <= cntJumpR; k++)
   \   00000D98   0x2001             MOVS     R0,#+1
   \   00000D9A   0xE01F             B.N      ??CALC_Calc_84
    591          					for (int l = 0; l < 159; l++)
    592          					{
    593          						camera.img[posJumpR[k]][l] = camera.black;
   \                     ??CALC_Calc_85: (+1)
   \   00000D9C   0x4A15             LDR.N    R2,??CALC_Calc_1+0x8
   \   00000D9E   0x.... 0x....      LDR.W    R3,??DataTable2
   \   00000DA2   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000DA6   0x24A0             MOVS     R4,#+160
   \   00000DA8   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000DAC   0x188A             ADDS     R2,R1,R2
   \   00000DAE   0xF241 0x4370      MOVW     R3,#+5232
   \   00000DB2   0x4C10             LDR.N    R4,??CALC_Calc_1+0x8
   \   00000DB4   0x69A4             LDR      R4,[R4, #+24]
   \   00000DB6   0x549C             STRB     R4,[R3, R2]
    594          						camera.img[posJumpR[k] + 1][l] = camera.black;
   \   00000DB8   0x4A0E             LDR.N    R2,??CALC_Calc_1+0x8
   \   00000DBA   0x.... 0x....      LDR.W    R3,??DataTable2
   \   00000DBE   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000DC2   0x24A0             MOVS     R4,#+160
   \   00000DC4   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000DC8   0x188A             ADDS     R2,R1,R2
   \   00000DCA   0xF241 0x5310      MOVW     R3,#+5392
   \   00000DCE   0x4C09             LDR.N    R4,??CALC_Calc_1+0x8
   \   00000DD0   0x69A4             LDR      R4,[R4, #+24]
   \   00000DD2   0x549C             STRB     R4,[R3, R2]
    595          					}
   \   00000DD4   0x1C49             ADDS     R1,R1,#+1
   \                     ??CALC_Calc_86: (+1)
   \   00000DD6   0x299F             CMP      R1,#+159
   \   00000DD8   0xDBE0             BLT.N    ??CALC_Calc_85
   \   00000DDA   0x1C40             ADDS     R0,R0,#+1
   \                     ??CALC_Calc_84: (+1)
   \   00000DDC   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000DE0   0x6809             LDR      R1,[R1, #+0]
   \   00000DE2   0x4281             CMP      R1,R0
   \   00000DE4   0xDB10             BLT.N    ??CALC_Calc_87
   \   00000DE6   0x2100             MOVS     R1,#+0
   \   00000DE8   0xE7F5             B.N      ??CALC_Calc_86
   \   00000DEA   0xBF00             Nop      
   \                     ??CALC_Calc_1:
   \   00000DEC   0x........         DC32     calc
   \   00000DF0   0x........         DC32     state_out
   \   00000DF4   0x........         DC32     camera
   \   00000DF8   0x........         DC32     camera+0x5ED0
   \   00000DFC   0x........         DC32     camera+0x5F6F
   \   00000E00   0x........         DC32     lineR
   \   00000E04   0x........         DC32     lineL
    596          
    597          				for (int k = 1; k <= cntJumpL; k++)
   \                     ??CALC_Calc_87: (+1)
   \   00000E08   0x2001             MOVS     R0,#+1
   \   00000E0A   0xE023             B.N      ??CALC_Calc_88
    598          					for (int l = 0; l < 159; l++)
    599          					{
    600          						camera.img[posJumpL[k]][l] = camera.black;
   \                     ??CALC_Calc_89: (+1)
   \   00000E0C   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000E10   0x.... 0x....      LDR.W    R3,??DataTable2_1
   \   00000E14   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000E18   0x24A0             MOVS     R4,#+160
   \   00000E1A   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000E1E   0x188A             ADDS     R2,R1,R2
   \   00000E20   0xF241 0x4370      MOVW     R3,#+5232
   \   00000E24   0x.... 0x....      LDR.W    R4,??DataTable3_3
   \   00000E28   0x69A4             LDR      R4,[R4, #+24]
   \   00000E2A   0x549C             STRB     R4,[R3, R2]
    601          						camera.img[posJumpL[k] + 1][l] = camera.black;
   \   00000E2C   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000E30   0x.... 0x....      LDR.W    R3,??DataTable2_1
   \   00000E34   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000E38   0x24A0             MOVS     R4,#+160
   \   00000E3A   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000E3E   0x188A             ADDS     R2,R1,R2
   \   00000E40   0xF241 0x5310      MOVW     R3,#+5392
   \   00000E44   0x.... 0x....      LDR.W    R4,??DataTable3_3
   \   00000E48   0x69A4             LDR      R4,[R4, #+24]
   \   00000E4A   0x549C             STRB     R4,[R3, R2]
    602          					}
   \   00000E4C   0x1C49             ADDS     R1,R1,#+1
   \                     ??CALC_Calc_90: (+1)
   \   00000E4E   0x299F             CMP      R1,#+159
   \   00000E50   0xDBDC             BLT.N    ??CALC_Calc_89
   \   00000E52   0x1C40             ADDS     R0,R0,#+1
   \                     ??CALC_Calc_88: (+1)
   \   00000E54   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \   00000E58   0x6809             LDR      R1,[R1, #+0]
   \   00000E5A   0x4281             CMP      R1,R0
   \   00000E5C   0xDB01             BLT.N    ??CALC_Calc_91
   \   00000E5E   0x2100             MOVS     R1,#+0
   \   00000E60   0xE7F5             B.N      ??CALC_Calc_90
    603          
    604          				for (int l = 0; l < 159; l++) // ¶¨Î»Ïß
   \                     ??CALC_Calc_91: (+1)
   \   00000E62   0x2000             MOVS     R0,#+0
   \   00000E64   0xE012             B.N      ??CALC_Calc_92
    605          				{
    606          					if (camera.img[ROADEND][l] == camera.black)
    607          					{
    608          						camera.img[ROADEND][l] = camera.white;
    609          						camera.img[ROADEND + 1][l] = camera.white;
    610          					}
    611          					else
    612          					{
    613          						camera.img[ROADEND][l] = camera.black;
   \                     ??CALC_Calc_93: (+1)
   \   00000E66   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00000E6A   0x6989             LDR      R1,[R1, #+24]
   \   00000E6C   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000E70   0x1882             ADDS     R2,R0,R2
   \   00000E72   0xF243 0x33B0      MOVW     R3,#+13232
   \   00000E76   0x5499             STRB     R1,[R3, R2]
    614          						camera.img[ROADEND + 1][l] = camera.black;
   \   00000E78   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00000E7C   0x6989             LDR      R1,[R1, #+24]
   \   00000E7E   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000E82   0x1882             ADDS     R2,R0,R2
   \   00000E84   0xF243 0x4350      MOVW     R3,#+13392
   \   00000E88   0x5499             STRB     R1,[R3, R2]
    615          					}
   \                     ??CALC_Calc_94: (+1)
   \   00000E8A   0x1C40             ADDS     R0,R0,#+1
   \                     ??CALC_Calc_92: (+1)
   \   00000E8C   0x289F             CMP      R0,#+159
   \   00000E8E   0xDA1D             BGE.N    ??CALC_Calc_83
   \   00000E90   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00000E94   0x1841             ADDS     R1,R0,R1
   \   00000E96   0xF243 0x32B0      MOVW     R2,#+13232
   \   00000E9A   0x5C51             LDRB     R1,[R2, R1]
   \   00000E9C   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000EA0   0x6992             LDR      R2,[R2, #+24]
   \   00000EA2   0x4291             CMP      R1,R2
   \   00000EA4   0xD1DF             BNE.N    ??CALC_Calc_93
   \   00000EA6   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00000EAA   0x6949             LDR      R1,[R1, #+20]
   \   00000EAC   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000EB0   0x1882             ADDS     R2,R0,R2
   \   00000EB2   0xF243 0x33B0      MOVW     R3,#+13232
   \   00000EB6   0x5499             STRB     R1,[R3, R2]
   \   00000EB8   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00000EBC   0x6949             LDR      R1,[R1, #+20]
   \   00000EBE   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000EC2   0x1882             ADDS     R2,R0,R2
   \   00000EC4   0xF243 0x4350      MOVW     R3,#+13392
   \   00000EC8   0x5499             STRB     R1,[R3, R2]
   \   00000ECA   0xE7DE             B.N      ??CALC_Calc_94
    616          				}
    617          			}
    618          
    619          			calc.flag_out = 1;
   \                     ??CALC_Calc_83: (+1)
   \   00000ECC   0x2001             MOVS     R0,#+1
   \   00000ECE   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00000ED2   0x60C8             STR      R0,[R1, #+12]
    620          
    621          			led.Set(LED4, ON); // µÆ
   \   00000ED4   0x2100             MOVS     R1,#+0
   \   00000ED6   0x2008             MOVS     R0,#+8
   \   00000ED8   0x.... 0x....      LDR.W    R2,??DataTable3_5
   \   00000EDC   0x6852             LDR      R2,[R2, #+4]
   \   00000EDE   0x4790             BLX      R2
    622          
    623          			for (int k = CNTMAX; k > 0; k--)
   \   00000EE0   0x2014             MOVS     R0,#+20
   \   00000EE2   0xE00A             B.N      ??CALC_Calc_95
    624          				state_out[k] = state_out[k - 1]; // ÓÃ×÷Í³¼Æ
   \                     ??CALC_Calc_96: (+1)
   \   00000EE4   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00000EE8   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000EEC   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000EF0   0x.... 0x....      LDR.W    R2,??DataTable3_6
   \   00000EF4   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000EF8   0x1E40             SUBS     R0,R0,#+1
   \                     ??CALC_Calc_95: (+1)
   \   00000EFA   0x2801             CMP      R0,#+1
   \   00000EFC   0xDAF2             BGE.N    ??CALC_Calc_96
    625          			state_out[0] = calc.flag_out;
   \   00000EFE   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   00000F02   0x68C0             LDR      R0,[R0, #+12]
   \   00000F04   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00000F08   0x6008             STR      R0,[R1, #+0]
    626          
    627          #define USE_MYFILTER	0
    628          
    629          			if (USE_MYFILTER)
    630          			{
    631          				if (state_out[0] != state_out[2])
    632          					calc.flag_out = state_out[1]; // 14-04-14 by gf ³´¼¦ÉñÆæµÄÂË²¨
    633          			}
    634          			else
    635          			{
    636          //				if (state_out[0] && state_out[1])
    637          //					calc.flag_out = 1;
    638          //				else
    639          //					calc.flag_out = 0;
    640          				//int cnt_out = 0;
    641          				for (int k = 0; k < CNTMAX; k++)
   \   00000F0A   0x2000             MOVS     R0,#+0
   \   00000F0C   0xE00F             B.N      ??CALC_Calc_97
    642          					if (state_out[k])
   \                     ??CALC_Calc_98: (+1)
   \   00000F0E   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00000F12   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000F16   0x2900             CMP      R1,#+0
   \   00000F18   0xD008             BEQ.N    ??CALC_Calc_99
    643          						calc.cnt_out++;
   \   00000F1A   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00000F1E   0xF8D1 0x142C      LDR      R1,[R1, #+1068]
   \   00000F22   0x1C49             ADDS     R1,R1,#+1
   \   00000F24   0x.... 0x....      LDR.W    R2,??DataTable3_4
   \   00000F28   0xF8C2 0x142C      STR      R1,[R2, #+1068]
   \                     ??CALC_Calc_99: (+1)
   \   00000F2C   0x1C40             ADDS     R0,R0,#+1
   \                     ??CALC_Calc_97: (+1)
   \   00000F2E   0x2814             CMP      R0,#+20
   \   00000F30   0xDBED             BLT.N    ??CALC_Calc_98
    644          				if (calc.cnt_out >= calc.cnt_effect)
   \   00000F32   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   00000F36   0xF8D0 0x042C      LDR      R0,[R0, #+1068]
   \   00000F3A   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00000F3E   0x6889             LDR      R1,[R1, #+8]
   \   00000F40   0x4288             CMP      R0,R1
   \   00000F42   0xDB04             BLT.N    ??CALC_Calc_100
    645          					calc.flag_out = 1;
   \   00000F44   0x2001             MOVS     R0,#+1
   \   00000F46   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00000F4A   0x60C8             STR      R0,[R1, #+12]
   \   00000F4C   0xE009             B.N      ??CALC_Calc_101
    646          				else
    647          				{
    648          					calc.flag_out = 0;
   \                     ??CALC_Calc_100: (+1)
   \   00000F4E   0x2000             MOVS     R0,#+0
   \   00000F50   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00000F54   0x60C8             STR      R0,[R1, #+12]
    649          					led.Set(LED4, OFF);
   \   00000F56   0x2101             MOVS     R1,#+1
   \   00000F58   0x2008             MOVS     R0,#+8
   \   00000F5A   0x.... 0x....      LDR.W    R2,??DataTable3_5
   \   00000F5E   0x6852             LDR      R2,[R2, #+4]
   \   00000F60   0x4790             BLX      R2
    650          				}
    651          			}
    652          
    653          //			static float a, b;
    654          //			static int reffer;
    655          //
    656          //			calc_LinearRegression(lineR, posJumpR[cntJumpR], 119 - posJumpR[cntJumpR], &a, &b);
    657          //			reffer = (int)b;
    658          
    659          			return;
   \                     ??CALC_Calc_101: (+1)
   \   00000F62   0xE0EF             B.N      ??CALC_Calc_102
    660          		}
    661          
    662          		if (flag_stopL && flag_stopR)
   \                     ??CALC_Calc_82: (+1)
   \   00000F64   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000F68   0x6800             LDR      R0,[R0, #+0]
   \   00000F6A   0x2800             CMP      R0,#+0
   \   00000F6C   0xF43F 0xA91B      BEQ.W    ??CALC_Calc_18
   \   00000F70   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000F74   0x6800             LDR      R0,[R0, #+0]
   \   00000F76   0x2800             CMP      R0,#+0
   \   00000F78   0xF43F 0xA915      BEQ.W    ??CALC_Calc_18
    663          		{
    664          			i = 30;
   \   00000F7C   0x241E             MOVS     R4,#+30
    665          			break;
    666          		}
    667          	}
    668          
    669          	// µ÷ÊÔÓÃ£¬»­³öÌø±äµãµÄÎ»ÖÃ
    670          	if (twinCore.data[1] == 1100/* || twinCore.data[1] == 1101*/)
   \                     ??CALC_Calc_19: (+1)
   \   00000F7E   0x....             LDR.N    R0,??DataTable0
   \   00000F80   0xF9B0 0x000E      LDRSH    R0,[R0, #+14]
   \   00000F84   0xF240 0x414C      MOVW     R1,#+1100
   \   00000F88   0x4288             CMP      R0,R1
   \   00000F8A   0xF040 0x808E      BNE.W    ??CALC_Calc_103
    671          	{
    672          		for (int k = 1; k <= cntJumpR; k++)
   \   00000F8E   0x2001             MOVS     R0,#+1
   \   00000F90   0xE023             B.N      ??CALC_Calc_104
    673          			for (int l = 0; l < 159; l++)
    674          			{
    675          				camera.img[posJumpR[k]][l] = camera.black;
   \                     ??CALC_Calc_105: (+1)
   \   00000F92   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000F96   0x.... 0x....      LDR.W    R3,??DataTable2
   \   00000F9A   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000F9E   0x25A0             MOVS     R5,#+160
   \   00000FA0   0xFB05 0x2203      MLA      R2,R5,R3,R2
   \   00000FA4   0x188A             ADDS     R2,R1,R2
   \   00000FA6   0xF241 0x4370      MOVW     R3,#+5232
   \   00000FAA   0x.... 0x....      LDR.W    R5,??DataTable3_3
   \   00000FAE   0x69AD             LDR      R5,[R5, #+24]
   \   00000FB0   0x549D             STRB     R5,[R3, R2]
    676          				camera.img[posJumpR[k] + 1][l] = camera.black;
   \   00000FB2   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000FB6   0x.... 0x....      LDR.W    R3,??DataTable2
   \   00000FBA   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000FBE   0x25A0             MOVS     R5,#+160
   \   00000FC0   0xFB05 0x2203      MLA      R2,R5,R3,R2
   \   00000FC4   0x188A             ADDS     R2,R1,R2
   \   00000FC6   0xF241 0x5310      MOVW     R3,#+5392
   \   00000FCA   0x.... 0x....      LDR.W    R5,??DataTable3_3
   \   00000FCE   0x69AD             LDR      R5,[R5, #+24]
   \   00000FD0   0x549D             STRB     R5,[R3, R2]
    677          			}
   \   00000FD2   0x1C49             ADDS     R1,R1,#+1
   \                     ??CALC_Calc_106: (+1)
   \   00000FD4   0x299F             CMP      R1,#+159
   \   00000FD6   0xDBDC             BLT.N    ??CALC_Calc_105
   \   00000FD8   0x1C40             ADDS     R0,R0,#+1
   \                     ??CALC_Calc_104: (+1)
   \   00000FDA   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000FDE   0x6809             LDR      R1,[R1, #+0]
   \   00000FE0   0x4281             CMP      R1,R0
   \   00000FE2   0xDB01             BLT.N    ??CALC_Calc_107
   \   00000FE4   0x2100             MOVS     R1,#+0
   \   00000FE6   0xE7F5             B.N      ??CALC_Calc_106
    678          
    679          		for (int k = 1; k <= cntJumpL; k++)
   \                     ??CALC_Calc_107: (+1)
   \   00000FE8   0x2001             MOVS     R0,#+1
   \   00000FEA   0xE023             B.N      ??CALC_Calc_108
    680          			for (int l = 0; l < 159; l++)
    681          			{
    682          				camera.img[posJumpL[k]][l] = camera.black;
   \                     ??CALC_Calc_109: (+1)
   \   00000FEC   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00000FF0   0x.... 0x....      LDR.W    R3,??DataTable2_1
   \   00000FF4   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000FF8   0x25A0             MOVS     R5,#+160
   \   00000FFA   0xFB05 0x2203      MLA      R2,R5,R3,R2
   \   00000FFE   0x188A             ADDS     R2,R1,R2
   \   00001000   0xF241 0x4370      MOVW     R3,#+5232
   \   00001004   0x.... 0x....      LDR.W    R5,??DataTable3_3
   \   00001008   0x69AD             LDR      R5,[R5, #+24]
   \   0000100A   0x549D             STRB     R5,[R3, R2]
    683          				camera.img[posJumpL[k] + 1][l] = camera.black;
   \   0000100C   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00001010   0x.... 0x....      LDR.W    R3,??DataTable2_1
   \   00001014   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00001018   0x25A0             MOVS     R5,#+160
   \   0000101A   0xFB05 0x2203      MLA      R2,R5,R3,R2
   \   0000101E   0x188A             ADDS     R2,R1,R2
   \   00001020   0xF241 0x5310      MOVW     R3,#+5392
   \   00001024   0x.... 0x....      LDR.W    R5,??DataTable3_3
   \   00001028   0x69AD             LDR      R5,[R5, #+24]
   \   0000102A   0x549D             STRB     R5,[R3, R2]
    684          			}
   \   0000102C   0x1C49             ADDS     R1,R1,#+1
   \                     ??CALC_Calc_110: (+1)
   \   0000102E   0x299F             CMP      R1,#+159
   \   00001030   0xDBDC             BLT.N    ??CALC_Calc_109
   \   00001032   0x1C40             ADDS     R0,R0,#+1
   \                     ??CALC_Calc_108: (+1)
   \   00001034   0x....             LDR.N    R1,??DataTable2_3
   \   00001036   0x6809             LDR      R1,[R1, #+0]
   \   00001038   0x4281             CMP      R1,R0
   \   0000103A   0xDB01             BLT.N    ??CALC_Calc_111
   \   0000103C   0x2100             MOVS     R1,#+0
   \   0000103E   0xE7F6             B.N      ??CALC_Calc_110
    685          
    686          		for (int l = 0; l < 159; l++)
   \                     ??CALC_Calc_111: (+1)
   \   00001040   0x2000             MOVS     R0,#+0
   \   00001042   0xE012             B.N      ??CALC_Calc_112
    687          		{
    688          			if (camera.img[ROADEND][l] == camera.black)
    689          			{
    690          				camera.img[ROADEND][l] = camera.white;
    691          				camera.img[ROADEND + 1][l] = camera.white;
    692          			}
    693          			else
    694          			{
    695          				camera.img[ROADEND][l] = camera.black;
   \                     ??CALC_Calc_113: (+1)
   \   00001044   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00001048   0x6989             LDR      R1,[R1, #+24]
   \   0000104A   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   0000104E   0x1882             ADDS     R2,R0,R2
   \   00001050   0xF243 0x33B0      MOVW     R3,#+13232
   \   00001054   0x5499             STRB     R1,[R3, R2]
    696          				camera.img[ROADEND + 1][l] = camera.black;
   \   00001056   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   0000105A   0x6989             LDR      R1,[R1, #+24]
   \   0000105C   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   00001060   0x1882             ADDS     R2,R0,R2
   \   00001062   0xF243 0x4350      MOVW     R3,#+13392
   \   00001066   0x5499             STRB     R1,[R3, R2]
    697          			}
   \                     ??CALC_Calc_114: (+1)
   \   00001068   0x1C40             ADDS     R0,R0,#+1
   \                     ??CALC_Calc_112: (+1)
   \   0000106A   0x289F             CMP      R0,#+159
   \   0000106C   0xDA1D             BGE.N    ??CALC_Calc_103
   \   0000106E   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00001072   0x1841             ADDS     R1,R0,R1
   \   00001074   0xF243 0x32B0      MOVW     R2,#+13232
   \   00001078   0x5C51             LDRB     R1,[R2, R1]
   \   0000107A   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   0000107E   0x6992             LDR      R2,[R2, #+24]
   \   00001080   0x4291             CMP      R1,R2
   \   00001082   0xD1DF             BNE.N    ??CALC_Calc_113
   \   00001084   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00001088   0x6949             LDR      R1,[R1, #+20]
   \   0000108A   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   0000108E   0x1882             ADDS     R2,R0,R2
   \   00001090   0xF243 0x33B0      MOVW     R3,#+13232
   \   00001094   0x5499             STRB     R1,[R3, R2]
   \   00001096   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   0000109A   0x6949             LDR      R1,[R1, #+20]
   \   0000109C   0x.... 0x....      LDR.W    R2,??DataTable3_3
   \   000010A0   0x1882             ADDS     R2,R0,R2
   \   000010A2   0xF243 0x4350      MOVW     R3,#+13392
   \   000010A6   0x5499             STRB     R1,[R3, R2]
   \   000010A8   0xE7DE             B.N      ??CALC_Calc_114
    698          		}
    699          	}
    700          
    701          	/*---------------------------------------------------------------------------------------------------------*/
    702          
    703          	// Î´Ê¶±ðµ½
    704          	if (i == 30)
   \                     ??CALC_Calc_103: (+1)
   \   000010AA   0x2C1E             CMP      R4,#+30
   \   000010AC   0xD14A             BNE.N    ??CALC_Calc_115
    705          	{
    706          		calc.flag_out = 0;
   \   000010AE   0x2000             MOVS     R0,#+0
   \   000010B0   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   000010B4   0x60C8             STR      R0,[R1, #+12]
    707          
    708          		led.Set(LED4, OFF); // µÆ
   \   000010B6   0x2101             MOVS     R1,#+1
   \   000010B8   0x2008             MOVS     R0,#+8
   \   000010BA   0x.... 0x....      LDR.W    R2,??DataTable3_5
   \   000010BE   0x6852             LDR      R2,[R2, #+4]
   \   000010C0   0x4790             BLX      R2
    709          
    710          		for (int k = CNTMAX; k > 0; k--)
   \   000010C2   0x2014             MOVS     R0,#+20
   \   000010C4   0xE00A             B.N      ??CALC_Calc_116
    711          			state_out[k] = state_out[k - 1]; // ÓÃ×÷Í³¼Æ
   \                     ??CALC_Calc_117: (+1)
   \   000010C6   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   000010CA   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   000010CE   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   000010D2   0x.... 0x....      LDR.W    R2,??DataTable3_6
   \   000010D6   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   000010DA   0x1E40             SUBS     R0,R0,#+1
   \                     ??CALC_Calc_116: (+1)
   \   000010DC   0x2801             CMP      R0,#+1
   \   000010DE   0xDAF2             BGE.N    ??CALC_Calc_117
    712          		state_out[0] = calc.flag_out;
   \   000010E0   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   000010E4   0x68C0             LDR      R0,[R0, #+12]
   \   000010E6   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   000010EA   0x6008             STR      R0,[R1, #+0]
    713          
    714          		if (USE_MYFILTER)
    715          		{
    716          			if (state_out[0] != state_out[2])
    717          				calc.flag_out = state_out[1];
    718          		}
    719          		else
    720          		{
    721          			for (int k = 0; k < CNTMAX; k++)
   \   000010EC   0x2000             MOVS     R0,#+0
   \   000010EE   0xE00F             B.N      ??CALC_Calc_118
    722          				if (state_out[k])
   \                     ??CALC_Calc_119: (+1)
   \   000010F0   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   000010F4   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000010F8   0x2900             CMP      R1,#+0
   \   000010FA   0xD008             BEQ.N    ??CALC_Calc_120
    723          					calc.cnt_out++;
   \   000010FC   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00001100   0xF8D1 0x142C      LDR      R1,[R1, #+1068]
   \   00001104   0x1C49             ADDS     R1,R1,#+1
   \   00001106   0x.... 0x....      LDR.W    R2,??DataTable3_4
   \   0000110A   0xF8C2 0x142C      STR      R1,[R2, #+1068]
   \                     ??CALC_Calc_120: (+1)
   \   0000110E   0x1C40             ADDS     R0,R0,#+1
   \                     ??CALC_Calc_118: (+1)
   \   00001110   0x2814             CMP      R0,#+20
   \   00001112   0xDBED             BLT.N    ??CALC_Calc_119
    724          			if (calc.cnt_out >= calc.cnt_effect)
   \   00001114   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   00001118   0xF8D0 0x042C      LDR      R0,[R0, #+1068]
   \   0000111C   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00001120   0x6889             LDR      R1,[R1, #+8]
   \   00001122   0x4288             CMP      R0,R1
   \   00001124   0xDB0A             BLT.N    ??CALC_Calc_121
    725          			{
    726          				calc.flag_out = 1;
   \   00001126   0x2001             MOVS     R0,#+1
   \   00001128   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   0000112C   0x60C8             STR      R0,[R1, #+12]
    727          				led.Set(LED4, ON);
   \   0000112E   0x2100             MOVS     R1,#+0
   \   00001130   0x2008             MOVS     R0,#+8
   \   00001132   0x.... 0x....      LDR.W    R2,??DataTable3_5
   \   00001136   0x6852             LDR      R2,[R2, #+4]
   \   00001138   0x4790             BLX      R2
   \   0000113A   0xE003             B.N      ??CALC_Calc_115
    728          			}
    729          			else
    730          			{
    731          				calc.flag_out = 0;
   \                     ??CALC_Calc_121: (+1)
   \   0000113C   0x2000             MOVS     R0,#+0
   \   0000113E   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00001142   0x60C8             STR      R0,[R1, #+12]
    732          			}
    733          		}
    734          	}
    735          }
   \                     ??CALC_Calc_115: (+1)
   \                     ??CALC_Calc_102: (+1)
   \   00001144   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .bss, align 4
   \                     ??curJumpR:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??curJumpL:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??cntJumpR:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??cntJumpL:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??posJumpR:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
   \                     ??posJumpL:
   \   00000000                      DS8 40
    736          
    737          //void CALC_Calc(void)
    738          //{
    739          //	int i, j;
    740          //	static int cntJumpR = 0;
    741          //	static int posJumpR[10] = {0};
    742          //
    743          //	curJumpR = 0;
    744          //	cntJumpR = 0;
    745          //
    746          //	camera.img[119][0] = camera.white; // ÓÃÀ´·ÀÖ¹ÉãÏñÍ·Éì³öÈ¥
    747          //
    748          //	// ÓÒ±ßÏßµÚÒ»¸öµã
    749          //	for (i = 0; i < 159; i++)
    750          //		if (camera.img[119][i] == camera.white && camera.img[119][i + 1] == camera.black)
    751          //		{
    752          //			lineR[119] = i;
    753          //			break;
    754          //		}
    755          //	if (i == 159)
    756          //		lineR[119] = 159;
    757          //
    758          //	for (i = 118; i > 30; i--)
    759          //	{
    760          //		// ÓÒ±ßÏßÏÂÒ»¸öµã
    761          //		lineR[i] = 0;
    762          //		for (j = 0; j < 40; j++) // ×óÉ¨
    763          //		{
    764          //			if (camera.img[i][limitX(lineR[i + 1] - j)] == camera.white && camera.img[i][limitX(lineR[i + 1] - j + 1)] == camera.black)
    765          //			{
    766          //				lineR[i] = limitX(lineR[i + 1] - j);
    767          //				break;
    768          //			}
    769          //
    770          //			if (lineR[i + 1] - j < 0) // ·ÀÖ¹ÉãÏñÍ·Éì³öÈ¥
    771          //			{
    772          //				i = 30;
    773          //				break;
    774          //			}
    775          //		}
    776          //		if (!lineR[i]) // ×óÉ¨²»µ½£¬ÓÒÉ¨
    777          //		{
    778          //			for (j = 0; j < 40; j++)
    779          //			{
    780          //				if (camera.img[i][limitX(lineR[i + 1] + j)] == camera.white && camera.img[i][limitX(lineR[i + 1] + j + 1)] == camera.black)
    781          //				{
    782          //					lineR[i] = limitX(lineR[i + 1] + j);
    783          //					break;
    784          //				}
    785          //			}
    786          //			if (j == 40)
    787          //				lineR[i] = limitX(lineR[i + 1] + j);
    788          //		}
    789          //
    790          //		// Òì³£ÍË³öÑ°Ïß
    791          //		if ((lineR[i] == 158 && i < 80) || (i < 117 && lineR[i] - lineR[i + 1] > 10 && lineR[i + 1] - lineR[i + 2] > 10))
    792          //		{
    793          //			i = 30;
    794          //			lineR[i] = 0;
    795          //			break;
    796          //		}
    797          //
    798          //		// µ÷ÊÔÓÃ£¬½«±ß½çÏß»­ÎªÐéÏß
    799          //		if (twinCore.data[1] == 1100 || twinCore.data[1] == 1101)
    800          //		{
    801          //			camera.img[i][lineR[i]] = camera.white;
    802          //			camera.img[i][lineR[i] - 1] = camera.black;
    803          //		}
    804          //
    805          //		/*---------------------------------------------------------------------------------------------------------*/
    806          //
    807          //		// ÕÒÌø±äµã
    808          //		if (i < 117)
    809          //		{
    810          //			// ×óÌøÓÒ
    811          //			if (i < 100 && lineR[i] <= lineR[i + 1] && lineR[i + 1] > lineR[i + 2] && (curJumpR == 2 || !curJumpR))
    812          //			{
    813          //				// ÇãÐ±Çé¿ö
    814          //				for (j = i; j < i + 20; j++)
    815          //				{
    816          //					if (lineR[j] > lineR[j + 1] && lineR[j + 1] <= lineR[j + 2] && abs(lineR[i] - lineR[j]) > 5)
    817          //					{
    818          //						if (!curJumpR)
    819          //						{
    820          //							if (i < 60)
    821          //							{
    822          //								i = 31;
    823          //								lineR[i] = 0;
    824          //								break;
    825          //							}
    826          //
    827          //							curJumpR = 1;
    828          //							cntJumpR++;
    829          //							posJumpR[cntJumpR] = i;
    830          //						}
    831          //						else if (abs(i - posJumpR[cntJumpR]) > 10)
    832          //						{
    833          //							curJumpR = 1;
    834          //							cntJumpR++;
    835          //							posJumpR[cntJumpR] = i;
    836          //						}
    837          //					}
    838          //				}
    839          //			}
    840          //			else if (lineR[i] - lineR[i + 1] > lineR[i + 2] - lineR[i + 1] + 3 && lineR[i] > lineR[i + 1] && (curJumpR == 2 || !curJumpR))
    841          //			{
    842          //				// Õý³£Çé¿ö
    843          //				if (!curJumpR)
    844          //				{
    845          //					if (i < 60)
    846          //					{
    847          //						i = 30;
    848          //						lineR[i] = 0;
    849          //						break;
    850          //					}
    851          //
    852          //					curJumpR = 1;
    853          //					cntJumpR++;
    854          //					posJumpR[cntJumpR] = i;
    855          //				}
    856          //				else if (abs(i - posJumpR[cntJumpR]) > 10)
    857          //				{
    858          //					curJumpR = 1;
    859          //					cntJumpR++;
    860          //					posJumpR[cntJumpR] = i;
    861          //				}
    862          //			}
    863          //
    864          //			// ÓÒÌø×ó
    865          //			if (lineR[i + 1] - lineR[i] > lineR[i + 2] - lineR[i + 1] + 3 && lineR[i + 1] > lineR[i] && (curJumpR == 1 || !curJumpR))
    866          //			{
    867          //				// Ö»¿¼ÂÇÕý³£Çé¿ö
    868          //				if (!curJumpR)
    869          //				{
    870          //					if (i < 60)
    871          //					{
    872          //						i = 30;
    873          //						lineR[i] = 0;
    874          //						break;
    875          //					}
    876          //
    877          //					curJumpR = 2;
    878          //					cntJumpR++;
    879          //					posJumpR[cntJumpR] = i;
    880          //				}
    881          //				else if (abs(i - posJumpR[cntJumpR]) > 10)
    882          //				{
    883          //					curJumpR = 2;
    884          //					cntJumpR++;
    885          //					posJumpR[cntJumpR] = i;
    886          //				}
    887          //			}
    888          //		}
    889          //
    890          //		/*---------------------------------------------------------------------------------------------------------*/
    891          //
    892          //		// ´ïµ½Ê¶±ðÌõ¼þ
    893          //		if (cntJumpR >= 3 &&
    894          //			abs(abs(lineR[posJumpR[cntJumpR]] - lineR[posJumpR[cntJumpR - 1]]) -
    895          //			abs(lineR[posJumpR[cntJumpR - 1]] - lineR[posJumpR[cntJumpR - 2]])) < 30 &&
    896          //			abs(lineR[posJumpR[cntJumpR]] - lineR[posJumpR[cntJumpR - 1]]) <
    897          //			abs(lineR[posJumpR[cntJumpR - 1]] - lineR[posJumpR[cntJumpR - 2]]))
    898          //		{
    899          //			// µ÷ÊÔÓÃ£¬»­³öµ÷±äµãµÄÎ»ÖÃ
    900          //			if (twinCore.data[1] == 1100 || twinCore.data[1] == 1101)
    901          //			{
    902          //				for (int k = 1; k <= cntJumpR; k++)
    903          //					for (int l = 0; l < 159; l++)
    904          //					{
    905          //						camera.img[posJumpR[k]][l] = 0;
    906          //						camera.img[posJumpR[k] + 1][l] = 0;
    907          //					}
    908          //			}
    909          //
    910          //			calc.flag_out = 1;
    911          //
    912          //			state_out[2] = state_out[1];
    913          //			state_out[1] = state_out[0];
    914          //			state_out[0] = calc.flag_out;
    915          //
    916          //			if (state_out[0] != state_out[2])
    917          //				calc.flag_out = state_out[1]; // 14-04-14 by gf ³´¼¦ÉñÆæµÄÂË²¨
    918          //
    919          ////			static float a, b;
    920          ////			static int reffer;
    921          ////
    922          ////			calc_LinearRegression(lineR, posJumpR[cntJumpR], 119 - posJumpR[cntJumpR], &a, &b);
    923          ////			reffer = (int)b;
    924          //
    925          //			return;
    926          //		}
    927          //	}
    928          //
    929          //	// µ÷ÊÔÓÃ£¬»­³öµ÷±äµãµÄÎ»ÖÃ
    930          //	if (twinCore.data[1] == 1100 || twinCore.data[1] == 1101)
    931          //	{
    932          //		for (int k = 1; k <= cntJumpR; k++)
    933          //			for (int l = 0; l < 159; l++)
    934          //			{
    935          //				camera.img[posJumpR[k]][l] = 0;
    936          //				camera.img[posJumpR[k] + 1][l] = 0;
    937          //			}
    938          //	}
    939          //
    940          //	/*---------------------------------------------------------------------------------------------------------*/
    941          //
    942          //	// Î´Ê¶±ðµ½
    943          //	if (i == 30)
    944          //	{
    945          //		calc.flag_out = 0;
    946          //		state_out[2] = state_out[1];
    947          //		state_out[1] = state_out[0];
    948          //		state_out[0] = calc.flag_out;
    949          //
    950          //		if (state_out[0] != state_out[2])
    951          //			calc.flag_out = state_out[1];
    952          //	}
    953          //}
    954          
    955          /*
    956          	z
    957          	¡ü  y
    958          	|¨J
    959          	+---¡ú x
    960          	Íæ
    961          */
    962          

   \                                 In section .bss, align 4
    963          int z_buf[128][64];
   \                     z_buf:
   \   00000000                      DS8 32768
    964          

   \                                 In section .rodata, align 4
    965          const unsigned char bit[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
   \                     bit:
   \   00000000   0x01 0x02          DC8 1, 2, 4, 8, 16, 32, 64, 128
   \              0x04 0x08    
   \              0x10 0x20    
   \              0x40 0x80    

   \                                 In section .rodata, align 4
    966          const unsigned char aBit[] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
   \                     aBit:
   \   00000000   0x80 0x40          DC8 128, 64, 32, 16, 8, 4, 2, 1
   \              0x20 0x10    
   \              0x08 0x04    
   \              0x02 0x01    
    967          #define CALC_WIDTH	128
    968          #define CALC_HEIGHT	64
    969          
    970          #define CALC_AXISX	0
    971          #define CALC_AXISY	1
    972          #define CALC_AXISZ	2
    973          
    974          #define CALC_CAMDIS	128

   \                                 In section .text, align 2, keep-with-next
    975          static point CALC_3to2(points pt)
    976          {
   \                     CALC_3to2: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    977          	point result;
    978          
    979          	pt.y += CALC_CAMDIS;
   \   00000002   0xF112 0x0680      ADDS     R6,R2,#+128
   \   00000006   0x0032             MOVS     R2,R6
    980          
    981          	result.x = CALC_WIDTH / 2 * pt.x / pt.y;
   \   00000008   0x2640             MOVS     R6,#+64
   \   0000000A   0xFB06 0xF601      MUL      R6,R6,R1
   \   0000000E   0xFB96 0xF6F2      SDIV     R6,R6,R2
   \   00000012   0x0034             MOVS     R4,R6
    982          	result.y = CALC_WIDTH / 2 * pt.z / pt.y;
   \   00000014   0x2640             MOVS     R6,#+64
   \   00000016   0xFB06 0xF603      MUL      R6,R6,R3
   \   0000001A   0xFB96 0xF1F2      SDIV     R1,R6,R2
   \   0000001E   0x000D             MOVS     R5,R1
    983          
    984          	result.x += CALC_WIDTH / 2;
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x3140             ADDS     R1,R1,#+64
   \   00000024   0x000C             MOVS     R4,R1
    985          	result.y += CALC_HEIGHT / 2;
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x3120             ADDS     R1,R1,#+32
   \   0000002A   0x000D             MOVS     R5,R1
    986          
    987          	return result;
   \   0000002C   0xE9C0 0x4500      STRD     R4,R5,[R0, #+0]
   \   00000030   0xBC70             POP      {R4-R6}
   \   00000032   0x4770             BX       LR               ;; return
    988          }
    989          

   \                                 In section .text, align 2, keep-with-next
    990          static void CALC_SetPix(point pt, char data)
    991          {
   \                     CALC_SetPix: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    992          	if (data)
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD01B             BEQ.N    ??CALC_SetPix_0
    993          		calc.myScene[pt.x][pt.y / 8] |= bit[pt.y % 8];
   \   00000008   0x2208             MOVS     R2,#+8
   \   0000000A   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable3_4
   \   00000012   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   00000016   0x18D2             ADDS     R2,R2,R3
   \   00000018   0x2308             MOVS     R3,#+8
   \   0000001A   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   0000001E   0x.... 0x....      LDR.W    R4,??DataTable3_4
   \   00000022   0xEB14 0x04C0      ADDS     R4,R4,R0, LSL #+3
   \   00000026   0x191B             ADDS     R3,R3,R4
   \   00000028   0x7E1B             LDRB     R3,[R3, #+24]
   \   0000002A   0x.... 0x....      LDR.W    R4,??DataTable3_7
   \   0000002E   0x2008             MOVS     R0,#+8
   \   00000030   0xFB91 0xF5F0      SDIV     R5,R1,R0
   \   00000034   0xFB05 0x1510      MLS      R5,R5,R0,R1
   \   00000038   0x5D28             LDRB     R0,[R5, R4]
   \   0000003A   0x4318             ORRS     R0,R0,R3
   \   0000003C   0x7610             STRB     R0,[R2, #+24]
   \   0000003E   0xE01B             B.N      ??CALC_SetPix_1
    994          	else
    995          		calc.myScene[pt.x][pt.y / 8] &= ~bit[pt.y % 8];
   \                     ??CALC_SetPix_0: (+1)
   \   00000040   0x2208             MOVS     R2,#+8
   \   00000042   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   00000046   0x.... 0x....      LDR.W    R3,??DataTable3_4
   \   0000004A   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   0000004E   0x18D2             ADDS     R2,R2,R3
   \   00000050   0x2308             MOVS     R3,#+8
   \   00000052   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000056   0x.... 0x....      LDR.W    R4,??DataTable3_4
   \   0000005A   0xEB14 0x04C0      ADDS     R4,R4,R0, LSL #+3
   \   0000005E   0x191B             ADDS     R3,R3,R4
   \   00000060   0x7E1B             LDRB     R3,[R3, #+24]
   \   00000062   0x.... 0x....      LDR.W    R4,??DataTable3_7
   \   00000066   0x2008             MOVS     R0,#+8
   \   00000068   0xFB91 0xF5F0      SDIV     R5,R1,R0
   \   0000006C   0xFB05 0x1510      MLS      R5,R5,R0,R1
   \   00000070   0x5D28             LDRB     R0,[R5, R4]
   \   00000072   0xEA33 0x0000      BICS     R0,R3,R0
   \   00000076   0x7610             STRB     R0,[R2, #+24]
    996          }
   \                     ??CALC_SetPix_1: (+1)
   \   00000078   0xBC30             POP      {R4,R5}
   \   0000007A   0x4770             BX       LR               ;; return
    997          

   \                                 In section .text, align 2, keep-with-next
    998          static void CALC_DrawLine(point pt1, point pt2, char usColor)
    999          {
   \                     CALC_DrawLine: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   1000          	int us;
   1001          	int usX_Current, usY_Current;
   1002          
   1003          	int32_t lError_X = 0, lError_Y = 0, lDelta_X, lDelta_Y, lDistance;
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x2500             MOVS     R5,#+0
   1004          	int32_t lIncrease_X, lIncrease_Y;
   1005          
   1006          	lDelta_X = pt2.x - pt1.x;
   \   0000000A   0x1A16             SUBS     R6,R2,R0
   \   0000000C   0x9600             STR      R6,[SP, #+0]
   1007          	lDelta_Y = pt2.y - pt1.y;
   \   0000000E   0xEBB3 0x0B01      SUBS     R11,R3,R1
   1008          
   1009          	usX_Current = pt1.x;
   \   00000012   0x0006             MOVS     R6,R0
   1010          	usY_Current = pt1.y;
   \   00000014   0x000F             MOVS     R7,R1
   1011          
   1012          	if (lDelta_X > 0)
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xDB02             BLT.N    ??CALC_DrawLine_0
   1013          		lIncrease_X = 1;
   \   0000001C   0xF05F 0x0A01      MOVS     R10,#+1
   \   00000020   0xE00A             B.N      ??CALC_DrawLine_1
   1014          
   1015          	else if (lDelta_X == 0)
   \                     ??CALC_DrawLine_0: (+1)
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD102             BNE.N    ??CALC_DrawLine_2
   1016          		lIncrease_X = 0;
   \   00000028   0xF05F 0x0A00      MOVS     R10,#+0
   \   0000002C   0xE004             B.N      ??CALC_DrawLine_1
   1017          	else
   1018          	{
   1019          		lIncrease_X = -1;
   \                     ??CALC_DrawLine_2: (+1)
   \   0000002E   0xF05F 0x3AFF      MOVS     R10,#-1
   1020          		lDelta_X = -lDelta_X;
   \   00000032   0x9800             LDR      R0,[SP, #+0]
   \   00000034   0x4240             RSBS     R0,R0,#+0
   \   00000036   0x9000             STR      R0,[SP, #+0]
   1021          	}
   1022          
   1023          	if (lDelta_Y > 0)
   \                     ??CALC_DrawLine_1: (+1)
   \   00000038   0xF1BB 0x0F01      CMP      R11,#+1
   \   0000003C   0xDB02             BLT.N    ??CALC_DrawLine_3
   1024          		lIncrease_Y = 1;
   \   0000003E   0xF05F 0x0801      MOVS     R8,#+1
   \   00000042   0xE009             B.N      ??CALC_DrawLine_4
   1025          	else if (lDelta_Y == 0)
   \                     ??CALC_DrawLine_3: (+1)
   \   00000044   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000048   0xD102             BNE.N    ??CALC_DrawLine_5
   1026          		lIncrease_Y = 0;
   \   0000004A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000004E   0xE003             B.N      ??CALC_DrawLine_4
   1027          	else
   1028          	{
   1029          		lIncrease_Y = -1;
   \                     ??CALC_DrawLine_5: (+1)
   \   00000050   0xF05F 0x38FF      MOVS     R8,#-1
   1030          		lDelta_Y = -lDelta_Y;
   \   00000054   0xF1DB 0x0B00      RSBS     R11,R11,#+0
   1031          	}
   1032          
   1033          	if (lDelta_X > lDelta_Y)
   \                     ??CALC_DrawLine_4: (+1)
   \   00000058   0x9800             LDR      R0,[SP, #+0]
   \   0000005A   0x4583             CMP      R11,R0
   \   0000005C   0xDA02             BGE.N    ??CALC_DrawLine_6
   1034          		lDistance = lDelta_X;
   \   0000005E   0x9800             LDR      R0,[SP, #+0]
   \   00000060   0x9001             STR      R0,[SP, #+4]
   \   00000062   0xE001             B.N      ??CALC_DrawLine_7
   1035          	else
   1036          		lDistance = lDelta_Y;
   \                     ??CALC_DrawLine_6: (+1)
   \   00000064   0xF8CD 0xB004      STR      R11,[SP, #+4]
   1037          
   1038          	for (us = 0; us <= lDistance + 1; us++)
   \                     ??CALC_DrawLine_7: (+1)
   \   00000068   0xF05F 0x0900      MOVS     R9,#+0
   \   0000006C   0xE01F             B.N      ??CALC_DrawLine_8
   1039          	{
   1040          		if (usX_Current < CALC_WIDTH && usX_Current >= 0 && usY_Current < CALC_HEIGHT && usY_Current >= 0)
   \                     ??CALC_DrawLine_9: (+1)
   \   0000006E   0x1E30             SUBS     R0,R6,#+0
   \   00000070   0x2880             CMP      R0,#+128
   \   00000072   0xD208             BCS.N    ??CALC_DrawLine_10
   \   00000074   0x1E38             SUBS     R0,R7,#+0
   \   00000076   0x2840             CMP      R0,#+64
   \   00000078   0xD205             BCS.N    ??CALC_DrawLine_10
   1041          		{
   1042          			point pt = {usX_Current, usY_Current};
   \   0000007A   0x0030             MOVS     R0,R6
   \   0000007C   0x0039             MOVS     R1,R7
   1043          			CALC_SetPix(pt, usColor);
   \   0000007E   0xF89D 0x2030      LDRB     R2,[SP, #+48]
   \   00000082   0x.... 0x....      BL       CALC_SetPix
   1044          		}
   1045          
   1046          		lError_X += lDelta_X;
   \                     ??CALC_DrawLine_10: (+1)
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0x1904             ADDS     R4,R0,R4
   1047          		lError_Y += lDelta_Y;
   \   0000008A   0xEB1B 0x0505      ADDS     R5,R11,R5
   1048          
   1049          		if (lError_X > lDistance)
   \   0000008E   0x9801             LDR      R0,[SP, #+4]
   \   00000090   0x42A0             CMP      R0,R4
   \   00000092   0xDA03             BGE.N    ??CALC_DrawLine_11
   1050          		{
   1051          			lError_X -= lDistance;
   \   00000094   0x9801             LDR      R0,[SP, #+4]
   \   00000096   0x1A24             SUBS     R4,R4,R0
   1052          			usX_Current += lIncrease_X;
   \   00000098   0xEB1A 0x0606      ADDS     R6,R10,R6
   1053          		}
   1054          
   1055          		if (lError_Y > lDistance)
   \                     ??CALC_DrawLine_11: (+1)
   \   0000009C   0x9801             LDR      R0,[SP, #+4]
   \   0000009E   0x42A8             CMP      R0,R5
   \   000000A0   0xDA03             BGE.N    ??CALC_DrawLine_12
   1056          		{
   1057          			lError_Y -= lDistance;
   \   000000A2   0x9801             LDR      R0,[SP, #+4]
   \   000000A4   0x1A2D             SUBS     R5,R5,R0
   1058          			usY_Current += lIncrease_Y;
   \   000000A6   0xEB18 0x0707      ADDS     R7,R8,R7
   1059          		}
   1060          	}
   \                     ??CALC_DrawLine_12: (+1)
   \   000000AA   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??CALC_DrawLine_8: (+1)
   \   000000AE   0x9801             LDR      R0,[SP, #+4]
   \   000000B0   0x1C40             ADDS     R0,R0,#+1
   \   000000B2   0x4548             CMP      R0,R9
   \   000000B4   0xDADB             BGE.N    ??CALC_DrawLine_9
   1061          }
   \   000000B6   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
   1062          

   \                                 In section .text, align 2, keep-with-next
   1063          static void CALC_3dSetPix(points pt, char data)
   1064          {
   \                     CALC_3dSetPix: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x001C             MOVS     R4,R3
   1065          	point pt2d;
   1066          
   1067          	pt2d = CALC_3to2(pt);
   \   00000004   0x0013             MOVS     R3,R2
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       CALC_3to2
   1068          
   1069          	if (pt2d.x >= CALC_WIDTH || pt2d.x < 0 || pt2d.y >= CALC_HEIGHT || pt2d.y < 0) return;
   \   00000010   0x9800             LDR      R0,[SP, #+0]
   \   00000012   0x1E00             SUBS     R0,R0,#+0
   \   00000014   0x2880             CMP      R0,#+128
   \   00000016   0xD203             BCS.N    ??CALC_3dSetPix_0
   \   00000018   0x9801             LDR      R0,[SP, #+4]
   \   0000001A   0x1E00             SUBS     R0,R0,#+0
   \   0000001C   0x2840             CMP      R0,#+64
   \   0000001E   0xD300             BCC.N    ??CALC_3dSetPix_1
   \                     ??CALC_3dSetPix_0: (+1)
   \   00000020   0xE005             B.N      ??CALC_3dSetPix_2
   1070          
   1071          	CALC_SetPix(pt2d, data);
   \                     ??CALC_3dSetPix_1: (+1)
   \   00000022   0x0022             MOVS     R2,R4
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   0000002A   0x.... 0x....      BL       CALC_SetPix
   1072          }
   \                     ??CALC_3dSetPix_2: (+1)
   \   0000002E   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1073          

   \                                 In section .text, align 2, keep-with-next
   1074          static void CALC_3dDrawLine(points pt1, points pt2, char usColor)
   1075          {
   \                     CALC_3dDrawLine: (+1)
   \   00000000   0xB408             PUSH     {R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   1076          	point pt2d1, pt2d2;
   1077          
   1078          	pt2d1 = CALC_3to2(pt1);
   \   00000006   0x0013             MOVS     R3,R2
   \   00000008   0x000A             MOVS     R2,R1
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x.... 0x....      BL       CALC_3to2
   1079          	pt2d2 = CALC_3to2(pt2);
   \   00000012   0xA807             ADD      R0,SP,#+28
   \   00000014   0xE890 0x000E      LDM      R0,{R1-R3}
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       CALC_3to2
   1080          
   1081          	CALC_DrawLine(pt2d1, pt2d2, usColor);
   \   0000001E   0x980A             LDR      R0,[SP, #+40]
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0xE9DD 0x2301      LDRD     R2,R3,[SP, #+4]
   \   00000026   0xE9DD 0x0103      LDRD     R0,R1,[SP, #+12]
   \   0000002A   0x.... 0x....      BL       CALC_DrawLine
   1082          }
   \   0000002E   0xB006             ADD      SP,SP,#+24
   \   00000030   0xF85D 0xFB08      LDR      PC,[SP], #+8     ;; return
   1083          

   \                                 In section .text, align 2, keep-with-next
   1084          static void CALC_3dConnect(points *lineR, int num, int color, int isCircle)
   1085          {
   \                     CALC_3dConnect: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0006             MOVS     R6,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x4690             MOV      R8,R2
   \   0000000C   0x001F             MOVS     R7,R3
   1086          	int i;
   1087          
   1088          	for (i = 0; i < num - 1; i++)
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0xE016             B.N      ??CALC_3dConnect_0
   1089          		CALC_3dDrawLine(lineR[i], lineR[i + 1], color);
   \                     ??CALC_3dConnect_1: (+1)
   \   00000012   0x4640             MOV      R0,R8
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x9002             STR      R0,[SP, #+8]
   \   00000018   0x200C             MOVS     R0,#+12
   \   0000001A   0xFB00 0x6004      MLA      R0,R0,R4,R6
   \   0000001E   0x300C             ADDS     R0,R0,#+12
   \   00000020   0xB081             SUB      SP,SP,#+4
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0xC80C             LDM      R0!,{R2,R3}
   \   00000026   0xC10C             STM      R1!,{R2,R3}
   \   00000028   0x6802             LDR      R2,[R0, #0]
   \   0000002A   0x600A             STR      R2,[R1, #+0]
   \   0000002C   0x3808             SUBS     R0,R0,#+8
   \   0000002E   0x3908             SUBS     R1,R1,#+8
   \   00000030   0xBC08             POP      {R3}
   \   00000032   0x200C             MOVS     R0,#+12
   \   00000034   0xFB00 0x6004      MLA      R0,R0,R4,R6
   \   00000038   0xC807             LDM      R0,{R0-R2}
   \   0000003A   0x.... 0x....      BL       CALC_3dDrawLine
   \   0000003E   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_3dConnect_0: (+1)
   \   00000040   0x1E68             SUBS     R0,R5,#+1
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xDBE5             BLT.N    ??CALC_3dConnect_1
   1090          
   1091          	if (isCircle)
   \   00000046   0x2F00             CMP      R7,#+0
   \   00000048   0xD014             BEQ.N    ??CALC_3dConnect_2
   1092          		CALC_3dDrawLine(lineR[0], lineR[num - 1], color);
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \   00000052   0x200C             MOVS     R0,#+12
   \   00000054   0xFB00 0x6005      MLA      R0,R0,R5,R6
   \   00000058   0x380C             SUBS     R0,R0,#+12
   \   0000005A   0xB081             SUB      SP,SP,#+4
   \   0000005C   0x4669             MOV      R1,SP
   \   0000005E   0xC80C             LDM      R0!,{R2,R3}
   \   00000060   0xC10C             STM      R1!,{R2,R3}
   \   00000062   0x6802             LDR      R2,[R0, #0]
   \   00000064   0x600A             STR      R2,[R1, #+0]
   \   00000066   0x3808             SUBS     R0,R0,#+8
   \   00000068   0x3908             SUBS     R1,R1,#+8
   \   0000006A   0xBC08             POP      {R3}
   \   0000006C   0xE896 0x0007      LDM      R6,{R0-R2}
   \   00000070   0x.... 0x....      BL       CALC_3dDrawLine
   1093          }
   \                     ??CALC_3dConnect_2: (+1)
   \   00000074   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return
   1094          

   \                                 In section .rodata, align 4
   1095          const unsigned char charCH[][32] =
   \                     charCH:
   \   00000000   0x04 0x74          DC8 4, 116, 84, 85, 86, 84, 116, 4, 0, 254, 2, 34, 218, 6, 0, 0, 16, 17
   \              0x54 0x55    
   \              0x56 0x54    
   \              0x74 0x04    
   \              0x00 0xFE    
   \              0x02 0x22    
   \              0xDA 0x06    
   \              0x00 0x00    
   \              0x10 0x11    
   \   00000012   0x51 0x91          DC8 81, 145, 125, 11, 9, 8, 0, 255, 8, 16, 8, 7, 0, 0, 0, 248, 8, 255
   \              0x7D 0x0B    
   \              0x09 0x08    
   \              0x00 0xFF    
   \              0x08 0x10    
   \              0x08 0x07    
   \              0x00 0x00    
   \              0x00 0xF8    
   \              0x08 0xFF    
   \   00000024   0x08 0xF8          DC8 8, 248, 0, 254, 66, 130, 2, 254, 0, 0, 0, 0, 0, 15, 0, 255, 8, 143
   \              0x00 0xFE    
   \              0x42 0x82    
   \              0x02 0xFE    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x0F    
   \              0x00 0xFF    
   \              0x08 0x8F    
   \   00000036   0x60 0x1F          DC8 96, 31, 0, 1, 0, 63, 64, 64, 120, 0
   \              0x00 0x01    
   \              0x00 0x3F    
   \              0x40 0x40    
   \              0x78 0x00    
   1096          {
   1097          	{0x04,0x74,0x54,0x55,0x56,0x54,0x74,0x04,0x00,0xFE,0x02,0x22,0xDA,0x06,0x00,0x00,
   1098          	0x10,0x11,0x51,0x91,0x7D,0x0B,0x09,0x08,0x00,0xFF,0x08,0x10,0x08,0x07,0x00,0x00},
   1099          	{0x00,0xF8,0x08,0xFF,0x08,0xF8,0x00,0xFE,0x42,0x82,0x02,0xFE,0x00,0x00,0x00,0x00,
   1100          	0x00,0x0F,0x00,0xFF,0x08,0x8F,0x60,0x1F,0x00,0x01,0x00,0x3F,0x40,0x40,0x78,0x00}
   1101          };
   1102          

   \                                 In section .text, align 2, keep-with-next
   1103          static char CALC_GetCHPix(int num, int x, int y)
   1104          {
   \                     CALC_GetCHPix: (+1)
   \   00000000   0xB410             PUSH     {R4}
   1105          	return charCH[num][x + (y / 8) * 16] & bit[y % 8];
   \   00000002   0x2308             MOVS     R3,#+8
   \   00000004   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \   00000008   0xEB11 0x1103      ADDS     R1,R1,R3, LSL #+4
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable3_8
   \   00000010   0xEB13 0x1040      ADDS     R0,R3,R0, LSL #+5
   \   00000014   0x5C08             LDRB     R0,[R1, R0]
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   0000001A   0x2308             MOVS     R3,#+8
   \   0000001C   0xFB92 0xF4F3      SDIV     R4,R2,R3
   \   00000020   0xFB04 0x2413      MLS      R4,R4,R3,R2
   \   00000024   0x5C61             LDRB     R1,[R4, R1]
   \   00000026   0x4008             ANDS     R0,R1,R0
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xBC10             POP      {R4}
   \   0000002C   0x4770             BX       LR               ;; return
   1106          }
   1107          
   1108          #define CALC_CUBEX	64
   1109          #define CALC_CUBEYA	-16
   1110          #define CALC_CUBEYB	128
   1111          #define CALC_CUBEZ	32

   \                                 In section .rodata, align 4
   1112          static const points cube[8] =
   \                     cube:
   \   00000000   0xFFFFFFC0         DC32 -64, -16, -32, 64, -16, -32, 64, -16, 32, -64, -16, 32, -64, 128
   \              0xFFFFFFF0   
   \              0xFFFFFFE0   
   \              0x00000040   
   \              0xFFFFFFF0   
   \              0xFFFFFFE0   
   \              0x00000040   
   \              0xFFFFFFF0   
   \              0x00000020   
   \              0xFFFFFFC0   
   \              0xFFFFFFF0   
   \              0x00000020   
   \              0xFFFFFFC0   
   \              0x00000080   
   \   00000038   0xFFFFFFE0         DC32 -32, 64, 128, -32, 64, 128, 32, -64, 128, 32
   \              0x00000040   
   \              0x00000080   
   \              0xFFFFFFE0   
   \              0x00000040   
   \              0x00000080   
   \              0x00000020   
   \              0xFFFFFFC0   
   \              0x00000080   
   \              0x00000020   
   1113          {
   1114          	{-CALC_CUBEX, CALC_CUBEYA, -CALC_CUBEZ}, {CALC_CUBEX, CALC_CUBEYA, -CALC_CUBEZ},
   1115          	{CALC_CUBEX, CALC_CUBEYA, CALC_CUBEZ}, {-CALC_CUBEX, CALC_CUBEYA, CALC_CUBEZ},
   1116          	{-CALC_CUBEX, CALC_CUBEYB,  -CALC_CUBEZ}, {CALC_CUBEX, CALC_CUBEYB,  -CALC_CUBEZ},
   1117          	{CALC_CUBEX, CALC_CUBEYB,  CALC_CUBEZ}, {-CALC_CUBEX, CALC_CUBEYB,  CALC_CUBEZ}
   1118          };
   1119          

   \                                 In section .text, align 2, keep-with-next
   1120          static points CALC_PtRotate(points pt, int axis, float ang, points origin)
   1121          {
   \                     CALC_PtRotate: (+1)
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0007             MOVS     R7,R0
   \   00000008   0x9E0F             LDR      R6,[SP, #+60]
   1122          	points result;
   1123          
   1124          	switch (axis)
   \   0000000A   0x980E             LDR      R0,[SP, #+56]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xF000 0x80D6      BEQ.W    ??CALC_PtRotate_0
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD001             BEQ.N    ??CALC_PtRotate_1
   \   00000016   0xD369             BCC.N    ??CALC_PtRotate_2
   \   00000018   0xE139             B.N      ??CALC_PtRotate_3
   1125          	{
   1126          	case CALC_AXISZ:
   1127          		result.x = (int)((pt.x - origin.x) * cos(ang) - (pt.y - origin.y) * sin(ang) + origin.x);
   \                     ??CALC_PtRotate_1: (+1)
   \   0000001A   0x0030             MOVS     R0,R6
   \   0000001C   0x.... 0x....      BL       __aeabi_f2d
   \   00000020   0x.... 0x....      BL       cos
   \   00000024   0x0004             MOVS     R4,R0
   \   00000026   0x000D             MOVS     R5,R1
   \   00000028   0x9804             LDR      R0,[SP, #+16]
   \   0000002A   0x9910             LDR      R1,[SP, #+64]
   \   0000002C   0x1A40             SUBS     R0,R0,R1
   \   0000002E   0x.... 0x....      BL       __aeabi_i2d
   \   00000032   0x0022             MOVS     R2,R4
   \   00000034   0x002B             MOVS     R3,R5
   \   00000036   0x.... 0x....      BL       __aeabi_dmul
   \   0000003A   0x4680             MOV      R8,R0
   \   0000003C   0x4689             MOV      R9,R1
   \   0000003E   0x9805             LDR      R0,[SP, #+20]
   \   00000040   0x9911             LDR      R1,[SP, #+68]
   \   00000042   0x1A40             SUBS     R0,R0,R1
   \   00000044   0x.... 0x....      BL       __aeabi_i2d
   \   00000048   0x0004             MOVS     R4,R0
   \   0000004A   0x000D             MOVS     R5,R1
   \   0000004C   0x0030             MOVS     R0,R6
   \   0000004E   0x.... 0x....      BL       __aeabi_f2d
   \   00000052   0x.... 0x....      BL       sin
   \   00000056   0x0022             MOVS     R2,R4
   \   00000058   0x002B             MOVS     R3,R5
   \   0000005A   0x.... 0x....      BL       __aeabi_dmul
   \   0000005E   0x0002             MOVS     R2,R0
   \   00000060   0x000B             MOVS     R3,R1
   \   00000062   0x4640             MOV      R0,R8
   \   00000064   0x4649             MOV      R1,R9
   \   00000066   0x.... 0x....      BL       __aeabi_dsub
   \   0000006A   0x0004             MOVS     R4,R0
   \   0000006C   0x000D             MOVS     R5,R1
   \   0000006E   0x9810             LDR      R0,[SP, #+64]
   \   00000070   0x.... 0x....      BL       __aeabi_i2d
   \   00000074   0x0022             MOVS     R2,R4
   \   00000076   0x002B             MOVS     R3,R5
   \   00000078   0x.... 0x....      BL       __aeabi_dadd
   \   0000007C   0x.... 0x....      BL       __aeabi_d2iz
   \   00000080   0x9000             STR      R0,[SP, #+0]
   1128          		result.y = (int)((pt.y - origin.y) * cos(ang) + (pt.x - origin.x) * sin(ang) + origin.y);
   \   00000082   0x0030             MOVS     R0,R6
   \   00000084   0x.... 0x....      BL       __aeabi_f2d
   \   00000088   0x.... 0x....      BL       cos
   \   0000008C   0x0004             MOVS     R4,R0
   \   0000008E   0x000D             MOVS     R5,R1
   \   00000090   0x9805             LDR      R0,[SP, #+20]
   \   00000092   0x9911             LDR      R1,[SP, #+68]
   \   00000094   0x1A40             SUBS     R0,R0,R1
   \   00000096   0x.... 0x....      BL       __aeabi_i2d
   \   0000009A   0x0022             MOVS     R2,R4
   \   0000009C   0x002B             MOVS     R3,R5
   \   0000009E   0x.... 0x....      BL       __aeabi_dmul
   \   000000A2   0x4680             MOV      R8,R0
   \   000000A4   0x4689             MOV      R9,R1
   \   000000A6   0x9804             LDR      R0,[SP, #+16]
   \   000000A8   0x9910             LDR      R1,[SP, #+64]
   \   000000AA   0x1A40             SUBS     R0,R0,R1
   \   000000AC   0x.... 0x....      BL       __aeabi_i2d
   \   000000B0   0x0004             MOVS     R4,R0
   \   000000B2   0x000D             MOVS     R5,R1
   \   000000B4   0x0030             MOVS     R0,R6
   \   000000B6   0x.... 0x....      BL       __aeabi_f2d
   \   000000BA   0x.... 0x....      BL       sin
   \   000000BE   0x0022             MOVS     R2,R4
   \   000000C0   0x002B             MOVS     R3,R5
   \   000000C2   0x.... 0x....      BL       __aeabi_dmul
   \   000000C6   0x4642             MOV      R2,R8
   \   000000C8   0x464B             MOV      R3,R9
   \   000000CA   0x.... 0x....      BL       __aeabi_dadd
   \   000000CE   0x0004             MOVS     R4,R0
   \   000000D0   0x000D             MOVS     R5,R1
   \   000000D2   0x9811             LDR      R0,[SP, #+68]
   \   000000D4   0x.... 0x....      BL       __aeabi_i2d
   \   000000D8   0x0022             MOVS     R2,R4
   \   000000DA   0x002B             MOVS     R3,R5
   \   000000DC   0x.... 0x....      BL       __aeabi_dadd
   \   000000E0   0x.... 0x....      BL       __aeabi_d2iz
   \   000000E4   0x9001             STR      R0,[SP, #+4]
   1129          		result.z = pt.z;
   \   000000E6   0x9806             LDR      R0,[SP, #+24]
   \   000000E8   0x9002             STR      R0,[SP, #+8]
   1130          		break;
   \   000000EA   0xE0D0             B.N      ??CALC_PtRotate_3
   1131          	case CALC_AXISY:
   1132          		result.x = (int)((pt.x - origin.x) * cos(ang) - (pt.z - origin.z) * sin(ang) + origin.x);
   \                     ??CALC_PtRotate_2: (+1)
   \   000000EC   0x0030             MOVS     R0,R6
   \   000000EE   0x.... 0x....      BL       __aeabi_f2d
   \   000000F2   0x.... 0x....      BL       cos
   \   000000F6   0x0004             MOVS     R4,R0
   \   000000F8   0x000D             MOVS     R5,R1
   \   000000FA   0x9804             LDR      R0,[SP, #+16]
   \   000000FC   0x9910             LDR      R1,[SP, #+64]
   \   000000FE   0x1A40             SUBS     R0,R0,R1
   \   00000100   0x.... 0x....      BL       __aeabi_i2d
   \   00000104   0x0022             MOVS     R2,R4
   \   00000106   0x002B             MOVS     R3,R5
   \   00000108   0x.... 0x....      BL       __aeabi_dmul
   \   0000010C   0x4680             MOV      R8,R0
   \   0000010E   0x4689             MOV      R9,R1
   \   00000110   0x9806             LDR      R0,[SP, #+24]
   \   00000112   0x9912             LDR      R1,[SP, #+72]
   \   00000114   0x1A40             SUBS     R0,R0,R1
   \   00000116   0x.... 0x....      BL       __aeabi_i2d
   \   0000011A   0x0004             MOVS     R4,R0
   \   0000011C   0x000D             MOVS     R5,R1
   \   0000011E   0x0030             MOVS     R0,R6
   \   00000120   0x.... 0x....      BL       __aeabi_f2d
   \   00000124   0x.... 0x....      BL       sin
   \   00000128   0x0022             MOVS     R2,R4
   \   0000012A   0x002B             MOVS     R3,R5
   \   0000012C   0x.... 0x....      BL       __aeabi_dmul
   \   00000130   0x0002             MOVS     R2,R0
   \   00000132   0x000B             MOVS     R3,R1
   \   00000134   0x4640             MOV      R0,R8
   \   00000136   0x4649             MOV      R1,R9
   \   00000138   0x.... 0x....      BL       __aeabi_dsub
   \   0000013C   0x0004             MOVS     R4,R0
   \   0000013E   0x000D             MOVS     R5,R1
   \   00000140   0x9810             LDR      R0,[SP, #+64]
   \   00000142   0x.... 0x....      BL       __aeabi_i2d
   \   00000146   0x0022             MOVS     R2,R4
   \   00000148   0x002B             MOVS     R3,R5
   \   0000014A   0x.... 0x....      BL       __aeabi_dadd
   \   0000014E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000152   0x9000             STR      R0,[SP, #+0]
   1133          		result.z = (int)((pt.z - origin.z) * cos(ang) + (pt.x - origin.x) * sin(ang) + origin.z);
   \   00000154   0x0030             MOVS     R0,R6
   \   00000156   0x.... 0x....      BL       __aeabi_f2d
   \   0000015A   0x.... 0x....      BL       cos
   \   0000015E   0x0004             MOVS     R4,R0
   \   00000160   0x000D             MOVS     R5,R1
   \   00000162   0x9806             LDR      R0,[SP, #+24]
   \   00000164   0x9912             LDR      R1,[SP, #+72]
   \   00000166   0x1A40             SUBS     R0,R0,R1
   \   00000168   0x.... 0x....      BL       __aeabi_i2d
   \   0000016C   0x0022             MOVS     R2,R4
   \   0000016E   0x002B             MOVS     R3,R5
   \   00000170   0x.... 0x....      BL       __aeabi_dmul
   \   00000174   0x4680             MOV      R8,R0
   \   00000176   0x4689             MOV      R9,R1
   \   00000178   0x9804             LDR      R0,[SP, #+16]
   \   0000017A   0x9910             LDR      R1,[SP, #+64]
   \   0000017C   0x1A40             SUBS     R0,R0,R1
   \   0000017E   0x.... 0x....      BL       __aeabi_i2d
   \   00000182   0x0004             MOVS     R4,R0
   \   00000184   0x000D             MOVS     R5,R1
   \   00000186   0x0030             MOVS     R0,R6
   \   00000188   0x.... 0x....      BL       __aeabi_f2d
   \   0000018C   0x.... 0x....      BL       sin
   \   00000190   0x0022             MOVS     R2,R4
   \   00000192   0x002B             MOVS     R3,R5
   \   00000194   0x.... 0x....      BL       __aeabi_dmul
   \   00000198   0x4642             MOV      R2,R8
   \   0000019A   0x464B             MOV      R3,R9
   \   0000019C   0x.... 0x....      BL       __aeabi_dadd
   \   000001A0   0x0004             MOVS     R4,R0
   \   000001A2   0x000D             MOVS     R5,R1
   \   000001A4   0x9812             LDR      R0,[SP, #+72]
   \   000001A6   0x.... 0x....      BL       __aeabi_i2d
   \   000001AA   0x0022             MOVS     R2,R4
   \   000001AC   0x002B             MOVS     R3,R5
   \   000001AE   0x.... 0x....      BL       __aeabi_dadd
   \   000001B2   0x.... 0x....      BL       __aeabi_d2iz
   \   000001B6   0x9002             STR      R0,[SP, #+8]
   1134          		result.y = pt.y;
   \   000001B8   0x9805             LDR      R0,[SP, #+20]
   \   000001BA   0x9001             STR      R0,[SP, #+4]
   1135          		break;
   \   000001BC   0xE067             B.N      ??CALC_PtRotate_3
   1136          	case CALC_AXISX:
   1137          		result.y = (int)((pt.y - origin.y) * cos(ang) - (pt.z - origin.z) * sin(ang) + origin.y);
   \                     ??CALC_PtRotate_0: (+1)
   \   000001BE   0x0030             MOVS     R0,R6
   \   000001C0   0x.... 0x....      BL       __aeabi_f2d
   \   000001C4   0x.... 0x....      BL       cos
   \   000001C8   0x0004             MOVS     R4,R0
   \   000001CA   0x000D             MOVS     R5,R1
   \   000001CC   0x9805             LDR      R0,[SP, #+20]
   \   000001CE   0x9911             LDR      R1,[SP, #+68]
   \   000001D0   0x1A40             SUBS     R0,R0,R1
   \   000001D2   0x.... 0x....      BL       __aeabi_i2d
   \   000001D6   0x0022             MOVS     R2,R4
   \   000001D8   0x002B             MOVS     R3,R5
   \   000001DA   0x.... 0x....      BL       __aeabi_dmul
   \   000001DE   0x4680             MOV      R8,R0
   \   000001E0   0x4689             MOV      R9,R1
   \   000001E2   0x9806             LDR      R0,[SP, #+24]
   \   000001E4   0x9912             LDR      R1,[SP, #+72]
   \   000001E6   0x1A40             SUBS     R0,R0,R1
   \   000001E8   0x.... 0x....      BL       __aeabi_i2d
   \   000001EC   0x0004             MOVS     R4,R0
   \   000001EE   0x000D             MOVS     R5,R1
   \   000001F0   0x0030             MOVS     R0,R6
   \   000001F2   0x.... 0x....      BL       __aeabi_f2d
   \   000001F6   0x.... 0x....      BL       sin
   \   000001FA   0x0022             MOVS     R2,R4
   \   000001FC   0x002B             MOVS     R3,R5
   \   000001FE   0x.... 0x....      BL       __aeabi_dmul
   \   00000202   0x0002             MOVS     R2,R0
   \   00000204   0x000B             MOVS     R3,R1
   \   00000206   0x4640             MOV      R0,R8
   \   00000208   0x4649             MOV      R1,R9
   \   0000020A   0x.... 0x....      BL       __aeabi_dsub
   \   0000020E   0x0004             MOVS     R4,R0
   \   00000210   0x000D             MOVS     R5,R1
   \   00000212   0x9811             LDR      R0,[SP, #+68]
   \   00000214   0x.... 0x....      BL       __aeabi_i2d
   \   00000218   0x0022             MOVS     R2,R4
   \   0000021A   0x002B             MOVS     R3,R5
   \   0000021C   0x.... 0x....      BL       __aeabi_dadd
   \   00000220   0x.... 0x....      BL       __aeabi_d2iz
   \   00000224   0x9001             STR      R0,[SP, #+4]
   1138          		result.z = (int)((pt.z - origin.z) * cos(ang) + (pt.y - origin.y) * sin(ang) + origin.z);
   \   00000226   0x0030             MOVS     R0,R6
   \   00000228   0x.... 0x....      BL       __aeabi_f2d
   \   0000022C   0x.... 0x....      BL       cos
   \   00000230   0x0004             MOVS     R4,R0
   \   00000232   0x000D             MOVS     R5,R1
   \   00000234   0x9806             LDR      R0,[SP, #+24]
   \   00000236   0x9912             LDR      R1,[SP, #+72]
   \   00000238   0x1A40             SUBS     R0,R0,R1
   \   0000023A   0x.... 0x....      BL       __aeabi_i2d
   \   0000023E   0x0022             MOVS     R2,R4
   \   00000240   0x002B             MOVS     R3,R5
   \   00000242   0x.... 0x....      BL       __aeabi_dmul
   \   00000246   0x4680             MOV      R8,R0
   \   00000248   0x4689             MOV      R9,R1
   \   0000024A   0x9805             LDR      R0,[SP, #+20]
   \   0000024C   0x9911             LDR      R1,[SP, #+68]
   \   0000024E   0x1A40             SUBS     R0,R0,R1
   \   00000250   0x.... 0x....      BL       __aeabi_i2d
   \   00000254   0x0004             MOVS     R4,R0
   \   00000256   0x000D             MOVS     R5,R1
   \   00000258   0x0030             MOVS     R0,R6
   \   0000025A   0x.... 0x....      BL       __aeabi_f2d
   \   0000025E   0x.... 0x....      BL       sin
   \   00000262   0x0022             MOVS     R2,R4
   \   00000264   0x002B             MOVS     R3,R5
   \   00000266   0x.... 0x....      BL       __aeabi_dmul
   \   0000026A   0x4642             MOV      R2,R8
   \   0000026C   0x464B             MOV      R3,R9
   \   0000026E   0x.... 0x....      BL       __aeabi_dadd
   \   00000272   0x0004             MOVS     R4,R0
   \   00000274   0x000D             MOVS     R5,R1
   \   00000276   0x9812             LDR      R0,[SP, #+72]
   \   00000278   0x.... 0x....      BL       __aeabi_i2d
   \   0000027C   0x0022             MOVS     R2,R4
   \   0000027E   0x002B             MOVS     R3,R5
   \   00000280   0x.... 0x....      BL       __aeabi_dadd
   \   00000284   0x.... 0x....      BL       __aeabi_d2iz
   \   00000288   0x9002             STR      R0,[SP, #+8]
   1139          		result.x = pt.x;
   \   0000028A   0x9804             LDR      R0,[SP, #+16]
   \   0000028C   0x9000             STR      R0,[SP, #+0]
   1140          		break;
   1141          	}
   1142          
   1143          	return result;
   \                     ??CALC_PtRotate_3: (+1)
   \   0000028E   0x4668             MOV      R0,SP
   \   00000290   0xC80E             LDM      R0!,{R1-R3}
   \   00000292   0xC70E             STM      R7!,{R1-R3}
   \   00000294   0x380C             SUBS     R0,R0,#+12
   \   00000296   0x3F0C             SUBS     R7,R7,#+12
   \   00000298   0xB007             ADD      SP,SP,#+28
   \   0000029A   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1144          }
   1145          

   \                                 In section .text, align 2, keep-with-next
   1146          void CALC_My3d(void)
   1147          {
   \                     CALC_My3d: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0A4             SUB      SP,SP,#+144
   1148          	int i, j;
   1149          
   1150          	for (i = 0; i < 128; i++)
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0xE009             B.N      ??CALC_My3d_0
   1151          		for (j = 0; j < 8; j++)
   1152          			calc.myScene[i][j] = 0;
   \                     ??CALC_My3d_1: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable3_4
   \   0000000A   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   0000000E   0x1828             ADDS     R0,R5,R0
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7601             STRB     R1,[R0, #+24]
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CALC_My3d_2: (+1)
   \   00000016   0x2D08             CMP      R5,#+8
   \   00000018   0xDBF6             BLT.N    ??CALC_My3d_1
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_My3d_0: (+1)
   \   0000001C   0x2C80             CMP      R4,#+128
   \   0000001E   0xDA01             BGE.N    ??CALC_My3d_3
   \   00000020   0x2500             MOVS     R5,#+0
   \   00000022   0xE7F8             B.N      ??CALC_My3d_2
   1153          
   1154          	for (i = 0; i < 128; i++)
   \                     ??CALC_My3d_3: (+1)
   \   00000024   0x2400             MOVS     R4,#+0
   \   00000026   0xE00B             B.N      ??CALC_My3d_4
   1155          		for (j = 0; j < 64; j++)
   1156          			z_buf[i][j] = 0;
   \                     ??CALC_My3d_5: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable3_9
   \   0000002A   0xF44F 0x7180      MOV      R1,#+256
   \   0000002E   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0xF840 0x1025      STR      R1,[R0, R5, LSL #+2]
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CALC_My3d_6: (+1)
   \   0000003A   0x2D40             CMP      R5,#+64
   \   0000003C   0xDBF4             BLT.N    ??CALC_My3d_5
   \   0000003E   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_My3d_4: (+1)
   \   00000040   0x2C80             CMP      R4,#+128
   \   00000042   0xDA01             BGE.N    ??CALC_My3d_7
   \   00000044   0x2500             MOVS     R5,#+0
   \   00000046   0xE7F8             B.N      ??CALC_My3d_6
   1157          
   1158          	points rotateCube[8];
   1159          	points origin = {0, 0, 0};
   \                     ??CALC_My3d_7: (+1)
   \   00000048   0xA808             ADD      R0,SP,#+32
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2300             MOVS     R3,#+0
   \   00000050   0xC00E             STM      R0!,{R1-R3}
   \   00000052   0x380C             SUBS     R0,R0,#+12
   1160          	for (i = 0; i < 8; i++)
   \   00000054   0x2400             MOVS     R4,#+0
   \   00000056   0xE00C             B.N      ??CALC_My3d_8
   1161          		rotateCube[i] = cube[i];
   \                     ??CALC_My3d_9: (+1)
   \   00000058   0xA80B             ADD      R0,SP,#+44
   \   0000005A   0x210C             MOVS     R1,#+12
   \   0000005C   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000060   0x....             LDR.N    R1,??DataTable3_10
   \   00000062   0x220C             MOVS     R2,#+12
   \   00000064   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000068   0xC92C             LDM      R1!,{R2,R3,R5}
   \   0000006A   0xC02C             STM      R0!,{R2,R3,R5}
   \   0000006C   0x390C             SUBS     R1,R1,#+12
   \   0000006E   0x380C             SUBS     R0,R0,#+12
   \   00000070   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_My3d_8: (+1)
   \   00000072   0x2C08             CMP      R4,#+8
   \   00000074   0xDBF0             BLT.N    ??CALC_My3d_9
   1162          
   1163          	for (i = 0; i < 8; i++)
   \   00000076   0x2400             MOVS     R4,#+0
   \   00000078   0xE078             B.N      ??CALC_My3d_10
   1164          	{
   1165          		rotateCube[i] = CALC_PtRotate(rotateCube[i], CALC_AXISX, (calc.angY / 13000.0), origin);
   \                     ??CALC_My3d_11: (+1)
   \   0000007A   0xA808             ADD      R0,SP,#+32
   \   0000007C   0xAA02             ADD      R2,SP,#+8
   \   0000007E   0xC80A             LDM      R0!,{R1,R3}
   \   00000080   0xC20A             STM      R2!,{R1,R3}
   \   00000082   0x6803             LDR      R3,[R0, #0]
   \   00000084   0x6013             STR      R3,[R2, #+0]
   \   00000086   0x3808             SUBS     R0,R0,#+8
   \   00000088   0x3A08             SUBS     R2,R2,#+8
   \   0000008A   0x....             LDR.N    R0,??DataTable3_4
   \   0000008C   0xF8D0 0x041C      LDR      R0,[R0, #+1052]
   \   00000090   0x.... 0x....      BL       __aeabi_i2d
   \   00000094   0x2200             MOVS     R2,#+0
   \   00000096   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   00000098   0x.... 0x....      BL       __aeabi_ddiv
   \   0000009C   0x.... 0x....      BL       __aeabi_d2f
   \   000000A0   0x9001             STR      R0,[SP, #+4]
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0xA80B             ADD      R0,SP,#+44
   \   000000A8   0x210C             MOVS     R1,#+12
   \   000000AA   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000000AE   0xE890 0x000E      LDM      R0,{R1-R3}
   \   000000B2   0xA805             ADD      R0,SP,#+20
   \   000000B4   0x.... 0x....      BL       CALC_PtRotate
   \   000000B8   0xA80B             ADD      R0,SP,#+44
   \   000000BA   0x210C             MOVS     R1,#+12
   \   000000BC   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000000C0   0xA905             ADD      R1,SP,#+20
   \   000000C2   0xC92C             LDM      R1!,{R2,R3,R5}
   \   000000C4   0xC02C             STM      R0!,{R2,R3,R5}
   \   000000C6   0x390C             SUBS     R1,R1,#+12
   \   000000C8   0x380C             SUBS     R0,R0,#+12
   1166          		rotateCube[i] = CALC_PtRotate(rotateCube[i], CALC_AXISY, (calc.angZ / 13000.0), origin);
   \   000000CA   0xA808             ADD      R0,SP,#+32
   \   000000CC   0xAA02             ADD      R2,SP,#+8
   \   000000CE   0xC80A             LDM      R0!,{R1,R3}
   \   000000D0   0xC20A             STM      R2!,{R1,R3}
   \   000000D2   0x6803             LDR      R3,[R0, #0]
   \   000000D4   0x6013             STR      R3,[R2, #+0]
   \   000000D6   0x3808             SUBS     R0,R0,#+8
   \   000000D8   0x3A08             SUBS     R2,R2,#+8
   \   000000DA   0x....             LDR.N    R0,??DataTable3_4
   \   000000DC   0xF8D0 0x0420      LDR      R0,[R0, #+1056]
   \   000000E0   0x.... 0x....      BL       __aeabi_i2d
   \   000000E4   0x2200             MOVS     R2,#+0
   \   000000E6   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   000000E8   0x.... 0x....      BL       __aeabi_ddiv
   \   000000EC   0x.... 0x....      BL       __aeabi_d2f
   \   000000F0   0x9001             STR      R0,[SP, #+4]
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0x9000             STR      R0,[SP, #+0]
   \   000000F6   0xA80B             ADD      R0,SP,#+44
   \   000000F8   0x210C             MOVS     R1,#+12
   \   000000FA   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000000FE   0xE890 0x000E      LDM      R0,{R1-R3}
   \   00000102   0xA805             ADD      R0,SP,#+20
   \   00000104   0x.... 0x....      BL       CALC_PtRotate
   \   00000108   0xA80B             ADD      R0,SP,#+44
   \   0000010A   0x210C             MOVS     R1,#+12
   \   0000010C   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000110   0xA905             ADD      R1,SP,#+20
   \   00000112   0xC92C             LDM      R1!,{R2,R3,R5}
   \   00000114   0xC02C             STM      R0!,{R2,R3,R5}
   \   00000116   0x390C             SUBS     R1,R1,#+12
   \   00000118   0x380C             SUBS     R0,R0,#+12
   1167          		rotateCube[i] = CALC_PtRotate(rotateCube[i], CALC_AXISZ, (calc.angX / 13000.0), origin);
   \   0000011A   0xA808             ADD      R0,SP,#+32
   \   0000011C   0xAA02             ADD      R2,SP,#+8
   \   0000011E   0xC80A             LDM      R0!,{R1,R3}
   \   00000120   0xC20A             STM      R2!,{R1,R3}
   \   00000122   0x6803             LDR      R3,[R0, #0]
   \   00000124   0x6013             STR      R3,[R2, #+0]
   \   00000126   0x3808             SUBS     R0,R0,#+8
   \   00000128   0x3A08             SUBS     R2,R2,#+8
   \   0000012A   0x....             LDR.N    R0,??DataTable3_4
   \   0000012C   0xF8D0 0x0418      LDR      R0,[R0, #+1048]
   \   00000130   0x.... 0x....      BL       __aeabi_i2d
   \   00000134   0x2200             MOVS     R2,#+0
   \   00000136   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   00000138   0x.... 0x....      BL       __aeabi_ddiv
   \   0000013C   0x.... 0x....      BL       __aeabi_d2f
   \   00000140   0x9001             STR      R0,[SP, #+4]
   \   00000142   0x2002             MOVS     R0,#+2
   \   00000144   0x9000             STR      R0,[SP, #+0]
   \   00000146   0xA80B             ADD      R0,SP,#+44
   \   00000148   0x210C             MOVS     R1,#+12
   \   0000014A   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000014E   0xE890 0x000E      LDM      R0,{R1-R3}
   \   00000152   0xA805             ADD      R0,SP,#+20
   \   00000154   0x.... 0x....      BL       CALC_PtRotate
   \   00000158   0xA80B             ADD      R0,SP,#+44
   \   0000015A   0x210C             MOVS     R1,#+12
   \   0000015C   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000160   0xA905             ADD      R1,SP,#+20
   \   00000162   0xC92C             LDM      R1!,{R2,R3,R5}
   \   00000164   0xC02C             STM      R0!,{R2,R3,R5}
   \   00000166   0x390C             SUBS     R1,R1,#+12
   \   00000168   0x380C             SUBS     R0,R0,#+12
   1168          	}
   \   0000016A   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_My3d_10: (+1)
   \   0000016C   0x2C08             CMP      R4,#+8
   \   0000016E   0xDB84             BLT.N    ??CALC_My3d_11
   1169          
   1170          	CALC_3dConnect(&rotateCube[0], 4, 1, 1);
   \   00000170   0x2301             MOVS     R3,#+1
   \   00000172   0x2201             MOVS     R2,#+1
   \   00000174   0x2104             MOVS     R1,#+4
   \   00000176   0xA80B             ADD      R0,SP,#+44
   \   00000178   0x.... 0x....      BL       CALC_3dConnect
   1171          	CALC_3dConnect(&rotateCube[4], 4, 1, 1);
   \   0000017C   0x2301             MOVS     R3,#+1
   \   0000017E   0x2201             MOVS     R2,#+1
   \   00000180   0x2104             MOVS     R1,#+4
   \   00000182   0xA817             ADD      R0,SP,#+92
   \   00000184   0x.... 0x....      BL       CALC_3dConnect
   1172          	for (i = 0; i < 4; i++)
   \   00000188   0x2400             MOVS     R4,#+0
   \   0000018A   0xE017             B.N      ??CALC_My3d_12
   1173          		CALC_3dDrawLine(rotateCube[i], rotateCube[i + 4], 1);
   \                     ??CALC_My3d_13: (+1)
   \   0000018C   0x2001             MOVS     R0,#+1
   \   0000018E   0x9002             STR      R0,[SP, #+8]
   \   00000190   0xA80B             ADD      R0,SP,#+44
   \   00000192   0x210C             MOVS     R1,#+12
   \   00000194   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000198   0x3030             ADDS     R0,R0,#+48
   \   0000019A   0xB081             SUB      SP,SP,#+4
   \   0000019C   0x4669             MOV      R1,SP
   \   0000019E   0xC80C             LDM      R0!,{R2,R3}
   \   000001A0   0xC10C             STM      R1!,{R2,R3}
   \   000001A2   0x6802             LDR      R2,[R0, #0]
   \   000001A4   0x600A             STR      R2,[R1, #+0]
   \   000001A6   0x3808             SUBS     R0,R0,#+8
   \   000001A8   0x3908             SUBS     R1,R1,#+8
   \   000001AA   0xBC08             POP      {R3}
   \   000001AC   0xA80B             ADD      R0,SP,#+44
   \   000001AE   0x210C             MOVS     R1,#+12
   \   000001B0   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000001B4   0xC807             LDM      R0,{R0-R2}
   \   000001B6   0x.... 0x....      BL       CALC_3dDrawLine
   \   000001BA   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_My3d_12: (+1)
   \   000001BC   0x2C04             CMP      R4,#+4
   \   000001BE   0xDBE5             BLT.N    ??CALC_My3d_13
   1174          
   1175          //	points surface[256] = {0};
   1176          
   1177          	points surface;
   1178          
   1179          	for (i = 0; i < 16; i++)
   \   000001C0   0x2400             MOVS     R4,#+0
   \   000001C2   0xE0E2             B.N      ??CALC_My3d_14
   1180          	{
   1181          		for (j = 0; j < 16; j++)
   1182          		{
   1183          //			surface[i * 16 + j].y -= 90;
   1184          //			surface[i * 16 + j].x += i;
   1185          //			surface[i * 16 + j].z += j;
   1186          //
   1187          //			surface[i * 16 + j] = CALC_PtRotate(surface[i * 16 + j], CALC_AXISX, (calc.angY / 13000.0), origin);
   1188          //			surface[i * 16 + j] = CALC_PtRotate(surface[i * 16 + j], CALC_AXISY, (calc.angZ / 13000.0), origin);
   1189          //			surface[i * 16 + j] = CALC_PtRotate(surface[i * 16 + j], CALC_AXISZ, (calc.angX / 13000.0), origin);
   1190          //
   1191          //			CALC_3dSetPix(surface[i * 16 + j], CALC_GetCHPix(1, i, j));
   1192          
   1193          			surface = origin;
   \                     ??CALC_My3d_15: (+1)
   \   000001C4   0xA805             ADD      R0,SP,#+20
   \   000001C6   0xA908             ADD      R1,SP,#+32
   \   000001C8   0xC94C             LDM      R1!,{R2,R3,R6}
   \   000001CA   0xC04C             STM      R0!,{R2,R3,R6}
   \   000001CC   0x390C             SUBS     R1,R1,#+12
   \   000001CE   0x380C             SUBS     R0,R0,#+12
   1194          
   1195          			surface.y -= 70;
   \   000001D0   0x9806             LDR      R0,[SP, #+24]
   \   000001D2   0x3846             SUBS     R0,R0,#+70
   \   000001D4   0x9006             STR      R0,[SP, #+24]
   1196          			surface.x += i;
   \   000001D6   0x9805             LDR      R0,[SP, #+20]
   \   000001D8   0x1820             ADDS     R0,R4,R0
   \   000001DA   0x9005             STR      R0,[SP, #+20]
   1197          			surface.z += j;
   \   000001DC   0x9807             LDR      R0,[SP, #+28]
   \   000001DE   0x1828             ADDS     R0,R5,R0
   \   000001E0   0x9007             STR      R0,[SP, #+28]
   1198          
   1199          			surface = CALC_PtRotate(surface, CALC_AXISX, (calc.angY / 13000.0), origin);
   \   000001E2   0xA808             ADD      R0,SP,#+32
   \   000001E4   0xAA02             ADD      R2,SP,#+8
   \   000001E6   0xC80A             LDM      R0!,{R1,R3}
   \   000001E8   0xC20A             STM      R2!,{R1,R3}
   \   000001EA   0x6803             LDR      R3,[R0, #0]
   \   000001EC   0x6013             STR      R3,[R2, #+0]
   \   000001EE   0x3808             SUBS     R0,R0,#+8
   \   000001F0   0x3A08             SUBS     R2,R2,#+8
   \   000001F2   0x....             LDR.N    R0,??DataTable3_4
   \   000001F4   0xF8D0 0x041C      LDR      R0,[R0, #+1052]
   \   000001F8   0x.... 0x....      BL       __aeabi_i2d
   \   000001FC   0x2200             MOVS     R2,#+0
   \   000001FE   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   00000200   0x.... 0x....      BL       __aeabi_ddiv
   \   00000204   0x.... 0x....      BL       __aeabi_d2f
   \   00000208   0x9001             STR      R0,[SP, #+4]
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x9000             STR      R0,[SP, #+0]
   \   0000020E   0xA805             ADD      R0,SP,#+20
   \   00000210   0xE890 0x000E      LDM      R0,{R1-R3}
   \   00000214   0xA805             ADD      R0,SP,#+20
   \   00000216   0x.... 0x....      BL       CALC_PtRotate
   1200          			surface = CALC_PtRotate(surface, CALC_AXISY, (calc.angZ / 13000.0), origin);
   \   0000021A   0xA808             ADD      R0,SP,#+32
   \   0000021C   0xAA02             ADD      R2,SP,#+8
   \   0000021E   0xC80A             LDM      R0!,{R1,R3}
   \   00000220   0xC20A             STM      R2!,{R1,R3}
   \   00000222   0x6803             LDR      R3,[R0, #0]
   \   00000224   0x6013             STR      R3,[R2, #+0]
   \   00000226   0x3808             SUBS     R0,R0,#+8
   \   00000228   0x3A08             SUBS     R2,R2,#+8
   \   0000022A   0x....             LDR.N    R0,??DataTable3_4
   \   0000022C   0xF8D0 0x0420      LDR      R0,[R0, #+1056]
   \   00000230   0x.... 0x....      BL       __aeabi_i2d
   \   00000234   0x2200             MOVS     R2,#+0
   \   00000236   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   00000238   0x.... 0x....      BL       __aeabi_ddiv
   \   0000023C   0x.... 0x....      BL       __aeabi_d2f
   \   00000240   0x9001             STR      R0,[SP, #+4]
   \   00000242   0x2001             MOVS     R0,#+1
   \   00000244   0x9000             STR      R0,[SP, #+0]
   \   00000246   0xA805             ADD      R0,SP,#+20
   \   00000248   0xE890 0x000E      LDM      R0,{R1-R3}
   \   0000024C   0xA805             ADD      R0,SP,#+20
   \   0000024E   0x.... 0x....      BL       CALC_PtRotate
   1201          			surface = CALC_PtRotate(surface, CALC_AXISZ, (calc.angX / 13000.0), origin);
   \   00000252   0xA808             ADD      R0,SP,#+32
   \   00000254   0xAA02             ADD      R2,SP,#+8
   \   00000256   0xC80A             LDM      R0!,{R1,R3}
   \   00000258   0xC20A             STM      R2!,{R1,R3}
   \   0000025A   0x6803             LDR      R3,[R0, #0]
   \   0000025C   0x6013             STR      R3,[R2, #+0]
   \   0000025E   0x3808             SUBS     R0,R0,#+8
   \   00000260   0x3A08             SUBS     R2,R2,#+8
   \   00000262   0x....             LDR.N    R0,??DataTable3_4
   \   00000264   0xF8D0 0x0418      LDR      R0,[R0, #+1048]
   \   00000268   0x.... 0x....      BL       __aeabi_i2d
   \   0000026C   0x2200             MOVS     R2,#+0
   \   0000026E   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   00000270   0x.... 0x....      BL       __aeabi_ddiv
   \   00000274   0x.... 0x....      BL       __aeabi_d2f
   \   00000278   0x9001             STR      R0,[SP, #+4]
   \   0000027A   0x2002             MOVS     R0,#+2
   \   0000027C   0x9000             STR      R0,[SP, #+0]
   \   0000027E   0xA805             ADD      R0,SP,#+20
   \   00000280   0xE890 0x000E      LDM      R0,{R1-R3}
   \   00000284   0xA805             ADD      R0,SP,#+20
   \   00000286   0x.... 0x....      BL       CALC_PtRotate
   1202          
   1203          			CALC_3dSetPix(surface, CALC_GetCHPix(0, i, j));
   \   0000028A   0x002A             MOVS     R2,R5
   \   0000028C   0x0021             MOVS     R1,R4
   \   0000028E   0x2000             MOVS     R0,#+0
   \   00000290   0x.... 0x....      BL       CALC_GetCHPix
   \   00000294   0x0003             MOVS     R3,R0
   \   00000296   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000298   0xA805             ADD      R0,SP,#+20
   \   0000029A   0xC807             LDM      R0,{R0-R2}
   \   0000029C   0x.... 0x....      BL       CALC_3dSetPix
   1204          
   1205          			surface = origin;
   \   000002A0   0xA805             ADD      R0,SP,#+20
   \   000002A2   0xA908             ADD      R1,SP,#+32
   \   000002A4   0xC94C             LDM      R1!,{R2,R3,R6}
   \   000002A6   0xC04C             STM      R0!,{R2,R3,R6}
   \   000002A8   0x390C             SUBS     R1,R1,#+12
   \   000002AA   0x380C             SUBS     R0,R0,#+12
   1206          
   1207          			surface.y -= 70;
   \   000002AC   0x9806             LDR      R0,[SP, #+24]
   \   000002AE   0x3846             SUBS     R0,R0,#+70
   \   000002B0   0x9006             STR      R0,[SP, #+24]
   1208          			surface.x += i + 16;
   \   000002B2   0x9805             LDR      R0,[SP, #+20]
   \   000002B4   0xF114 0x0110      ADDS     R1,R4,#+16
   \   000002B8   0x1808             ADDS     R0,R1,R0
   \   000002BA   0x9005             STR      R0,[SP, #+20]
   1209          			surface.z += j;
   \   000002BC   0x9807             LDR      R0,[SP, #+28]
   \   000002BE   0x1828             ADDS     R0,R5,R0
   \   000002C0   0x9007             STR      R0,[SP, #+28]
   1210          
   1211          			surface = CALC_PtRotate(surface, CALC_AXISX, (calc.angY / 13000.0), origin);
   \   000002C2   0xA808             ADD      R0,SP,#+32
   \   000002C4   0xAA02             ADD      R2,SP,#+8
   \   000002C6   0xC80A             LDM      R0!,{R1,R3}
   \   000002C8   0xC20A             STM      R2!,{R1,R3}
   \   000002CA   0x6803             LDR      R3,[R0, #0]
   \   000002CC   0x6013             STR      R3,[R2, #+0]
   \   000002CE   0x3808             SUBS     R0,R0,#+8
   \   000002D0   0x3A08             SUBS     R2,R2,#+8
   \   000002D2   0x....             LDR.N    R0,??DataTable3_4
   \   000002D4   0xF8D0 0x041C      LDR      R0,[R0, #+1052]
   \   000002D8   0x.... 0x....      BL       __aeabi_i2d
   \   000002DC   0x2200             MOVS     R2,#+0
   \   000002DE   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   000002E0   0x.... 0x....      BL       __aeabi_ddiv
   \   000002E4   0x.... 0x....      BL       __aeabi_d2f
   \   000002E8   0x9001             STR      R0,[SP, #+4]
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0x9000             STR      R0,[SP, #+0]
   \   000002EE   0xA805             ADD      R0,SP,#+20
   \   000002F0   0xE890 0x000E      LDM      R0,{R1-R3}
   \   000002F4   0xA805             ADD      R0,SP,#+20
   \   000002F6   0x.... 0x....      BL       CALC_PtRotate
   1212          			surface = CALC_PtRotate(surface, CALC_AXISY, (calc.angZ / 13000.0), origin);
   \   000002FA   0xA808             ADD      R0,SP,#+32
   \   000002FC   0xAA02             ADD      R2,SP,#+8
   \   000002FE   0xC80A             LDM      R0!,{R1,R3}
   \   00000300   0xC20A             STM      R2!,{R1,R3}
   \   00000302   0x6803             LDR      R3,[R0, #0]
   \   00000304   0x6013             STR      R3,[R2, #+0]
   \   00000306   0x3808             SUBS     R0,R0,#+8
   \   00000308   0x3A08             SUBS     R2,R2,#+8
   \   0000030A   0x....             LDR.N    R0,??DataTable3_4
   \   0000030C   0xF8D0 0x0420      LDR      R0,[R0, #+1056]
   \   00000310   0x.... 0x....      BL       __aeabi_i2d
   \   00000314   0x2200             MOVS     R2,#+0
   \   00000316   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   00000318   0x.... 0x....      BL       __aeabi_ddiv
   \   0000031C   0x.... 0x....      BL       __aeabi_d2f
   \   00000320   0x9001             STR      R0,[SP, #+4]
   \   00000322   0x2001             MOVS     R0,#+1
   \   00000324   0x9000             STR      R0,[SP, #+0]
   \   00000326   0xA805             ADD      R0,SP,#+20
   \   00000328   0xE890 0x000E      LDM      R0,{R1-R3}
   \   0000032C   0xA805             ADD      R0,SP,#+20
   \   0000032E   0x.... 0x....      BL       CALC_PtRotate
   1213          			surface = CALC_PtRotate(surface, CALC_AXISZ, (calc.angX / 13000.0), origin);
   \   00000332   0xA808             ADD      R0,SP,#+32
   \   00000334   0xAA02             ADD      R2,SP,#+8
   \   00000336   0xC80A             LDM      R0!,{R1,R3}
   \   00000338   0xC20A             STM      R2!,{R1,R3}
   \   0000033A   0x6803             LDR      R3,[R0, #0]
   \   0000033C   0x6013             STR      R3,[R2, #+0]
   \   0000033E   0x3808             SUBS     R0,R0,#+8
   \   00000340   0x3A08             SUBS     R2,R2,#+8
   \   00000342   0x....             LDR.N    R0,??DataTable3_4
   \   00000344   0xF8D0 0x0418      LDR      R0,[R0, #+1048]
   \   00000348   0x.... 0x....      BL       __aeabi_i2d
   \   0000034C   0x2200             MOVS     R2,#+0
   \   0000034E   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40c96400
   \   00000350   0x.... 0x....      BL       __aeabi_ddiv
   \   00000354   0x.... 0x....      BL       __aeabi_d2f
   \   00000358   0x9001             STR      R0,[SP, #+4]
   \   0000035A   0x2002             MOVS     R0,#+2
   \   0000035C   0x9000             STR      R0,[SP, #+0]
   \   0000035E   0xA805             ADD      R0,SP,#+20
   \   00000360   0xE890 0x000E      LDM      R0,{R1-R3}
   \   00000364   0xA805             ADD      R0,SP,#+20
   \   00000366   0x.... 0x....      BL       CALC_PtRotate
   1214          
   1215          			CALC_3dSetPix(surface, CALC_GetCHPix(1, i, j));
   \   0000036A   0x002A             MOVS     R2,R5
   \   0000036C   0x0021             MOVS     R1,R4
   \   0000036E   0x2001             MOVS     R0,#+1
   \   00000370   0x.... 0x....      BL       CALC_GetCHPix
   \   00000374   0x0003             MOVS     R3,R0
   \   00000376   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000378   0xA805             ADD      R0,SP,#+20
   \   0000037A   0xC807             LDM      R0,{R0-R2}
   \   0000037C   0x.... 0x....      BL       CALC_3dSetPix
   1216          		}
   \   00000380   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CALC_My3d_16: (+1)
   \   00000382   0x2D10             CMP      R5,#+16
   \   00000384   0xF6FF 0xAF1E      BLT.W    ??CALC_My3d_15
   \   00000388   0x1C64             ADDS     R4,R4,#+1
   \                     ??CALC_My3d_14: (+1)
   \   0000038A   0x2C10             CMP      R4,#+16
   \   0000038C   0xDA01             BGE.N    ??CALC_My3d_17
   \   0000038E   0x2500             MOVS     R5,#+0
   \   00000390   0xE7F7             B.N      ??CALC_My3d_16
   1217          	}
   1218          }
   \                     ??CALC_My3d_17: (+1)
   \   00000392   0xB024             ADD      SP,SP,#+144
   \   00000394   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     twinCore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ??posJumpR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ??posJumpL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ??curJumpL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ??cntJumpL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ??cntJumpR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     flag_stopR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     flag_stopL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     camera

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     calc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     led

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     state_out

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     bit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     charCH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     z_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     cube

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x40C96400         DC32     0x40c96400

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      44   CALC_3dConnect
        40   -> CALC_3dDrawLine
      32   CALC_3dDrawLine
        32   -> CALC_3to2
        32   -> CALC_DrawLine
      16   CALC_3dSetPix
        16   -> CALC_3to2
        16   -> CALC_SetPix
      12   CALC_3to2
      24   CALC_Calc
        24   -- Indirect call
        24   -> abs
        24   -> limitX
      48   CALC_DrawLine
        48   -> CALC_SetPix
       4   CALC_GetCHPix
     164   CALC_My3d
       160   -> CALC_3dConnect
       160   -> CALC_3dDrawLine
       160   -> CALC_3dSetPix
       160   -> CALC_GetCHPix
       160   -> CALC_PtRotate
       160   -> __aeabi_d2f
       160   -> __aeabi_ddiv
       160   -> __aeabi_i2d
      56   CALC_PtRotate
        56   -> __aeabi_d2iz
        56   -> __aeabi_dadd
        56   -> __aeabi_dmul
        56   -> __aeabi_dsub
        56   -> __aeabi_f2d
        56   -> __aeabi_i2d
        56   -> cos
        56   -> sin
       8   CALC_SetPix
       0   limitX


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      12  ?_0
     120  CALC_3dConnect
      52  CALC_3dDrawLine
      48  CALC_3dSetPix
      52  CALC_3to2
    4422  CALC_Calc
     186  CALC_DrawLine
      46  CALC_GetCHPix
     918  CALC_My3d
     670  CALC_PtRotate
     124  CALC_SetPix
       8  aBit
       8  bit
    1088  calc
      64  charCH
       4  cntJumpL
       4  cntJumpR
      96  cube
       4  curJumpL
       4  curJumpR
       4  flag_stopL
       4  flag_stopR
      18  limitX
     480  lineL
     480  lineR
      40  posJumpL
      40  posJumpR
      84  state_out
   32768  z_buf

 
 33 916 bytes in section .bss
  1 088 bytes in section .data
    188 bytes in section .rodata
  6 724 bytes in section .text
 
  6 724 bytes of CODE  memory
    188 bytes of CONST memory
 35 004 bytes of DATA  memory

Errors: none
Warnings: 1
