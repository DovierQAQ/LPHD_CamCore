###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       01/Aug/2018  12:09:48
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\mpu6050\i2c.c
#    Command line =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\mpu6050\i2c.c
#        -D LPLD_K60 -D USE_K60D10 -lCN
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -lB
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List
#        -o C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\camera\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\led\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\oled\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\task\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\uart\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\twinCore\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\mpu6050\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\nrf\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\calc\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\UI\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\app\ledArray\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\CPU\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\common\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\driver\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\..\lib\USB\class\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\List\i2c.lst
#    Object file  =  
#        C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\iar\FLASH\Obj\i2c.o
#
###############################################################################

C:\Users\ShowD\Desktop\LPHD\LPHD_camCore\LPHD_camCore\app\mpu6050\i2c.c
      1          #include "i2c.h"
      2          
      3          /****Discription**********************************************/
      4          
      5          /*
      6          	0.需先调用i2c.Init()函数再使用本驱动
      7          		有返回值，0表示成功
      8          	1.头文件中修改I2C模块与引脚以及时钟频率
      9          	2.i2c.ReadReg()获得8位寄存器数据
     10          		i2c.ReadWord()获得16位数据
     11          	3.i2c.WriteReg()填寄存器
     12          
     13          	@Time	2018-04-25
     14          	@Author	郭帆
     15          	@Usefor	mpu6050
     16          */
     17          
     18          /****Definitions**********************************************/
     19          
     20          /****Functions************************************************/
     21          
     22          uint8 I2C_Init(void);
     23          uint8 I2C_ReadReg(uint8 addr, uint8 reg);
     24          uint16 I2C_ReadWord(uint8 addr, uint8 reg, IIC_LSB_TURN tn);
     25          uint8 I2C_WriteReg(uint8 addr, uint8 writeAddr, uint8 data);
     26          
     27          /****Variables************************************************/
     28          
     29          /****Objects**************************************************/
     30          

   \                                 In section .data, align 4
     31          I2C_CLASS i2c =
   \                     i2c:
   \   00000000   0x........         DC32 I2C_Init, I2C_ReadReg, I2C_ReadWord, I2C_WriteReg
   \              0x........   
   \              0x........   
   \              0x........   
     32          {
     33          	&I2C_Init,
     34          	&I2C_ReadReg,
     35          	&I2C_ReadWord,
     36          	&I2C_WriteReg
     37          };
     38          
     39          /****Functions************************************************/
     40          

   \                                 In section .text, align 4, keep-with-next
     41          static void I2C_Delay(void)
     42          {
     43          	for (int i = 0; i < 100; i++) asm("nop");
   \                     I2C_Delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE001             B.N      ??I2C_Delay_0
   \                     ??I2C_Delay_1: (+1)
   \   00000004   0xBF00             nop
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \                     ??I2C_Delay_0: (+1)
   \   00000008   0x2864             CMP      R0,#+100
   \   0000000A   0xDBFB             BLT.N    ??I2C_Delay_1
     44          }
   \   0000000C   0x4770             BX       LR               ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          uint8 I2C_Init(void)
     47          {
   \                     I2C_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     48          	static I2C_InitTypeDef I2C_InitStructure;
     49          
     50          	I2C_InitStructure.I2C_I2Cx		= I2C_IICx;
   \   00000002   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000004   0x....             LDR.N    R1,??DataTable3_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
     51          	I2C_InitStructure.I2C_IntEnable	= FALSE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable3_1
   \   0000000C   0x7148             STRB     R0,[R1, #+5]
     52          	I2C_InitStructure.I2C_ICR		= I2C_SCL_FREQ;
   \   0000000E   0x2017             MOVS     R0,#+23
   \   00000010   0x....             LDR.N    R1,??DataTable3_1
   \   00000012   0x7108             STRB     R0,[R1, #+4]
     53          	I2C_InitStructure.I2C_SclPin	= I2C_SCL_Pinx;
   \   00000014   0x2046             MOVS     R0,#+70
   \   00000016   0x....             LDR.N    R1,??DataTable3_1
   \   00000018   0x7188             STRB     R0,[R1, #+6]
     54          	I2C_InitStructure.I2C_SdaPin	= I2C_SDA_Pinx;
   \   0000001A   0x2047             MOVS     R0,#+71
   \   0000001C   0x....             LDR.N    R1,??DataTable3_1
   \   0000001E   0x71C8             STRB     R0,[R1, #+7]
     55          	I2C_InitStructure.I2C_Isr		= NULL;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR.N    R1,??DataTable3_1
   \   00000024   0x60C8             STR      R0,[R1, #+12]
     56          
     57          	if (LPLD_I2C_Init(I2C_InitStructure))
   \   00000026   0x....             LDR.N    R0,??DataTable3_1
   \   00000028   0xC80F             LDM      R0,{R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_I2C_Init
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD001             BEQ.N    ??I2C_Init_0
     58          		return 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE000             B.N      ??I2C_Init_1
     59          
     60          	return 1;
   \                     ??I2C_Init_0: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??I2C_Init_1: (+1)
   \   00000038   0xBD02             POP      {R1,PC}          ;; return
     61          }

   \                                 In section .bss, align 4
   \                     ??I2C_InitStructure:
   \   00000000                      DS8 16
     62          

   \                                 In section .text, align 2, keep-with-next
     63          uint8 I2C_ReadReg(uint8 addr, uint8 reg)
     64          {
   \                     I2C_ReadReg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     65          	static uint8 result;
     66          	//发送从机地址
     67          	LPLD_I2C_StartTrans(I2C_IICx, addr, I2C_MWSR);
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x0021             MOVS     R1,R4
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000000E   0x.... 0x....      BL       LPLD_I2C_StartTrans
     68          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000016   0x.... 0x....      BL       LPLD_I2C_WaitAck
     69          	//写MMA8451寄存器地址
     70          	LPLD_I2C_WriteByte(I2C_IICx, reg);
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000020   0x.... 0x....      BL       LPLD_I2C_WriteByte
     71          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000028   0x.... 0x....      BL       LPLD_I2C_WaitAck
     72          	//再次产生开始信号
     73          	LPLD_I2C_ReStart(I2C_IICx);
   \   0000002C   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000002E   0x.... 0x....      BL       LPLD_I2C_ReStart
     74          	//发送从机地址和读取位
     75          	LPLD_I2C_WriteByte(I2C_IICx, (addr<<1)|I2C_MRSW);
   \   00000032   0x0060             LSLS     R0,R4,#+1
   \   00000034   0xF050 0x0101      ORRS     R1,R0,#0x1
   \   00000038   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003A   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000003C   0x.... 0x....      BL       LPLD_I2C_WriteByte
     76          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000044   0x.... 0x....      BL       LPLD_I2C_WaitAck
     77          	//转换主机模式为读
     78          	LPLD_I2C_SetMasterWR(I2C_IICx, I2C_MRSW);
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000004C   0x.... 0x....      BL       LPLD_I2C_SetMasterWR
     79          	//关闭应答ACK
     80          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_OFF);//关闭ACK
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000054   0x.... 0x....      BL       LPLD_I2C_WaitAck
     81          	//读IIC数据
     82          	result = LPLD_I2C_ReadByte(I2C_IICx);
   \   00000058   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000005A   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   0000005E   0x....             LDR.N    R1,??DataTable3_2
   \   00000060   0x7008             STRB     R0,[R1, #+0]
     83          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000066   0x.... 0x....      BL       LPLD_I2C_WaitAck
     84          	//发送停止信号
     85          	LPLD_I2C_Stop(I2C_IICx);
   \   0000006A   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000006C   0x.... 0x....      BL       LPLD_I2C_Stop
     86          	//读IIC数据
     87          	result = LPLD_I2C_ReadByte(I2C_IICx);
   \   00000070   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000072   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   00000076   0x....             LDR.N    R1,??DataTable3_2
   \   00000078   0x7008             STRB     R0,[R1, #+0]
     88          
     89          	I2C_Delay();
   \   0000007A   0x.... 0x....      BL       I2C_Delay
     90          	return result;
   \   0000007E   0x....             LDR.N    R0,??DataTable3_2
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     91          }

   \                                 In section .bss, align 1
   \                     ??result:
   \   00000000                      DS8 1
     92          

   \                                 In section .text, align 4, keep-with-next
     93          uint16 I2C_ReadWord(uint8 addr, uint8 reg, IIC_LSB_TURN tn)
     94          {
   \                     I2C_ReadWord: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0014             MOVS     R4,R2
     95          	int16 result_L, result_H;
     96          
     97          	//int i = 0;
     98          	//发送从机地址
     99          	LPLD_I2C_StartTrans(I2C_IICx, addr, I2C_MWSR);
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000010   0x.... 0x....      BL       LPLD_I2C_StartTrans
    100          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000018   0x.... 0x....      BL       LPLD_I2C_WaitAck
    101          	//写MMA8451寄存器地址
    102          	LPLD_I2C_WriteByte(I2C_IICx, reg);
   \   0000001C   0x0031             MOVS     R1,R6
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000022   0x.... 0x....      BL       LPLD_I2C_WriteByte
    103          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000002A   0x.... 0x....      BL       LPLD_I2C_WaitAck
    104          	//再次产生开始信号
    105          	LPLD_I2C_ReStart(I2C_IICx);
   \   0000002E   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000030   0x.... 0x....      BL       LPLD_I2C_ReStart
    106          	//发送从机地址和读取位
    107          	LPLD_I2C_WriteByte(I2C_IICx, (addr<<1)|I2C_MRSW);
   \   00000034   0x0068             LSLS     R0,R5,#+1
   \   00000036   0xF050 0x0101      ORRS     R1,R0,#0x1
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000003E   0x.... 0x....      BL       LPLD_I2C_WriteByte
    108          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000046   0x.... 0x....      BL       LPLD_I2C_WaitAck
    109          
    110          
    111          	//转换主机模式为读
    112          	LPLD_I2C_SetMasterWR(I2C_IICx, I2C_MRSW);
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000004E   0x.... 0x....      BL       LPLD_I2C_SetMasterWR
    113          
    114          	result_H = LPLD_I2C_ReadByte(I2C_IICx);
   \   00000052   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000054   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   00000058   0x0005             MOVS     R5,R0
    115          	I2C_IICx->C1 &= ~I2C_C1_TXAK_MASK;
   \   0000005A   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40067002
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000062   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40067002
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    116          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000066   0x2101             MOVS     R1,#+1
   \   00000068   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000006A   0x.... 0x....      BL       LPLD_I2C_WaitAck
    117          
    118          	result_H = LPLD_I2C_ReadByte(I2C_IICx);
   \   0000006E   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000070   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   00000074   0x0005             MOVS     R5,R0
    119          	I2C_IICx->C1 &= ~I2C_C1_TXAK_MASK;
   \   00000076   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40067002
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000007E   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40067002
   \   00000080   0x7008             STRB     R0,[R1, #+0]
    120          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000086   0x.... 0x....      BL       LPLD_I2C_WaitAck
    121          
    122          
    123          	result_L = LPLD_I2C_ReadByte(I2C_IICx);
   \   0000008A   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000008C   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   00000090   0x0006             MOVS     R6,R0
    124          
    125          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_OFF);//关闭ACK
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000096   0x.... 0x....      BL       LPLD_I2C_WaitAck
    126          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000009E   0x.... 0x....      BL       LPLD_I2C_WaitAck
    127          	LPLD_I2C_Stop(I2C_IICx);
   \   000000A2   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   000000A4   0x.... 0x....      BL       LPLD_I2C_Stop
    128          
    129          	for (int i = 0; i<20; i++){
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xE001             B.N      ??I2C_ReadWord_0
    130          		asm("nop");
   \                     ??I2C_ReadWord_1: (+1)
   \   000000AC   0xBF00             nop
    131          	}
   \   000000AE   0x1C40             ADDS     R0,R0,#+1
   \                     ??I2C_ReadWord_0: (+1)
   \   000000B0   0x2814             CMP      R0,#+20
   \   000000B2   0xDBFB             BLT.N    ??I2C_ReadWord_1
    132          	int t = 0;
   \   000000B4   0x2700             MOVS     R7,#+0
    133          	while ((I2C_IICx->S & I2C_S_BUSY_MASK))
   \                     ??I2C_ReadWord_2: (+1)
   \   000000B6   0x....             LDR.N    R0,??DataTable3_4  ;; 0x40067003
   \   000000B8   0x7800             LDRB     R0,[R0, #+0]
   \   000000BA   0x0680             LSLS     R0,R0,#+26
   \   000000BC   0xD509             BPL.N    ??I2C_ReadWord_3
    134          	{
    135          		LPLD_I2C_Stop(I2C_IICx);
   \   000000BE   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   000000C0   0x.... 0x....      BL       LPLD_I2C_Stop
    136          		t++;
   \   000000C4   0x1C7F             ADDS     R7,R7,#+1
    137          		if (t > 10)
   \   000000C6   0x2F0B             CMP      R7,#+11
   \   000000C8   0xDBF5             BLT.N    ??I2C_ReadWord_2
    138          		{
    139          			I2C_Init();
   \   000000CA   0x.... 0x....      BL       I2C_Init
    140          			if (t > 13)
   \   000000CE   0x2F0E             CMP      R7,#+14
   \   000000D0   0xDBF1             BLT.N    ??I2C_ReadWord_2
    141          			{
    142          				break;
    143          			}
    144          		}
    145          	}
    146          	if(tn==LSB_FIRST)
   \                     ??I2C_ReadWord_3: (+1)
   \   000000D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D4   0x2C01             CMP      R4,#+1
   \   000000D6   0xD102             BNE.N    ??I2C_ReadWord_4
    147          		result_H = result_L << 8 | result_H;
   \   000000D8   0xEA55 0x2506      ORRS     R5,R5,R6, LSL #+8
   \   000000DC   0xE001             B.N      ??I2C_ReadWord_5
    148          	else
    149          		result_H = result_H << 8 | result_L;
   \                     ??I2C_ReadWord_4: (+1)
   \   000000DE   0xEA56 0x2505      ORRS     R5,R6,R5, LSL #+8
    150          	return result_H;
   \                     ??I2C_ReadWord_5: (+1)
   \   000000E2   0x0028             MOVS     R0,R5
   \   000000E4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000E6   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    151          }
    152          

   \                                 In section .text, align 2, keep-with-next
    153          uint8 I2C_WriteReg(uint8 addr, uint8 writeAddr, uint8 data)
    154          {
   \                     I2C_WriteReg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
    155          	LPLD_I2C_StartTrans(I2C_IICx, addr, I2C_MWSR);
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000000E   0x.... 0x....      BL       LPLD_I2C_StartTrans
    156          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000016   0x.... 0x....      BL       LPLD_I2C_WaitAck
    157          	//写寄存器地址
    158          	LPLD_I2C_WriteByte(I2C_IICx, writeAddr);
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000020   0x.... 0x....      BL       LPLD_I2C_WriteByte
    159          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000028   0x.... 0x....      BL       LPLD_I2C_WaitAck
    160          	//向寄存器中写具体数据
    161          	LPLD_I2C_WriteByte(I2C_IICx, data);
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000030   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000032   0x.... 0x....      BL       LPLD_I2C_WriteByte
    162          	LPLD_I2C_WaitAck(I2C_IICx, I2C_ACK_ON);
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   0000003A   0x.... 0x....      BL       LPLD_I2C_WaitAck
    163          	//发送停止信号
    164          	LPLD_I2C_Stop(I2C_IICx);
   \   0000003E   0x....             LDR.N    R0,??DataTable3  ;; 0x40067000
   \   00000040   0x.... 0x....      BL       LPLD_I2C_Stop
    165          
    166          	I2C_Delay();
   \   00000044   0x.... 0x....      BL       I2C_Delay
    167          	return 0;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    168          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40067000         DC32     0x40067000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ??I2C_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ??result

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40067002         DC32     0x40067002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40067003         DC32     0x40067003

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   I2C_Delay
       8   I2C_Init
         8   -> LPLD_I2C_Init
      16   I2C_ReadReg
        16   -> I2C_Delay
        16   -> LPLD_I2C_ReStart
        16   -> LPLD_I2C_ReadByte
        16   -> LPLD_I2C_SetMasterWR
        16   -> LPLD_I2C_StartTrans
        16   -> LPLD_I2C_Stop
        16   -> LPLD_I2C_WaitAck
        16   -> LPLD_I2C_WriteByte
      24   I2C_ReadWord
        24   -> I2C_Init
        24   -> LPLD_I2C_ReStart
        24   -> LPLD_I2C_ReadByte
        24   -> LPLD_I2C_SetMasterWR
        24   -> LPLD_I2C_StartTrans
        24   -> LPLD_I2C_Stop
        24   -> LPLD_I2C_WaitAck
        24   -> LPLD_I2C_WriteByte
      16   I2C_WriteReg
        16   -> I2C_Delay
        16   -> LPLD_I2C_StartTrans
        16   -> LPLD_I2C_Stop
        16   -> LPLD_I2C_WaitAck
        16   -> LPLD_I2C_WriteByte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      14  I2C_Delay
      58  I2C_Init
      16  I2C_InitStructure
     132  I2C_ReadReg
     232  I2C_ReadWord
      76  I2C_WriteReg
      16  i2c
       1  result

 
  17 bytes in section .bss
  16 bytes in section .data
 532 bytes in section .text
 
 532 bytes of CODE memory
  33 bytes of DATA memory

Errors: none
Warnings: none
